{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Redux-Thunk -> Redux-Saga 기존 에서 비동기 작업을 수행할 때, 를 사용해왔다. 내부에서 비동기 작업을 수행할 수 있으며, 다른 들을 호출 할 수 있다는 점에 매력을 느꼈다. 하지만, 위처럼 단순하게 이러한 문제만 해결하기 위해서는 가 접근성도 좋고, 편하게 사용할 수 있지만 다른 여러가지 상황에 대처하는데에는 가 더 유연하다고 하여 …","fields":{"slug":"/Study/Think/Redux-Saga/"},"frontmatter":{"date":"February 09, 2021","title":"Redux-Saga","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Gatsby && Graphql 이전 jekyll로 블로그를 운영해왔는데, 아무래도 나 이런것들이 생소하고 선호하지 않는 형식이였어서 커스터마이징이 좀 어려웠다. 그러던 중, 를 발견했고 너무 매력적인 요소가 많았다. React.js 기반 일단 여기서 극호감 Next.js와 유사한 구조 일부분 이 진행된다.(뭐 사실상 md파일 형식이라 크게 어려움은 없지…","fields":{"slug":"/Diary/gatsby/"},"frontmatter":{"date":"February 05, 2021","title":"블로그 이사다!","category":"Diary","draft":false,"tag":null}}},{"node":{"excerpt":"완료하였다. 이전까지는, 를 애용했지만 는 이 더 적합하다고 하여, 처음 사용해보았는데 에 전용 명령어를 입력한다면, 해당 깃 리포지토리에 추가될때마다 자동으로 빌드되는것이 참 편한것 같다. 당연히 이전에도 발생했던 문제인 새로고침시 는 이전에 해결했던 방법을 토대로 에 맞게 살 짝 수정하여 해결하였다. 애초에, 는 클라이언트사이드 라우팅을 사용하려했기때…","fields":{"slug":"/Study/Next/next.js loa-hands/"},"frontmatter":{"date":"February 03, 2021","title":"Next.js Loa-Hands","category":"Study","draft":false,"tag":"Next.js"}}},{"node":{"excerpt":"대부분의 프레임워크들은 편리한 배포를 위해, 파일을 알아서 만들어준다. 따라서, 간단한 커맨드를 통해 빌드파일을 만들 수 있는데 이전에 , ,로 서버, 부터,  빌드환경까지 만들었던 생각을 해보면 참 편하긴 함.. 또한 그러한 기능을 제공한다. 문제발생 😡 앱을 로 개발해보는 과정에서, 는 모든 사용자에게 공통된 정보를 보여주기때문에, 메소드를 통해 정적…","fields":{"slug":"/Study/Next/next.js webpack/"},"frontmatter":{"date":"February 01, 2021","title":"Next.js Webpack","category":"Study","draft":false,"tag":"Next.js"}}},{"node":{"excerpt":"Next.js는 기존 React.js와 다르게, 라우팅이라는 것을 별도의 모듈을 설치할 필요없이 기본적으로 제공한다. 더욱, 폴더의 구성을 통해 페이지 라우팅을 관리하더라  -> \n ->  위처럼 당연하게도 동적 라우팅을 제공하기도 한다. 예제를 보던 중 다소 헷갈렸던 부분이 있었기때문에, 내 입맛대로 다시 정리해보려 한다.  : 해당 동적라우팅이 생성?…","fields":{"slug":"/Study/Next/next.js route/"},"frontmatter":{"date":"January 28, 2021","title":"Next.js Route","category":"Study","draft":false,"tag":"Next.js"}}},{"node":{"excerpt":"소수찾기 Lv2 한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.\n\n각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요. 해결과정 처음에는 주어진 숫자에서 가장 작…","fields":{"slug":"/Study/DataStructure/programmers_07_full exploration/"},"frontmatter":{"date":"January 27, 2021","title":"프로그래머스-소수찾기","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"모의고사 Lv1 수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.\n\n1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, …\n\n2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, …","fields":{"slug":"/Study/DataStructure/programmers_06_full exploration/"},"frontmatter":{"date":"January 27, 2021","title":"프로그래머스-모의고사","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"예전에 CSR과 SSR을 비교해보면서 React도 SSR이 가능하도록 할 수 있는지 알아보는 과정에 hydrate메소드를 발견했었다. 그리고, Next.js를 학습하던 도중, 해당 용어를 다시 만나게 되었다. Before we talk about data fetching, let’s talk about one of the most important con…","fields":{"slug":"/Study/Next/next.js hydrate/"},"frontmatter":{"date":"January 26, 2021","title":"Next.js Pre-rendering","category":"Study","draft":false,"tag":"Next.js"}}},{"node":{"excerpt":"H-Index Lv2 H-Index는 과학자의 생산성과 영향력을 나타내는 지표입니다. 어느 과학자의 H-Index를 나타내는 값인 h를 구하려고 합니다. 위키백과1에 따르면, H-Index는 다음과 같이 구합니다.\n\n어떤 과학자가 발표한 논문 n편 중, h번 이상 인용된 논문이 h편 이상이고 나머지 논문이 h번 이하 인용되었다면 h의 최댓값이 이 과학자의…","fields":{"slug":"/Study/DataStructure/programmers_05_sort/"},"frontmatter":{"date":"January 25, 2021","title":"프로그래머스-H-Index","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"이전에도 공부해보고싶었지만, 우선순위에서 밀려있어서 손대보지 못하고있었던 Next.js이다 Next.js의 특징 몇몇가지가 참 매력적이였는데, 검색엔진이 최적화 React.js 기반 React, Vue, Angular 모두 클라이언트와 상호작용을 할 수 있다는 SPA라는점에서 큰 이점이 있지만, 아무래도 외부에 노출이되는것이 가장중요한 현 시점에 검색엔진…","fields":{"slug":"/Study/Next/next.js/"},"frontmatter":{"date":"January 25, 2021","title":"Next.js","category":"Study","draft":false,"tag":"Next.js"}}},{"node":{"excerpt":"가장 큰 수 Lv2 0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.\n\n예를 들어, 주어진 정수가 6, 10, 2라면 6102, 6210, 1062, 1026, 2610, 2106를 만들 수 있고, 이중 가장 큰 수는 6210입니다.\n\n0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, …","fields":{"slug":"/Study/DataStructure/programmers_04_sort/"},"frontmatter":{"date":"January 22, 2021","title":"프로그래머스-가장 큰 수","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"K번째수 Lv1 배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.\n 예를 들어 array가 1, 5, 2, 6, 3, 7, 4, i = 2, j = 5, k = 3이라면 array의 2번째부터 5번째까지 자르면 5, 2, 6, 3입니다. 1에서 나온 배열을 정렬하면 2, 3, 5, 6입니다. 2에서…","fields":{"slug":"/Study/DataStructure/programmers_03_sort/"},"frontmatter":{"date":"January 22, 2021","title":"프로그래머스-K번째수","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"기능개발 Lv2 프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.\n\n또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.\n\n먼저 배포되어야 하는 순서대로 작업의 진도…","fields":{"slug":"/Study/DataStructure/programmers_02_stack&que/"},"frontmatter":{"date":"January 18, 2021","title":"프로그래머스-기능개발","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"완주하지 못한 선수 Lv1 수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.\n\n마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해…","fields":{"slug":"/Study/DataStructure/programmers_01_hash1/"},"frontmatter":{"date":"January 18, 2021","title":"프로그래머스-완주하지 못한 선수","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"원래는 깃헙 데스크를 사용했었지만, 얼마전 ssd를 교체하면서 아예 포맷되어 소스트리로 넘어가게 되었다. 과정 협업간 브랜치를 나누어 진행 작업이 되면 해당 origin으로 푸시를 함 test브랜치에서 각각의 개발자들의 커밋내용을 체리픽하여 테스트함 master브랜치가 테스트를 통과한 커밋들만 체리픽하여 origin/master로푸시를 진행 이후 완료가 …","fields":{"slug":"/Study/Think/sourcetree/"},"frontmatter":{"date":"January 15, 2021","title":"소스트리와 깃","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"최근 갖고있던 프로젝트를 타입스크립트화 하면서, 그리고 지금까지 모든 프로젝트를 하며 RESTful API를 통해 서버에서 받아오는 데이터에대해 고민을 하게되었었다. 데이터에서 필요하지 않는 부분도 모두 받아오기때문에 데이터가 한눈에 들어오지 않더라. 최근 프로젝트에서 타입스크립트화 하면서, 어떠한 구조의 데이터가 넘어올 지 예상할 수 없고, 인터페이스를…","fields":{"slug":"/Study/Think/graphql/"},"frontmatter":{"date":"January 08, 2021","title":"Graph ql","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"🙂 발단 최근 기존 프로젝트를 타입스크립트로 변환하면서, 컴파일이 잘 되는지 확인하고자 index.html파일을 로컬에서 실행해보았다. 😡 문제 잘 될꺼라 생각했지만, 각종 파일을 불러오는 주소가 잘못되어있었고, 혹시나 하는 경로를 재설정해보았지만 여전히 에러가 발생했다. 불편한 해결 불편한 해결 위의 참고한 글을 따라서 에 속성을 주면 http통신이 필…","fields":{"slug":"/Study/Think/cra-build/"},"frontmatter":{"date":"January 05, 2021","title":"React Build index.html파일의 의문","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Loa-Hands 컴포넌트부터, 까지 모두 변경해보았다. 지금까지 올린 포스트와 비슷한 구성으로 만들어져서, 별다른 사진을 찍진 않았다. 디스트럭쳐링과정에서 불편함을 느꼈었지만, 해당 컴포넌트가 사용한는 의 내부 속성까지 모두 인터페이스에 포함시키면 원활히 작동되었다. 마찬가지로, 외부에서 가져오기 때문에, 정확한 구조를 알 수 없는 데이터이지만 필수적으…","fields":{"slug":"/Study/TypeScript/TypeScript_practice04/"},"frontmatter":{"date":"January 01, 2021","title":"TypeScript로 바꿔보자5","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"Loa-Hands 이전에 만들었던 앱을 타입스크립트로 바꿔보려한다. 의 일부분을 변경하였다. UserInfoContainer 의 비즈니스로직을 관리하는 컨테이너이다. 각종 액션을 호출하는 디스패쳐들이 생성되는 곳인데, 변수의 타입을 지정해주기가 애매했다. 따라서, 유틸리티를 사용하여, 액션에서 받는 변수의 타입을 가져와서 사용하였다. 의 속성을 사용하기때…","fields":{"slug":"/Study/TypeScript/TypeScript_practice03/"},"frontmatter":{"date":"December 30, 2020","title":"TypeScript로 바꿔보자4","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"Loa-Hands 이전에 만들었던 앱을 타입스크립트로 바꿔보려한다. 부분의 수정과, 부분을 손봐보았다. Reducer 에는 와 가 해당 class를 타입으로 갖고있는데, 이전에 지정해주었던 은 의 타입만을 허용하고 있었다. 따라서, 로 해당 를 확인했을 때, 와 의 유니온타입들중 유일하게 겹쳐서 유효한 속성은 뿐이라, homeData의 값을 설정할 수 없…","fields":{"slug":"/Study/TypeScript/TypeScript_practice02/"},"frontmatter":{"date":"December 29, 2020","title":"TypeScript로 바꿔보자3","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"Loa-Hands 이전에 만들었던 앱을 타입스크립트로 바꿔보려한다. 중앙 상태를 관리하는  파트를 손보기로 했다. Actions 각각의 액션을 구성하는 부분이다. 유틸리티의 편리함을 크게 느꼈다. 액션의 결과값들을 본래는 하나하나 인터페이스를 구성해야하지만, 해당 유틸리티를 사용하여 결과값 구조를 자동으로 만들어지게 했다. 에 대해 좀더 잘 알게되었다 이…","fields":{"slug":"/Study/TypeScript/TypeScript_practice01/"},"frontmatter":{"date":"December 25, 2020","title":"TypeScript로 바꿔보자2","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"Loa-Hands 이전에 만들었던 앱을 타입스크립트로 바꿔보려한다. 유저 정보 및, 홈 정보를 받아와서 클래스로 데이터를 관리하는  디렉토리를 먼저 손보기로 했다. userInfo 수집품, 원정대정보, 유저정보를 관리하는 큰 클래스이다. 세부 클래스들은 내가 구성한거라, 인터페이스를 만들고 타입을 정의하는데 큰 어려움은 없었다. 내부에서 갖고있는 단일 속…","fields":{"slug":"/Study/TypeScript/TypeScript_practice00/"},"frontmatter":{"date":"December 24, 2020","title":"TypeScript로 바꿔보자","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"TS 유틸리티 타입 타입스크립트에서 제공하는 여러 전역 유틸리티 타입이 있다. 대체로 타입변수는 , 또 다른 타입변수는 , 속성은 로 한다. 좀더 직관적으로 하기 위해 또 다른 타입변수는 로 카운팅하겠음 Partial TYPE의 모든 속성을 모두 선택적 타입()로 반환 대표타입 : 인터페이스   타입변수 :  Required TYPE의 모든 속성을 필수로…","fields":{"slug":"/Study/TypeScript/TypeScript_09_utility/"},"frontmatter":{"date":"December 23, 2020","title":"TypeScript Utility","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"모듈 기본적인 자바스크립트 모듈이 아닌, 타입스크립트만 가지고 있는 모듈개념을 추가적으로 알아보자. import & export 컴파일 옵션에서 를 통해, ES6모듈의 기본 import 방식도 사용할 수 있다. 모듈의 타입 선언(Ambient module declaration) 타입스크립트의 외부 자바스크립트 모듈 사용 모듈을 받고 import 할 때, …","fields":{"slug":"/Study/TypeScript/TypeScript_08_module/"},"frontmatter":{"date":"December 23, 2020","title":"TypeScript Module","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"선택적 옵션(Optional) 키워드를 사용하는 여러 선택적 개념에 대해 알아보자 에서는 키워드를 통해, 필수 속성이 아닌 선택적 속성임을 명시해줬다. 매개변수(Parameters) 타입을 선언할 때 선택적 매개변수를 지정할 수 있다. 속성과 메소드(Properties and Methods)  키워드를 속성과 메소드 타입에도 선언할 수 있다. , , 에서…","fields":{"slug":"/Study/TypeScript/TypeScript_07_optional/"},"frontmatter":{"date":"December 22, 2020","title":"TypeScript Optional","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"클래스(Class) 클래스의 생성자 와 일반 메소드와는 다르게 속성은 과 같이 클래스 바디에 별도로 타입을 선언한다. 클래스 수식어(Modifiers) 클래스의 속성이나 메소드에서 사용할 수 있는 접근 제어자(Access Modifiers)들이 있다  : 어디서나 자유롭게 접근가능(기본) - 속성, 메소드  : 나와 상속된 클래스 내에서 접근 가능 - 속…","fields":{"slug":"/Study/TypeScript/TypeScript_06_class/"},"frontmatter":{"date":"December 22, 2020","title":"TypeScript Class","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"함수 오버로드(Overloads) 오버로드는 이름은 같지만 매개변수 타입과 반환 타입이 다른 여러 함수를 가질 수 있는것. 내가 선언한 함수들이 중첩되는느낌? 원하는 만큼의 함수 선언 및 필수적으로 하나의 함수 구현을 가지고 있어야 하며, 함수 구현에서의 타입은 대게 가 사용된다. 인터페이스나 타입별칭에서도 사용할 수 있다. 참조 HEROPY Teck 한…","fields":{"slug":"/Study/TypeScript/TypeScript_05_function/"},"frontmatter":{"date":"December 21, 2020","title":"TypeScript Function","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"제네릭(Generic) 재사용을 목적으로 함수나 클래스의 선언 시점이 아닌, 사용 시점에 타입을 선언할 수 있다. 타입을 변수로 받아서 사용한다고 이해하기\n등의 경우, T라는 타입은 사용할수 없는 연산이므로 에러가 생김, 극히 일부의 타입만 사용할 수 있는 연산같은 경우는 피하는것이 좋은듯 하다..\n여러 예제를 검색해본 결과 동일한 타입의 값들이 채워지는…","fields":{"slug":"/Study/TypeScript/TypeScript_04_generic/"},"frontmatter":{"date":"December 21, 2020","title":"TypeScript Generic","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"타입 별칭(Type Aliases) 키워드를 사용해 새로운 타입 조합을 만들 수 있다. 하나 이상의 타입을 조합해 별칭을 부여하며, 정확히는 조합한 각 타입들을 참조하는 별칭을 만드는 것이다. 일반적으로 둘 이상의 조합을 구성하기 위해 을 많이 사용한다. 인 타입들이 여러번 사용될 때, 특정한 변수에 담아서 사용하는 느낌? , 과 비슷한 듯 하다. 참조 …","fields":{"slug":"/Study/TypeScript/TypeScript_03_type aliases/"},"frontmatter":{"date":"December 21, 2020","title":"TypeScript Type Aliases","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"인터페이스(interface) 는 타입스크립트의 객체를 정의하는 일종의 규칙 및 구조이다. 는 클래스에서 구현부가 빠졌다고 이해하면 편하다. 즉, 어떠한 객체가 이러이러한 프로퍼티 혹은 메소드를 가진다고 선언하는 것이다. 실질적인 구현은 이를 구현한다고 선언하는 클래스에 맡긴다. 선택적 속성(Optional properties) 속성뒤에 를 사용하면 선택…","fields":{"slug":"/Study/TypeScript/TypeScript_02_interface/"},"frontmatter":{"date":"December 18, 2020","title":"TypeScript interface","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"타입 기본(Types) 타입 지정 타입스크립트는 변수, 매개변수, 속성등에 와 같은 형태로 타입을 지정해줄 수 있다. 자바스크립트로 컴파일할 경우, 타입들이 모두 사라진다. 타입 에러 만약, 지정해준 타입이 아닌 다른 타입의 값이 들어오게 된다면, 바로 에러가 발생한다. 타입선언 불리언 : Boolean true, false로 값을 나타낸다. 숫자 : N…","fields":{"slug":"/Study/TypeScript/TypeScript_01_types/"},"frontmatter":{"date":"December 16, 2020","title":"TypeScript 타입 기본(Type)","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"TypeScript 프론트엔드 개발자들이 가장 선호하는 정적언어라고 한다. 실제로, 대부분 구인글의 우대사항에 TypeScript가 포함되어있는것을 확인해볼 수 있다. TypeScript가 생소한언어인것은 전혀 아니다. 이전에 Angular를 사용하면서 접해보았었고, Kotlin에서도 비슷하게 타입을 지정해주는 문법을 사용했었기때문.. 그때의 TypeSc…","fields":{"slug":"/Study/TypeScript/TypeScript_00_start/"},"frontmatter":{"date":"December 15, 2020","title":"TypeScript 시작","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"Hash Table 해시 테이블 특정 값을 받으면, 그 값을 해시함수에 통과시켜 나온 Index에 저장하는 자료구조 배열과 비슷한데, Index를 사용자지정함수를 통해 정하는것 같다. 직접주소테이블 의 초기는 이라는 자료구조에서 출발한다. 입력받은 value가 곧 key가된다. Index를 통해 관리하기 때문에, 값을 찾는데 O(1)의 시간복잡도를 가지고…","fields":{"slug":"/Study/DataStructure/dataStructures_07/"},"frontmatter":{"date":"December 07, 2020","title":"자료구조 Data Structures Hash Table","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"Tree 트리 단순히 나무를 뒤집어놓은것처럼 생겨서 트리이다. DOM에서 태그를 조회하였을 때, 자식노드들이 쭈르륵 있는것을 생각하면 편할듯 용어 Root : 첫 시작이 되는 노드 Leaf : 마지막노드 Branch || Edge : 노드와 노드를 이어주는 것 그래프도 Edge로 이어져있었다. Height : 시작이 되는 노드에서 끝이되는 노드 사이의 E…","fields":{"slug":"/Study/DataStructure/dataStructures_06/"},"frontmatter":{"date":"December 04, 2020","title":"자료구조 Data Structures Tree","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"Graphs 그래프 각 노드들이 서로 연결되어있는 자료 구조형으로, 아주 커다란 자료 구조형의 범위 중 하나라고 한다. 실제로, 자료구조가 포함되어있고, 그 안에는 가 포함되어있다고 함.. 상하위 개념이 없이 노드들간의 간선을 하나로 모아놓은 자료구조라고 한다. 구현방식 인접리스트 : 노드를 키로 사용하여 해당 노드의 이웃들을 리스트에 저장한다. 인접행렬…","fields":{"slug":"/Study/DataStructure/dataStructures_05/"},"frontmatter":{"date":"December 02, 2020","title":"자료구조 Data Structures Graphs","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"리팩토링 Class101 과제 피드백 이후, 제출했던 과제를 피드백에 따라 하나하나 수정해보았다. 코드의 가독성 문제 조건문 내부에 조건문이 더 있는것은, 매우 가독성이 떨어지는 프로그래밍이라고 한다. 들여쓰기가 많을수록 지저분한 코드라고 함.. 따라서, 조기에 을 시켜서 조건문을 탈출하는것이 좋다고 한다. 조기에 을 시키기 때문에, 조건문의 위치가 매우…","fields":{"slug":"/Study/Think/refactoring/"},"frontmatter":{"date":"November 30, 2020","title":"리팩토링과 클린코드","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"깃 버전관리시스템 깃을 꾸준히 사용해오고있지만, 처음부터 GUI인 깃허브데스크탑을 사용하여 터미널을 활용하는 오리지널은 잘 모른다.. 또한, 터미널을 사용하지 않고 GUI를 사용할 경우, 편리하지만 실제로 어떻게 작동하는지를 잘 모르며 기능사용에 있어 한정적이기 떄문에 터미널을 사용하는 오리지널 버전을 공부해보기로했다. 시작하기 pc에 기본적으로 내장되어…","fields":{"slug":"/Study/Think/git/"},"frontmatter":{"date":"November 30, 2020","title":"오리지널 깃","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"불합격! 11월 16일 class101 프론트엔드 개발 서류전형 통과.\n\n10월 20일 과제제출\n\n10월 24일 불합격 통보. Class101에서 요구하는 역량과 다르다는 결과가 나왔다. 혼자하는건 참 힘들어 현재 할 수 있는 최선의 코드를 짰다고 생각했는데.. 다른사람들 기준에서의 신입에는 못미쳤나보다.\n\n참 어렵구만~ 피드백을 받았다 해당 과제 관련 …","fields":{"slug":"/Diary/class101 out/"},"frontmatter":{"date":"November 24, 2020","title":"Class101 불합격","category":"Diary","draft":false,"tag":null}}},{"node":{"excerpt":"Stack 스택 이전에 봤던 와 유사하게 선형자료구조라고 한다. 다만, 둘의 차이로는 데이터 출력의 방식이다. 가 라면, 은 으로 나중에 입력된 데이터가 먼저 출력된다. 실행컨텍스트에서의 스택 컨텍스트를 공부하면서, 함수들이 실행 될 때,(선언말고) 이 쌓이게 되고, 내부함수가 실행되면 내부함수가 먼저 종료된다고 나와있었다. 배열의 Pop과 Push 자바…","fields":{"slug":"/Study/DataStructure/dataStructures_04/"},"frontmatter":{"date":"November 12, 2020","title":"자료구조 Data Structures Stack","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"Queue 큐 먼저 입력된 데이터가 먼저 출력되는 구조로 저장되는 형식이다. 데이터 입력(Enqueue), 데이터 출력(Dequeue) 두가지 작업이 있다. 이벤트루프의 Queue 이전에 이벤트루프를 공부하면서, 과 를 봤었는데, 비동기함수의 작업들이 끝나고 에 입력되면서, 메인의 이 비었을 때 순서대로(먼저 입력된게 먼저 출력되는) 넘겨진다고 했었다. …","fields":{"slug":"/Study/DataStructure/dataStructures_03/"},"frontmatter":{"date":"November 12, 2020","title":"자료구조 Data Structures Queue","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"List 리스트 처음 끝 중간에 엘리먼트를 추가/삭제할 수 있으며, 배열과 다르게 삭제된 값의 빈 공간을 남기지 않고 없앤다. List또한 index를 가지고 있긴 하지만, 현재 데이터의 다음에 위치하고있는 데이터 혹은 이전에 위치하고있는 데이터처럼 데이터의 순서가 더 중요하다. Array.splice로 가능한거 아니야? 잘 생각해보면, splice와 같…","fields":{"slug":"/Study/DataStructure/dataStructures_02/"},"frontmatter":{"date":"November 12, 2020","title":"자료구조 Data Structures List","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"Array 배열 데이터를 나열하여 각 데이터를 인덱스에 대응해주고, 인덱스로 데이터를 조회할 수 있다. 장점 같은 종류의 데이터를 효율적으로 관리 데이터를 순차적으로 저장 배열 생성 시, 크기를 정해주기 때문에 공간적인 활용이 좋다고 함 자바나 다른 언어에서는 그렇다는데.. 자바스크립트에서는 크기를 변경할 수 있다. 내가 알고있는것과 조금.. 다른건가..…","fields":{"slug":"/Study/DataStructure/dataStructures_01/"},"frontmatter":{"date":"November 12, 2020","title":"자료구조 Data Structures Array","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"자료구조를 왜 봤냐면.. 개발자 커뮤니티나 여러 블로그들을 둘러보다보면 빈번히 나오는 이야기들이 있다.  와 . 그런거 몰라도 실무에서는 크게 문제없다는 사람들도 있고, 개발자라면 기본적으로 알아야한다는 사람들도 있는 것 같다. 하지만 분위기가 공통적으로 더 효율적이고 좋은 프로그래밍을 위해서는 필요한 학문이라는것 같다. 개발을 전공으로 학교를 다니는 친…","fields":{"slug":"/Study/DataStructure/dataStructures_00/"},"frontmatter":{"date":"November 12, 2020","title":"자료구조 Data Structures","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"EC2+NGINX+RDS EC2로 가상의 컴퓨터를 만들어서, 서버를 구동시키고 AWS의 RDS로 Mysql 데이터베이스를 만든 뒤, EC2 인스턴스와 연결 그리고 NGINX를 프록시서버로 활용하여 80포트로 요청이 들어왔을 때, 숨겨져있는 서버에서 값을 보내주도록 설정해보려고 한다. AWS에 로그인 후, EC2 서비스를 검색한다 가상의 컴퓨터를 인스턴스라…","fields":{"slug":"/Study/Aws/EC2&NGINX&RDS/"},"frontmatter":{"date":"November 11, 2020","title":"EC2+NGINX+RDS","category":"Study","draft":false,"tag":"AWS"}}},{"node":{"excerpt":"EC2, RDS EC2는 AWS의 가상의 PC를 만들어 내가 만든 서버 및 웹사이트를 배포하는 역할을 하는것 같다. RDS는 AWS에 데이터베이스를 올리는듯한 느낌? 결과 후기 EC2 인스턴스를 생성하면 접근할수 있는 key가되는 pem파일을 하나 준다.  해당 파일을 통해 생성된 EC2 인스턴스에 접속할 수 있게 되더라. 여기서 Ubuntu라는것을 처음…","fields":{"slug":"/Study/Aws/ec2/"},"frontmatter":{"date":"November 07, 2020","title":"Node.js, Mysql, EC2, RDS","category":"Study","draft":false,"tag":"AWS"}}},{"node":{"excerpt":"React-Router의 문제 최근 React-Router를 활용하여 깃허브페이지나 AWS로 배포를 할 때 겪었던 문제에 대해 호기심이 생겨 알아보았고, 이유를 알게되었다. 😡 문제발생 localhost에서 React-Router를 활용하여 특정 뷰에 Path를 적용시켜주었을 때에는 새로고침을 해도 뷰가 잘 구성이 된다. 깃허브페이지나 AWS를 통한 배포…","fields":{"slug":"/Study/Think/react-router-problem/"},"frontmatter":{"date":"November 06, 2020","title":"React-Router refresh Error","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"S3, CloudFront 만들었던 React App을 S3와 CloudFront를 활용하여 배포하려고 한다. S3 AWS회원가입은 별거 없으니 생략! 첫 회원가입이라면 1년동안 몇몇 기능들을 무료로 사용할 수 있다!(S3, EC2, RDS …) 로그인을 하면, 해당 뷰를 볼 수 있는데, S3를 검색하고 들어가자 S3 검색 후, 우측 상단의 버킷 만들기를…","fields":{"slug":"/Study/Aws/s3&cloudfront/"},"frontmatter":{"date":"November 05, 2020","title":"React Loa-Hands S3+CloudFront 배포하기","category":"Study","draft":false,"tag":"AWS"}}},{"node":{"excerpt":"AWS 배포 최근 만들어왔던 웹 앱을 AWS를 통해 한번 배포해보자는 생각을 갖게되었다.\n물론, 서버비때문에 정상적으로 열렸다면 테스트해보고 바로 닫을꺼지만 ㅎㅎ;\n웹앱을 배포할 때에 가장 대표적인게 EC2와 S3인것 같아 간단하게 알아보았다.\n두가지 모두 AWS에서 일정 금액을 받고, 웹앱을 배포해줄 중앙 컴퓨터를 하나를 대여하는거라 생각하면 된다는데.…","fields":{"slug":"/Study/Aws/ec2&s3/"},"frontmatter":{"date":"November 04, 2020","title":"EC2&S3","category":"Study","draft":false,"tag":"AWS"}}},{"node":{"excerpt":"Loa-Hands React-Hook, redux-hook등 기존과 다른 방법으로 웹앱을 만드는 과정에서 여러가지 시행착오를 가졌었고, 그것들을 기록해보려 한다. Loa-Hands 이동 redux-hook / shallwoEqual 기존 Redux를 사용할 때에는, 해당 컴포넌트에 connect 메소드를 활용하여 연결을 하였었다. 한때는 이것이 직관적이고…","fields":{"slug":"/Study/Think/loa-hands/"},"frontmatter":{"date":"November 02, 2020","title":"React Loa-Hands","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"불합격! 10월 21일 당근마켓 프론트엔드 개발 서류전형 통과.\n\n10월 22일 화상통화로 기술면접.\n\n10월 26일 불합격 통보. 이번 채용의 결과는 현재 당근마켓팀이 수행하려는 프로젝트와 맞지 않았을 뿐, \n결코 상민님의 경험이나 역량의 부족이 아니라는 점을 알려드리고 싶어요. 사실상 역량부족이지. 좋은경험이였다. 그런데 솔직히 조금씩 지쳐간다. 기업…","fields":{"slug":"/Diary/dangn out/"},"frontmatter":{"date":"October 26, 2020","title":"당근마켓 불합격","category":"Diary","draft":false,"tag":null}}},{"node":{"excerpt":"🤔 복습이란 이전에 봤던 실행컨텍스트 스택을 다시 보는데, 이벤트루프라는 용어를 보게되었다. Event Loop 뭐야..?\n좋은 그림이 있어서 가져와봄 용어 은 우리가 선언한 변수나 함수들이다 는 싱글스레드로 하나의 작업수행공간을 가지고있다 는 일종의 비동기 함수들이라 생각하면 된다 는 에서 특정 시간이나 작업이 끝난 뒤 콜백함수들이 담기는 공간이다 진행…","fields":{"slug":"/Study/Think/Context&EventLoop/"},"frontmatter":{"date":"October 22, 2020","title":"실행컨텍스트 스택과 이벤트루프","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"🤔 의문 이전 으로 간단한 로스트아크 유저검색 앱을 만든 뒤, 취미? 개념으로 를 써서 조금 더 규모있게 웹 앱을 만들고 있다. 물론.. 공식적으로 제공되는 API가 아니라 완성된 DOM을 하나하나 뜯어서 정보를 추출하고 있기때문에 시간은 좀 걸리더라 ㅎㅎ; 그래도 재미는 있으니 다행 Virtual DOM 구글링 중 와 관련이 깊다는 이라는 용어를 보았는…","fields":{"slug":"/Study/Think/Dom&VirtualDom/"},"frontmatter":{"date":"October 21, 2020","title":"DOM 과 Virtual Dom","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"배웠으면 써먹어봐야지 - LostArk Hands LostArk Hands 내가 좋아하는 게임인 로스트아크 유저검색앱을 만들어보고싶었는데 해당 게임사에서 API를 공개하지 않더라..\n\n그런데, 전투정보실 네트워크에서 요청하는 주소를 그대로 사용해보니, 완성된 View파일을 가져오는데 잘만 조리하면.. 필요한 데이터를 뽑을수 있을것 같아, JS로 먼저 실험…","fields":{"slug":"/Study/Android/lostarkHands/"},"frontmatter":{"date":"October 08, 2020","title":"Kotlin LostArk Hands","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Coroutine Suspending 예제 예제1 서로 의존성있는 메소드일 때 코루틴 내부에서 중단메소드를 활용하면 꿈의 코드처럼 순차적으로 작동된다. 예제2 예제 1과 동일하게 스레드 내부에서 중단함수가 있기 때문에 메인스레드를 읽는것은 중단하긴 하지만, 서로 연관되어있지 않기 때문에 각기 동시에 실행시키고 결과값만 기다림 launch 빌더는 job 클…","fields":{"slug":"/Study/Android/kotlinCoroutine_04_suspending/"},"frontmatter":{"date":"September 29, 2020","title":"Kotlin Coroutine Suspending","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Coroutine Cancellation & Timeouts 예제 코루틴을 활용하여 비동기 처리를 할 때, 불필요하게 메모리가 소모되는 것을 막기 위해 진행 취소 또한 매우 중요하다. 예제1 생성되는 코루틴을 변수에 담고, cancel메소드를 통해 해당 코루틴을 중단시킬 수 있다. 예제2 위의 예제1과 비슷하게 코루틴을 작동을 중단시켰지만, 1.3초 이후…","fields":{"slug":"/Study/Android/kotlinCoroutine_03_cancellation&timeouts/"},"frontmatter":{"date":"September 29, 2020","title":"Kotlin Coroutine Cancellation & Timeouts","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Coroutine 예제 예제1 와 같은 속성들을 코루틴 빌더라고 하며, 해당 코루틴 빌더 이후 중괄호 내부에서 코루틴이 실행된다. 이러한 빌더들은 내부적으로 코루틴을 만들어서 반환하며, 앞에 스코프영역이 필요하다. GlobalScope : 수명주기가 프로그램 전체(프론트단에서 GO)로, 해당 앱이 종료될때까지 작동된다. 코루틴은 가벼운  (별도의 프로그램…","fields":{"slug":"/Study/Android/kotlinCoroutine_02_basic/"},"frontmatter":{"date":"September 28, 2020","title":"Kotlin Coroutine Basic","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Coroutine 🧐왜? 얼마전  앱을 하나 만들어보는 과정에 통신을 하게되었는데, 알수없는 에러가 계속 뜨더라.. 😬이런이유가.. 앱에서 통신을 할 때에, 에서 진행을 할 수 없기때문에 콜백등을 활용하여 다른 별도의 에서 작업을 해야한다더라.. 근데 프론트에서 많이 겪어보았듯이.. 콜백지옥.. 그러던중 처럼 동기, 비동기작업을 도와주는것이 있지않을까 알…","fields":{"slug":"/Study/Android/kotlinCoroutine_01_start/"},"frontmatter":{"date":"September 28, 2020","title":"Kotlin Coroutine","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Fragment Activity간 화면 전환이 아닌, 부품만 교체하여 화면을 구성할 수 있다. 프론트엔드 프레임워크에서 컴포넌트와 비슷한 기능 같다. 결과물 참조 홍스로이드 Kotlin Fragment","fields":{"slug":"/Study/Android/kotlin_11_fragment/"},"frontmatter":{"date":"September 25, 2020","title":"Kotlin Fragment","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Recycler View 기존 List View보다 좀 더 개선된 기능이다. 결과물 참조 홍스로이드 Kotlin Recycler View","fields":{"slug":"/Study/Android/kotlin_10_recyclerview/"},"frontmatter":{"date":"September 23, 2020","title":"Kotlin Recycler View","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Camera 안드로이드 기본 카메라 기능을 앱에서 사용할 수 있다. 개인적으로.. 자바 기본문법을 모르다보니 너무 어려웠다..특히 중간중간에 같은 구문이 있던데.. 잠깐 알아보니 의 속성들을 조금 더 쉽게 변경할 수 있는 문법인것같다!.. 공부해야할듯 결과물 참조 홍스로이드 Kotlin Camera","fields":{"slug":"/Study/Android/kotlin_09_camera/"},"frontmatter":{"date":"September 22, 2020","title":"Kotlin Camera","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"WebView 반응형 환경이 구현된 웹 어플리케이션이라면 해당 기능을 통해 간단하게 안드로이드 앱으로 만들 수 있다. 결과물 참조 홍스로이드 Kotlin WebView","fields":{"slug":"/Study/Android/kotlin_08_webview/"},"frontmatter":{"date":"September 22, 2020","title":"Kotlin WebView","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Shared Preferences 안드로이드는 서버 DB가 아닌 개인적으로 가지고 있는 간이 데이터베이스가 있다. 결과물 참조 홍스로이드 Kotlin Shared Preferences","fields":{"slug":"/Study/Android/kotlin_07_sharedpreference/"},"frontmatter":{"date":"September 21, 2020","title":"Kotlin Shared Preferences","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Navigation View 햄버거나 사이드에서 나오는 슬라이드 네비게이션을 만들 수 있다. 순서 에 추가  res 폴더에 네비게이션 메뉴를 다룰 menu resources directory 를 만들어준다. type을 menu로 해줘야 한다.\nTip! drawble의 new에서 —asset을 통해, 안드로이드에서 제공하는 기본 이미지들을 사용할 수 있다.…","fields":{"slug":"/Study/Android/kotlin_06_navigationview/"},"frontmatter":{"date":"September 21, 2020","title":"Kotlin Navigation View","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"ListView ListView기능을 통해, 배열에 담긴 정보를 반복순회하여 화면을 구성할 수 있다. 프론트단에서 과 비슷한 기능 같다. ListView는 adapter로 연결이 되어있어야 값을 넣어줄 수 있다. 결과물 위처럼 기본적으로 제겅되는 adapter의 경우 실무에서 사용하기에는 부족함이 있기때문에, 대부분 커스텀 adapter를 따로 만들어서 …","fields":{"slug":"/Study/Android/kotlin_05_listview/"},"frontmatter":{"date":"September 15, 2020","title":"Kotlin ListView & Adapter","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"ImageView & Toast ImageView를 통해, 자신이 갖고있는 이미지를 보여주거나, 외부 라이브러리를 통해 해당 url의 이미지를 보여줄 수 있다. Toast를 통해 하단에서 올라오는 알림글을 설정할 수 있다. alert과 비슷한기능? 단 하단에서 올라오고 시간 조절도 가능 URL을 통한 이미지 의 에 아래 두개의 링크를 적는다   파일에 추…","fields":{"slug":"/Study/Android/kotlin_04_imageview/"},"frontmatter":{"date":"September 14, 2020","title":"Kotlin ImageView & Toast","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Intent activity와 activiy간 화면이동 및 정보전달은 intent객체를 사용하면 된다. MainActivity 결과물 SubActivity 결과물 참조 홍스로이드 Kotlin intent","fields":{"slug":"/Study/Android/kotlin_03_intent/"},"frontmatter":{"date":"September 14, 2020","title":"Kotlin intent","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Edit Text & Button Edit Text 디자인탭에서는 Plain Text라고 나와있다. 프론트단에서 input태그와 같은역할인듯하다. 결과물 참조 홍스로이드 Kotlin EditText, Button","fields":{"slug":"/Study/Android/kotlin_02_editText/"},"frontmatter":{"date":"September 11, 2020","title":"Kotlin EditText & Button","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Kotlin 기본구성 기본적으로 xml파일 하나, kt파일 하나가 하나의 화면을 구성한다. xml은 정적인 파일이다. 프론트단에서 HTML, CSS와 같은 기능 인 듯 하다. kt파일은 동적인 파일이다. 프론트단에서 JavaScript의 영역 인 듯 하다. xml파일의 우측 상단을 보면 위와같은 탭들을 볼 수 있는데, 해당 탭을 통해 현재 보여지는화면, …","fields":{"slug":"/Study/Android/kotlin_01_textview/"},"frontmatter":{"date":"September 11, 2020","title":"Kotlin TextView","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Kotlin? 늘 반응형 웹으로만 모바일 환경을 구현하였었는데, 이전에 React를 배우고 React가 익숙하면 React Native또한 쉽게 할 수 있다고하여 공부했던 기억이 있다. 그리고 최근, Vue.js로 친구와 웹 어플을 만들면서 앱 어플도 만들어보기로 했었는데, 그때 처음 언급된 것이 . 물론.. 친구와 하던 어플은 웹앱까지는 완성이지만.. …","fields":{"slug":"/Study/Android/kotlin_00/"},"frontmatter":{"date":"September 10, 2020","title":"안드로이드나 한번 공부해볼까..?","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"컴포넌트 기존 HTML 엘리먼트를 확장하여 재사용 가능한 코드를 캡슐화하는 데 도움이 된다. 경우에 따라 특별한 is 속성으로 확장된 원시 HTML 엘리먼트로 나타낼 수 있다. Vue 컴포넌트는 Vue 인스턴스 이기도 한다. 그러므로 대부분의 옵션을 사용할 수 있다. 컴포넌트 사용하기 컴포넌트 명으로 지정한 태그에 template에 지정한 태그로 교체됨 …","fields":{"slug":"/Study/Vue/Vue_10_component/"},"frontmatter":{"date":"September 09, 2020","title":"Vue 컴포넌트","category":"Study","draft":false,"tag":"Vue.js"}}},{"node":{"excerpt":"양식 입력 바인딩 v-model 디렉티브를 사용하여 폼 input과 textarea 엘리먼트에 양방향 데이터 바인딩을 생성할 수 있다. v-model은 내부적으로 서로 다른 속성을 사용하고, 서로 다른 입력요소에 대해 다른 이벤트를 전송한다. text, textarea태그는 value 속성과 input 이벤트를 사용한다. checkbox, radio는 c…","fields":{"slug":"/Study/Vue/Vue_09_form/"},"frontmatter":{"date":"September 08, 2020","title":"Vue 양식 입력 바인딩","category":"Study","draft":false,"tag":"Vue.js"}}},{"node":{"excerpt":"이벤트 처리 이벤트 청취 v-on (@) 디렉티브를 사용하여 DOM 이벤트를 듣고, 트리거 될 때 JavaScript를 실행할 수 있다. 결과값 {::nomarkdown} 메소드 이벤트 핸들러 많은 이벤트 핸들러의 로직은 더 복잡할 것이므로, JavaScript를 v-on 속성값으로 보관하는 인라인 이벤트는 간단하지 않다. 이때문에, 메소드의 이름을 받는…","fields":{"slug":"/Study/Vue/Vue_08_events/"},"frontmatter":{"date":"September 07, 2020","title":"Vue 이벤트 처리","category":"Study","draft":false,"tag":"Vue.js"}}},{"node":{"excerpt":"리스트 렌더링 v-for v-for 디렉티브를 사용하여 배열을 기반으로 리스트 렌더링을 할 수 있다. item in items(item of items)형태의 특별한 문법이 필요하며, items는 원본 데이터의 배열이고 item은 반복되는 배열 엘리먼트의 별칭이다. 첫번째 인자로 해당 배열의 값을 받고, 두번째로 index값을 받는다. 결과값 {::nom…","fields":{"slug":"/Study/Vue/Vue_07_v-for/"},"frontmatter":{"date":"September 04, 2020","title":"Vue 리스트 렌더링","category":"Study","draft":false,"tag":"Vue.js"}}},{"node":{"excerpt":"조건부 렌더링 Vue에서는 v-if, v-else, v-else-if 디렉티브를 사용하여 조건부 렌더링을 할 수 있다. v-if v-if는 기준이 되는 하나의 엘리먼트에 추가되어야 한다. 하지만 추가하고싶지 않다면 최종 렌더링 결과에 추가되지 않는 를 사용하면 된다. 와 비슷한듯 함 v-else v-else를 통해, v-if가 아닌 모든 경우에 대한 렌더…","fields":{"slug":"/Study/Vue/Vue_06_v-if/"},"frontmatter":{"date":"September 02, 2020","title":"Vue 조건부 렌더링","category":"Study","draft":false,"tag":"Vue.js"}}},{"node":{"excerpt":"Class & Style 바인딩 데이터 바인딩은 엘리먼트의 클래스목록과 인라인 스타일을 조작하기 위해 일반적으로 사용된다. 두 속성은 v-bind를 사용하여 처리할 수 있다. 표현식으로 해당 속성의 값을 문자열로 입력해주면 되는데 일반 속성과 헷갈릴 수 있어서 Vue는 class와 style에 v-bind를 사용할 때, 문자열 이외에 객체나 배열을 사용할…","fields":{"slug":"/Study/Vue/Vue_05_class&style/"},"frontmatter":{"date":"September 02, 2020","title":"Vue Class & Style","category":"Study","draft":false,"tag":"Vue.js"}}},{"node":{"excerpt":"Computed & Watch Computed Computed 정의 템플릿이나 DOM 내에 표현식을 넣으면 편리하긴 하다.  하지만, 너무 많은 연산을 템플릿이나 DOM 내에서 하면 코드가 비대해지고 유지보수가 어려워진다.\n복잡한 로직이라면 반드시 Computed속성을 사용해야한다.\n메소드로 계산된 data값을 즉시바인딩한다고 생각하자.\nComputed에…","fields":{"slug":"/Study/Vue/Vue_04_computed&watch/"},"frontmatter":{"date":"September 01, 2020","title":"Vue Computed & Watch","category":"Study","draft":false,"tag":"Vue.js"}}},{"node":{"excerpt":"Template Syntax Vue.js는 렌더링 된 DOM을 기본 Vue 인스턴스의 데이터에 선언적으로 바인딩 할 수 있는 HTML 기반 템플릿 구문을 사용한다. 보간법 보간법 종류 문자열 데이터 바인딩이 가진 기본형태는 이중중괄호를 사용한 텍스트 보간이다. 원시 HTML  v-html은 태그를 그대로 읽어오기 때문에, 해커가 data로 직접접촉하여 바…","fields":{"slug":"/Study/Vue/Vue_03_template/"},"frontmatter":{"date":"August 31, 2020","title":"Vue 템플릿 문법","category":"Study","draft":false,"tag":"Vue.js"}}},{"node":{"excerpt":"정의 CDN이든 Vue cli든 모든 Vue 앱은 Vue 인스턴스를 만드는 것부터 시작된다. 속성과 메소드 각 Vue 인스턴스는 data 객체에 있는 모든 속성을 참조한다. 다른 사용자 지정 속성과 구분을 위해 $접두어를 사용할 수 있다. refs 등등 Vue에서 기본적으로 사용하는 속성들 데이터의 값이 변경되면 화면은 다시 렌더링된다.(React처럼) …","fields":{"slug":"/Study/Vue/Vue_02_instance/"},"frontmatter":{"date":"August 31, 2020","title":"Vue Instance","category":"Study","draft":false,"tag":"Vue.js"}}},{"node":{"excerpt":"🧐 시작하게 된 계기 이번에 학교에서 백엔드 전공을 하고 있는 친구가 움짤제작기라는 웹 어플리케이션을 만드는데, 프론트는 아예 백지인 상태에서 동시에 진행하려다보니 고충을 느껴 도와주게 되었다.   이왕 하는거, 새로운 프레임워크도 공부해볼 겸 Vue로 제작하게 되었다. Vue 실행 큰 규모의 웹어플리케이션이라면 Vue-cli를 통해 , create-re…","fields":{"slug":"/Study/Vue/Vue_01_start/"},"frontmatter":{"date":"August 31, 2020","title":"Vue 시작","category":"Study","draft":false,"tag":"Vue.js"}}},{"node":{"excerpt":"불합격! 오늘아침 화장실에서 큰 일을 보는데, 저번 7월 29일날 연락왔던 번호로 다시한번 연락이 왔다.\n\n메일에 이름을 잘못써서 죄송하다는 연락이였는데, 아직 메일을 확인해보지 못해서..\n 메일 작성 중 회사 직원이랑 대화를 하다보니 자연스럽게 회사 직원의 이름을 써서 보냈어요.. 3년이상 경력 혹은 그에 준하는 실력자 그 어느곳에서 속하지 않았는데, …","fields":{"slug":"/Diary/opgg out/"},"frontmatter":{"date":"August 27, 2020","title":"OP.GG 불합격","category":"Diary","draft":false,"tag":null}}},{"node":{"excerpt":"반복되는 단어 한방에 수정 Mac  Window  클릭하는 곳마다 커서 생성 Mac  Window  코드 위/아래로 움직이기 Mac  Window  코드 복사해서 위/아래로 움직이기 Mac  Window  코드 블록 한방에 코멘트 처리하기 Mac  Window  선택된 영역에 커서 만들기 Mac  Window  마우스가 가는 곳 마다 커서 만들기 Mac …","fields":{"slug":"/Study/Think/vscode/"},"frontmatter":{"date":"August 24, 2020","title":"Visual Studio 자주사용하는 단축키","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Library jQuery처럼 개발자가 필요로 할 때, 가져다 쓸 수 있는것들 중간에 추가되거나 삭제되어도 진행되는데에 아무런 문제가 없다. Framework 정해져있는 규칙에 따라 개발자가 작성해야 하는 것들 특정 규칙을 따르지 않으면, 정상적으로 진행되지 않는다. Tip 근데 React처럼 애매한 것들도 있으니 구분을 하는것이 프론트엔드단에서 중요한 …","fields":{"slug":"/Study/Think/library, framework/"},"frontmatter":{"date":"August 24, 2020","title":"Library? Framework?","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"깨끗한 코드의 필요성 협업을 할 때에, 추가적인 설명이 없어도 다른사람이 한번에 용도를 이해할 수 있도록   개인 프로젝트더라도 오랜 시간 이후, 내가 나의 코딩 의도를 쉽게 알 수 있도록   검색이 가능한 이름을 사용하기 해당 값의 용도를 예상하여 검색할 수 있도록 한다.   😡 BAD! 😁 GOOD! 함수명은 동사로 사용하기 + 하나의 함수는 하나의 …","fields":{"slug":"/Study/Think/clean code/"},"frontmatter":{"date":"August 24, 2020","title":"깨끗한 코드를 위한 5가지 팁!","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Symboliterator+generator 두가지 기능을 활용하여 객체를 반환하는 함수를 만들어보자 현재 는 반복순회할 수 없기 때문에 위의 에러가 발생한다. 해결하기 위해, 반복할 수 있는 의 형식으로 바꾸기위해  혹은 로 변환해줘야 한다. 위처럼 를 활용하여 새롭게 배열을 만드는것이 아닌, 로 할 수 있다.","fields":{"slug":"/Study/ES6/ES6_23_Symbol.iterator+generator/"},"frontmatter":{"date":"August 17, 2020","title":"ES6_Symbol.iterator+generator","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Symbol 7번째 원시 데이터 타입으로 이 추가되었다. 객체 고유 속성(, )를 만들 수 있는 원시데이터 형식이다.. 객체에서 로 생성된 속성은, 나 과 같은 순회 메소드에서 노출되지 않는다. 은 , 등의 메소드를 사용할 수 있다. Symbol(‘원하는 key’) Symbol.for 는 다른곳에서도 접근 가능한 Symbol을 생성하는것이다. 의 중요 특…","fields":{"slug":"/Study/ES6/ES6_22_Symbol/"},"frontmatter":{"date":"August 17, 2020","title":"ES6_Symbol","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"iterable객체 반복가능한 객체로, 배열을 일반화 한 객체이다. 어떤 객체에서도, 등의 반복문을 적용할 수 있다. iterable한 객체 만들기 현재, 라는 객체는 하지 않은 객체이다. 이 객체를, 를 통해 반복순회 가능한  객체로 만들어보자. 한 객체가 되기 위해선,  메소드를 추가해야한다.  호출 시, 를 가장 먼저 실행. 는 (메소드를 가지고있음…","fields":{"slug":"/Study/ES6/ES6_21_iterable/"},"frontmatter":{"date":"August 17, 2020","title":"ES6_iterable","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"generator함수 의 구조를 가지고 있다. 함수 호출 시, 코드가 실행되는것이 아닌 실행을 처리하는 특별객체 를 반환하다. 으로 단 하나의 값을 반환하는것이 아닌, 로 여러개의 결과값을 원하는 시기에 반환시킬 수 있다. 는의 주요 메소드로, 호출시, 가장 가까운 yield문을 만날때까지 실행되고, 해당 값을 반환한다. 의 반환값은 의 형태이고, 는 반…","fields":{"slug":"/Study/ES6/ES6_20_generator/"},"frontmatter":{"date":"August 17, 2020","title":"ES6_generator","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Proxy 특정 Object를 갖고와서 다른 용도로 사용할 수 있게 하는것 첫번째 인자로 대상이 될 객체를 넣고, 두번째 인자로 중간단계의 메소드를 갖고있는 객체를 지정한다. 대표 메소드는 ,  이다","fields":{"slug":"/Study/ES6/ES6_19_proxy/"},"frontmatter":{"date":"July 31, 2020","title":"ES6_Proxy","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Object.setPrototypeOf 첫번째 인자의 객체가 두번째 인자의 객체에게 상속받도록 한다. Object.assign(Object.create{객체}, {~~})랑 동일함","fields":{"slug":"/Study/ES6/ES6_18_object_setprototypeof/"},"frontmatter":{"date":"July 31, 2020","title":"ES6_Object.setPrototypeOf","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Object.assign 새로운 다른 객체를 복사하는것같지만, 실은 복제를 하는것. 같은 객체를 바라보고있음. 불변성에 적합하지않음 Object.create 인자로 들어오는 객체에게 상속받는 새로운 객체 생성 당연히 상속받는 객체의 값들도 사용할 수 있음. Object.assign + Object.create 의 하나하나 지정해줘야한다는 불편함을 개선하여…","fields":{"slug":"/Study/ES6/ES6_17_object_assign/"},"frontmatter":{"date":"July 30, 2020","title":"ES6_Object.assign","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Class 기존  를 통한 객체생성이 아닌,  를 통한 객체생성이 가능하게 되었다. 실제로 React, Vue를 사용하다보면 Class기반 컴포넌트들을 쉽게 볼 수 있다.","fields":{"slug":"/Study/ES6/ES6_16_class/"},"frontmatter":{"date":"July 30, 2020","title":"ES6_Class객체 생성","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"첫 서류통과. 꾸준히 이력서를 넣어왔는데, 단 한곳도 연락이 오지 않았다.\n물론 같이  웹 어플리케이션을 개발한 강사님이 기업을 한곳 추천해주셨었고, 잡플래닛과 크레딧잡을 통해 알아보니 괜찮은 기업이였지만.. 낙하산느낌도나고.. 무엇보다도 지원자격도 좀 애매했다. 뭐가 문제인걸까..? 개선? 깃허브에 올려두었던 공부기록을 깃허브 블로그로 더 보기 쉽게 해…","fields":{"slug":"/Diary/opgg/"},"frontmatter":{"date":"July 29, 2020","title":"OP.GG","category":"Diary","draft":false,"tag":null}}},{"node":{"excerpt":"Rest Parameters(가변인자) 가변인자 arguments는 유사배열이므로, Array 메소드를 사용할 수 없다. 기존 Array.from도 가능하지만, 변수로 받을 때 spread operator로 더 편하게 받을 수 있다.","fields":{"slug":"/Study/ES6/ES6_15_rest parameters/"},"frontmatter":{"date":"July 28, 2020","title":"ES6_Rest Parameters","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Default Parameters(기본 변수 설정) 함수의 변수 설정에서, 기본값을 지정해줄 수 있다.","fields":{"slug":"/Study/ES6/ES6_14_default params/"},"frontmatter":{"date":"July 28, 2020","title":"ES6_Default Parameters","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Template Template Literals  로 문자열을 감싸고, 를 통해 값을 바로 가져올 수 있다. 이전에는 나 로 문자열을 감싸고, 스크립트의 값을 로 해줬어야 했는데, 개선되었다. Tagged Template Literals 태그가 포함된 템플릿 리터럴을 함수로 분석할 수 있게되었다. func; 해당 함수에 템플릿 리터럴을 보내면,  첫번째 …","fields":{"slug":"/Study/ES6/ES6_12_template/"},"frontmatter":{"date":"July 27, 2020","title":"ES6_template처리","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Arroy function(화살표함수) 콜백함수나, 몇몇의 함수를 입력할 때 function을 다시쓰는것은 너무나도 귀찮다. 따라서, 이런 경우 로 축약할수 있게 되었다. 화살표함수의 this 기본적으로 객체 내에서는 메소드를 정의하게될 경우, 해당 메소드의 는 객체를 지칭한다. 하지만\n메소드를 화살표함수로 정의한다면, 는 객체가 아닌 를 지칭하게된다. …","fields":{"slug":"/Study/ES6/ES6_13_arroyfunction/"},"frontmatter":{"date":"July 27, 2020","title":"ES6_Arrow function(화살표함수)","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Map, WeakMap 배열 -> Set, WeakSet (좀 더 세련된 배열?) 객체 -> Map, WeakMap (좀 더 세련된 객체?) 특징 Set, Map : 배열이나 객체에서 기본타입을 저장할 때 사용한다. WeakSet, WeakMap : 기본타입을 제외한 모든 경우를 저장할 수 있다. set, get, has, delete, claer 메소드…","fields":{"slug":"/Study/ES6/ES6_11_map&weakmap/"},"frontmatter":{"date":"July 24, 2020","title":"ES6_Map&WeakMap 추가정보를 담은 객체저장","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"WeakSet : 기본타입이 아닌것들만 저장가능하다. 문자열, 숫자열, null, undefined, boolean을 제외한 모든것 객체타입을 중복없이 저장하고자 할 때 유용하다. WeakSet은 처음 넣을 때, 참조타입이였는데 기본타입이 되었다면 그 값을 없애버린다. console에는 있는것처럼 보이지만, 갖고있는지 has 여부를 물어보면 false가 …","fields":{"slug":"/Study/ES6/ES6_10_weakSet/"},"frontmatter":{"date":"July 24, 2020","title":"ES6_WeakSet을통한 효과적으로 객체타입저장","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Set 중복없이 유일한 값을 저장하고자 할 때, 이미 존재하는지 체크할 때 유용하다.  메소드로 해당 값을 가지고있는지 확인할 수 있다.  메소드로 해당 값을 지울 수 있다.","fields":{"slug":"/Study/ES6/ES6_09_set/"},"frontmatter":{"date":"July 24, 2020","title":"ES6_Set으로 유니크한 배열 만들기","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Destructuring Destructuring Array 배열에 변수를 할당할 때에, 좀 더 편하게 할 수 있다. Destructuring Object 객체에서 특정 값만 출력하고자 할 때(많이 사용했었음) 활용","fields":{"slug":"/Study/ES6/ES6_08_destructuring/"},"frontmatter":{"date":"July 23, 2020","title":"ES6_Destructuring","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"객체 내에서 메소드를 정의할 때에는 arrow function을 사용하면 안된다. 위의 방법을 사용하면, this가 객체가 아닌 window를 지칭하게 된다.","fields":{"slug":"/Study/ES6/ES6_07_create Object/"},"frontmatter":{"date":"July 23, 2020","title":"ES6_객체만들기","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"arguments 인자의 갯수가 수시로 바뀌는 함수의 경우, 모든 변수를 지정해주는것이 불가능하기 때문에 aurguments를 통해 별도의 변수 필요 없이 배열화 할 수 있다. 이전 실행컨텍스트 에서 arguments라는 값이 생성되는것을 생각해보면 된다.","fields":{"slug":"/Study/ES6/ES6_06_from&arguments/"},"frontmatter":{"date":"July 23, 2020","title":"ES6_from과 arguments","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"spread operator : 펼침연산자. 해당 기능을 사용하여, 참조가 아닌 복사된 객체와 배열을 만들수 있다.","fields":{"slug":"/Study/ES6/ES6_05_spread operator/"},"frontmatter":{"date":"July 23, 2020","title":"ES6_spread operator","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"data 순회하기 예제를 위한 임의의 상위 메소드 생성 forEach 등등.. map도 가능 for in 매우비추천 for in의 경우, 개발자가 임의로 Array.prototype을 통해 공용 메소드를 만들었다면, 그 메소드또한 console로 찍혀나온다. 즉, 상위에서 생성된 값 또한 순회됨. for of for in의 대체제로, 자신이 갖고있는 값들…","fields":{"slug":"/Study/ES6/ES6_04_for of/"},"frontmatter":{"date":"July 23, 2020","title":"ES6_for of","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"String.methods ES6에서 String 객체의 새로운 메소드가 추가되었다.","fields":{"slug":"/Study/ES6/ES6_03_new_String_methods/"},"frontmatter":{"date":"July 17, 2020","title":"ES6_String.new-Methods","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"const 재선언은 불가능하지만, 배열이나 객체로 선언(참조의 값)된 값을 변경하는것은 가능하다. 불변성 객체나, 배열은 참조를 하기 때문에, 값 변경시 모든 값들이 변경되서 새로운 객체나 배열을 만드는것이 좋다.","fields":{"slug":"/Study/ES6/ES6_02_const/"},"frontmatter":{"date":"July 17, 2020","title":"ES6_const","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"let 기존 우리가 알던  변수선언과 다르게, 두번 선언될 수 없다.   은 스코프단위로 서로 다른 변수이지만, 는 함수단위이다.    &  & \n클릭해보세요. scope\n어떤 변수들에 접근할 수 있는지 정의하는 것 전역스코프 : 전역변수 지역스코프 : 함수스코프와 블록스코프가 있다. var는 함수스코프. let은 {}인 블록스코프","fields":{"slug":"/Study/ES6/ES6_01_let/"},"frontmatter":{"date":"July 16, 2020","title":"ES6_let","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"😂 해당 스코프(영역)에서, 자신이 참조할 수 있는 변수를 클로저라하는것 같더라. Closure(클로저) 는 함수가 호출될 때가 아니라, 선언했을 때 정해진다고 했었음. 렉시컬 스코핑 스코프는 함수를 호출할 때가 아니라, 함수를 어디에 선언했는지에 따라 결정된다. 클로저의 장점 상태유지 : 현재 상태를 기억하고, 변경된 최신 상태를 유지할 수 있다. 전역…","fields":{"slug":"/Study/Think/Closure/"},"frontmatter":{"date":"July 14, 2020","title":"Closure, 클로저","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"😂 이전 실행컨텍스트를 공부하면서, 라는 용어를 접하게 되었다. 그렇게 어려운 용어는 아니였지만, 지금생각해보니를 먼저 알고 실행컨텍스트를 공부했다면 더 수월했을 듯 하다. Scope(영역) 는 함수가 호출될 때가 아니라, 선언했을 때 정해진다고 했었음. 1번 1번에서 인 함수선언식은,  함수 안에있기 때문에, 의 내부까지가 영역임. 따라서,  라는 변수…","fields":{"slug":"/Study/Think/Scope/"},"frontmatter":{"date":"July 13, 2020","title":"Scope, 영역","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"참조 : https://poiemaweb.com/js-execution-context 정의 Execution Context : 실행컨텍스트 실행 가능한 코드가 실행되기 위해 필요한 과정 scope, hoisting, this, function, closure등의 동작원리를 담고있는 자바스크립트의 핵심원리이다. 자바스크립트 엔진은 코드를 실행하기 위해 필요…","fields":{"slug":"/Study/Think/Executed Context_v1_1/"},"frontmatter":{"date":"July 10, 2020","title":"실행컨텍스트1(Executed Context)","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"참조 : https://www.zerocho.com/category/Javascript/post/5740531574288ebc5f2ba97e 😖 실행 컨텍스트를 이전에 공부했지만.. 아직 확신이 가지 않는 부분이 많아서 더 구글링 해 보았고, 조금 더 쉽게 설명된 글이 있었다! 실행컨텍스트 : 문맥이라 생각하자. 코드의 실행환경. 설명을 위한 코드 시작!…","fields":{"slug":"/Study/Think/Executed Context_v2/"},"frontmatter":{"date":"July 08, 2020","title":"실행컨텍스트(Executed Context) 더 쉽게!","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"참조 : https://poiemaweb.com/js-execution-context 실행 컨텍스트의 생성과정 설명을 위한 코드 전역객체 생성 시작 전 전역객체가 생성되며, 이 객체에는 어떠한 곳에서도 접근할 수 있다.(Global객체인듯 함) 이 초기의 전역객체에는 Math, String, Array등의 windows의 기본객체와 BOM, DOM등이 설…","fields":{"slug":"/Study/Think/Executed Context_v1_2/"},"frontmatter":{"date":"July 08, 2020","title":"실행컨텍스트2(Executed Context)","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"🙄 경험 Vue공부중, Component부분에서 부모와 자식Component간의 소통을 보고있었다. React를 이미 알고 있었기 때문에 속성을 전달하고, 속성으로 전달된 부모의 이벤트를 호출하는 구조랑 비슷한것 같아 문제는 없었다. 그런데.. dispatchEvent라는 메소드를 처음보게되었다.   🤔 의문 Redux상태관리를 할 때, 제공되는 disp…","fields":{"slug":"/Study/Think/CustomEvent/"},"frontmatter":{"date":"July 08, 2020","title":"CustomEvent","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"HTTP(Hypertext Transfer Protocol) 브라우저(클라이언트)와 서버간 데이터를 주고받기위한 방식(나는 이렇게 줄 테니, 넌 이렇게 받아) HTTP로 데이터를 주고받기 위해서는 Request, Response가 있어야한다.   URL을통해 데이터를 요청하는데, 요청하는 데이터에 특정 동작을 수행할 수 있다. GET : 존재하는 자원에 …","fields":{"slug":"/Study/Think/Http(s)&REST/"},"frontmatter":{"date":"July 07, 2020","title":"Http(s)? REST?","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Bundle(r) 웹앱을 구성하는 자원들이 많아질수록 서버에 요청 횟수가 많아져 속도가 느려진다. 같은 타입의 자원들끼리 묶어서 구성을 하게될 경우, 효율적으로 서버에 요청얼 하게되어 속도가 빨라지게된다. Bundler 종류 ⭐Webpack⭐ parcel browserify Webpack 자바스크립트 정적 모듈 번들러로, 모든것이 모듈화되어있다. Reac…","fields":{"slug":"/Study/Think/Webpack/"},"frontmatter":{"date":"July 06, 2020","title":"Webpack","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"SSR(서버 사이드 렌더링) 대표예시 MPA(멀티 페이지 어플리케이션) 장점 SEO(검색엔진환경)에 적합하다.   초기화면 로딩이 빠르다.   단점 요청값이 있으면, 웹서버에서 해당 View를 새로 만들어서 보여주기때문에, 로딩(하얀)화면이있다.   CSR보다 비교적 개발이 복잡해진다.   클라이언트와 서버가 상호작용하는 기능은 사라짐.(해당 내용은 개선…","fields":{"slug":"/Study/Think/SSR&CSR/"},"frontmatter":{"date":"July 06, 2020","title":"SSR? CSR?","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"동기함수   동기함수는 처음 실행된 함수가 종료될때까지, 이후의 함수는 실행되지 않는다. 따라서 비동기함수를 활용하는 경우가 많다.   🙄 경험 Node.js 할 때, readFile에 경로랑, 탐색 후 실행 콜백함수를 적고, 해당 콜백 함수 안에서 writeFile 기억남?\n그때는 두번만 하면 됬던거라 짧았는데, 더 길어지면 위와같은 애로사항이 발생함 …","fields":{"slug":"/Study/Think/Promise/"},"frontmatter":{"date":"July 06, 2020","title":"Promise","category":"Study","draft":false,"tag":"Think"}}}]}},"pageContext":{}},"staticQueryHashes":["3128451518","3665928227"]}