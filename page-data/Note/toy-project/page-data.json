{"componentChunkName":"component---src-templates-blog-post-js","path":"/Note/toy-project/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"utterances":"sangmin802/sangmin802.github.io"}}},"markdownRemark":{"id":"78ea9831-52e4-55af-8a32-91c8848cc16e","excerpt":"23년 1월부터 토이프로젝트를 진행해오면서 모노레포를 운영하며 확인한점, 과정을 기록해두고자 함 종료되는 프로젝트가 아니기 때문에, 계속하여 추가될 수 있음 모노레포 구성기 turboRepo를 선택하였음. yarn pnp모드 미지원 Yarn berry / pnp는 아직 정식지원 x node-modules만 가능 (blog post 11이였나 12에서 yarn berry 지원까지는 하는데 pnp는 아직이라고 함.. 진행중이라고는 하는데 마지막 포스트까지도 언급 없음..) eslint…","html":"<p>23년 1월부터 토이프로젝트를 진행해오면서 모노레포를 운영하며 확인한점, 과정을 기록해두고자 함</p>\n<blockquote>\n<p>종료되는 프로젝트가 아니기 때문에, 계속하여 추가될 수 있음</p>\n</blockquote>\n<h2 id=\"모노레포-구성기\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EA%B5%AC%EC%84%B1%EA%B8%B0\" aria-label=\"모노레포 구성기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모노레포 구성기</h2>\n<p>turboRepo를 선택하였음.</p>\n<h3 id=\"yarn-pnp모드-미지원\" style=\"position:relative;\"><a href=\"#yarn-pnp%EB%AA%A8%EB%93%9C-%EB%AF%B8%EC%A7%80%EC%9B%90\" aria-label=\"yarn pnp모드 미지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yarn pnp모드 미지원</h3>\n<p>Yarn berry / pnp는 아직 정식지원 x node-modules만 가능 (blog post 11이였나 12에서 yarn berry 지원까지는 하는데 pnp는 아직이라고 함.. 진행중이라고는 하는데 마지막 포스트까지도 언급 없음..)</p>\n<h3 id=\"eslint-설정-중-말줄임이-가능한것을-확인함\" style=\"position:relative;\"><a href=\"#eslint-%EC%84%A4%EC%A0%95-%EC%A4%91-%EB%A7%90%EC%A4%84%EC%9E%84%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%9C%EA%B2%83%EC%9D%84-%ED%99%95%EC%9D%B8%ED%95%A8\" aria-label=\"eslint 설정 중 말줄임이 가능한것을 확인함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>eslint 설정 중 말줄임이 가능한것을 확인함</h3>\n<p>eslint plugin에서 (/)eslint-plugin(-)는 제거할 수 있음</p>\n<ul>\n<li>@jquery/jquery = @jquery/eslint-plugin-jquery</li>\n<li>@foobar = @foobar/eslint-plugin</li>\n</ul>\n<p>eslint extends에서는 위의 plugin처럼 eslint-config-이름 생략 가능하며, plugin:이후의 eslint-plugin-을 제거할 수 있다.</p>\n<ul>\n<li>plugin:eslint-plugin-react/recommended = eslint-plugin-react 라는 package이름의 플러그인 안 recommend를 사용\n<ul>\n<li>plugin:react/recommended 요렇게 가능</li>\n</ul>\n</li>\n<li>@typescript-eslint/eslint-plugin/recommended\n<ul>\n<li>plugin:@typescript-eslint/recommended 요렇게 가능</li>\n</ul>\n</li>\n</ul>\n<p>무언가를 확장하고자 할 때, 그 대상이 플러그인이면 앞에 plugin:을 해주는듯\n이게근데 해보니깐, a/eslint-config/b 이런식이면 중간에있는건 제거를 잘 못해주는것 같기도..?</p>\n<p>eslant:recommend 백날찾아도 안보이길래, 커밋 확인해보니 js.config.recommend로 변경된듯..아직은 기존방식으로 해도 warning만 주면서 해주는듯 함</p>\n<ul>\n<li><a href=\"https://github.com/eslint/eslint/commit/c8c0c715a2964cc1859b99f9d4f542675094d1d5\">커밋내용</a></li>\n</ul>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2023/01/01/eslint.png?raw=true\" alt=\"eslint\">\n</div>\n<h3 id=\"prettier-똑똑함\" style=\"position:relative;\"><a href=\"#prettier-%EB%98%91%EB%98%91%ED%95%A8\" aria-label=\"prettier 똑똑함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prettier 똑똑함</h3>\n<p>prettier는 prettier-plugin-<name> 형식이 devDep에 포함되어있다면 라면 자동으로 plugin에 연동시킨다. 호오.. prettier-plugin-tailwindcss를 plugin에 수기로 추가하지 않아도 작동되는 이유였다..</p>\n<h3 id=\"tsconfig\" style=\"position:relative;\"><a href=\"#tsconfig\" aria-label=\"tsconfig permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tsconfig</h3>\n<p>tsconfig root옵션을 잘 조절하여 레포 상 하위 tsconfig가 읽히는 범위를 잘 조절하면 좋은듯\n만약, tsconfig를 패키지로 뺐을 때, ts server는 extends의 경로가 절대경로나 상대경로냐에 따라 다르게 보는듯\n절대경로일 경우, basePath에 그냥 tsconfig.json 만 붙여주는것 같음.</p>\n<blockquote>\n<p>이거는 Typescript repo 볼 때, 와! 이거다! 싶을정도로 명쾌하진 않아서..</p>\n</blockquote>\n<p>그래서 tsconfig의 이름이 조금이라도 바뀌면 안되고, 앞에 어떤 경로가 있던지 상관은 없는듯. tsconfig를 구분해주고 싶으면 dir 경로로 구분해줘야 할듯..?</p>\n<ul>\n<li>@sono-repo/tsconfig, @sono-repo/tsconfig/next 이런느낌?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Typescript repo 일부</span>\n<span class=\"token function\">combinePaths</span><span class=\"token punctuation\">(</span>basePath<span class=\"token punctuation\">,</span> <span class=\"token string\">'tsconfig.json'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>typescript moduleResolution을 nodeNext++ 로 변경하면서 package.json의 모듈로드 방식을 따라가고, exports 필드를 읽을 수 있게 되는 등 변경이 되었고, 이에 exports 필드 내부에서 경로, 타입스트립트가 추론할 수 있도록 type파일을 각각 설정해줄 수 있게되었음</p>\n<blockquote>\n<p>이거는 다른 포스트로 깊게 다루고자 함</p>\n</blockquote>\n<p>그래도 해당 패키지를 사용하는곳에서 아직 node 방식으로 설정되어있다면 exports를 못읽으니, main이랑 types 필드는 같이 유지시켜주는게..?</p>\n<h3 id=\"next-app을-vercel-배포-시-react-minify-error\" style=\"position:relative;\"><a href=\"#next-app%EC%9D%84-vercel-%EB%B0%B0%ED%8F%AC-%EC%8B%9C-react-minify-error\" aria-label=\"next app을 vercel 배포 시 react minify error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next app을 vercel 배포 시, react minify error</h3>\n<p>￼\n실제로 서버컴포넌트 내부에서 날짜객체값을 조회할 때, 에러가 발생했었음. (현재는 클라이언트 환경 안에서만 날짜객체 조회하도록 변경)</p>\n<p>서버컴포넌트는 web api를 사용할 수 없으니 당연한 결과일 것 같음</p>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/issues/50245\">관련이슈</a></li>\n<li><a href=\"https://www.freecodecamp.org/korean/news/how-to-use-react-server-components/\">서버컴포넌트</a></li>\n</ul>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2023/01/01/vercel-react-minify.png?raw=true\" alt=\"vercel-react-minify\">\n</div>\n<h3 id=\"next13-server-component-cache\" style=\"position:relative;\"><a href=\"#next13-server-component-cache\" aria-label=\"next13 server component cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next13 server component cache</h3>\n<p>각 페이지 혹은 서버에서 요청하는 데이터에 대한 캐시가 진행되는것 같음.</p>\n<p>첫 진입 시, 서버에서 만든 정적인 html 화면(데이터요청은 완료하고, 내부 동적인 스크립트코드만 안읽히는것같음) 그려주고 클라이언트사이드에서 하이드레이션 작동</p>\n<p>페이지별 데이터재검증, 요청 데이터별 재검증을 따로 줄 수 있다고 함(특정 조건마다 캐시초기화)</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/app/building-your-application/rendering/server-components#static-rendering-default\">관련 공문 1</a></li>\n<li><a href=\"https://nextjs.org/docs/app/building-your-application/caching\">관련 공문 2</a></li>\n</ul>\n<h3 id=\"npm-배포-scope\" style=\"position:relative;\"><a href=\"#npm-%EB%B0%B0%ED%8F%AC-scope\" aria-label=\"npm 배포 scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm 배포 scope</h3>\n<p>packages 하위 timer를 배포해보는데, 기존 package name 그대로 @sono-repo/timer 형식으로 하면 안됨</p>\n<p>@는 packages의 스코프를 명시하는데 이를 하려면 조직기능을 사거나, private 기능을 사야한다는것 같음..</p>\n<p>위 기능구매 없이 하면 내 계정 레지스트리에 관리중인 scope 가 없다고 에러나옴</p>\n<p>당연히 scope인 @ 없으면 / 도 안되니 그냥 sono-repo-timer로 함…</p>\n<h3 id=\"배포-rollup\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%ED%8F%AC-rollup\" aria-label=\"배포 rollup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배포, rollup</h3>\n<p>react를 dependencies에 해두면 라이브러리 받을 때 같이 받아지긴 하는데..</p>\n<p>이름도 react timer 이고 빌드를 하니 devDeps에 두고 그냥 rollup external로 제외시키자.</p>\n<p>React 없으면 설치도 안되게 peer 명시해두기.</p>\n<blockquote>\n<p>근데 요즘 패키지매니저들 peer 설치 안되어있으면 그냥 깔아주는게 기본옵션인것 같긴 하더라 ㅎㅎ..</p>\n</blockquote>\n<p>깡 Rollup 빌드 시, 기본적으로는 import 해오는 다른 라이브러리에 대한 처리는 하지 않아서 external로 제외한다고 안해주면 unresolved module 경고가 나옴</p>\n<p>추후 다른 라이브러리들은 빌드결과물에 포함시켜줄 수 도 있으니 resolve plugin은 적용시켜둠</p>\n<p>vite는 prod build를 할 때, Rollup을 사용하는데, vite는 위 plugin이 없어도 import 해오는 패키지들도 같이 포함시켜서 빌드함</p>\n<p>그냥 vite 안에 config를 보면 저 plugin 넣어주는것을 확인함.</p>\n<p>vite는 다 넣어줄 테니 external로 알잘딱하게 빼라는것같음</p>\n<h2 id=\"모노레포-패키지의-deps--devdeps-명시-기준은\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%9D%98-deps--devdeps-%EB%AA%85%EC%8B%9C-%EA%B8%B0%EC%A4%80%EC%9D%80\" aria-label=\"모노레포 패키지의 deps  devdeps 명시 기준은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모노레포 패키지의 deps / devDeps 명시 기준은..?</h2>\n<p>생각해보면 당연하구 간단한듯</p>\n<p>여러 ui 라이브러리들을 보면 내부에 rc-table과같은 react component 라이브러리를 내부에서 사용하는 경우가 있음. 그런데 우리가 그 ui 라이브러리를 쓸 때, rc-table을 받지는 않음</p>\n<p>받아오는 패키지가 a 라는 라이브러리를 쓴다고 보았을 때, 우리도 그 패키지가 아닌 우리 내부의 코드에서 a라는 라이브러리를 쓰면 명시를 해줘야할것 같음.</p>\n<p>만약, 우리는 쓰지 않고 패키지만 쓴다면 그냥 그 패키지만 받아오면 되는거니깐</p>\n<p>tailwind-config 패키지가 있다면, tailwind-config도 받아오고 걔가 tailwind를 들고있긴 하지만, 우리도 스타일을 할 때 tailwind 문법을 쓰니 tailwind를 명시해줘야겠지?</p>\n<p>chakra ui를 쓴다고 했을 때, chakra만 받아오지 chakra가 내부에서 쓰는 emotion은 명시 안해주는것처럼</p>\n<h2 id=\"next-pwa--tailwindconfig\" style=\"position:relative;\"><a href=\"#next-pwa--tailwindconfig\" aria-label=\"next pwa  tailwindconfig permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next-pwa / tailwindconfig</h2>\n<p>next-pwa를 사용할 때, tailwind config 의 Content 경로에 문자열 앞 glob pattern <code class=\"language-text\">**component/**/\\*</code> 등등.. 사용 시, 무한히 rebuilding 하는 문제가 있음…</p>\n<p>지금은 다른 방법으로 배포해둠..</p>\n<h2 id=\"빌드시-여러개의-entry\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%93%9C%EC%8B%9C-%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-entry\" aria-label=\"빌드시 여러개의 entry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌드시 여러개의 Entry</h2>\n<p>Swiper 라이브러리의 경우, path를 통해 구분해주고 있음. 여러개의 entry가 있고, 각각 exports 필드를 구분하여 이름이 아닌 경로로 구분.\n어차피 moduleResolution으로 exports 필드를 읽을 수 있는 값을 부여해줬다면 잘 나누는것도 괜찮을듯</p>\n<h2 id=\"배민-전환기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EB%AF%BC-%EC%A0%84%ED%99%98%EA%B8%B0\" aria-label=\"배민 전환기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배민 전환기</h2>\n<ul>\n<li><a href=\"https://techblog.woowahan.com/15084/\">배민 우아콘 아키텍처 변경</a></li>\n</ul>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2023/01/01/wooacon.png?raw=true\" alt=\"wooacon\">\n</div>\n<p>여기 모노레포 전환하면서 아키텍처를 변경한 과정도 있는데, 메모없이면 기억 못할것같아서..\n이해 돕기￼</p>\n<ul>\n<li>화살표 A—>B는, A는 B에 의존함(그냥 A는 B를 사용함)</li>\n<li>Bridge layer는 그냥 custom hook같은것들</li>\n<li>Data layer는 redux(store)나, react-query(cache)같은 라이브러리</li>\n<li>Model layer는 getter, setter hook, 혹은 api 서비스같은 것\n—> 생각해보면 service api에 의존하고있는, useQuery를 커스텀hook으로 래핑하여 컴포넌트나 페이지에서 사용함 이런느낌?</li>\n</ul>\n<h2 id=\"패키지매니저-변경-후-vercel-배포-이슈\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80%EB%A7%A4%EB%8B%88%EC%A0%80-%EB%B3%80%EA%B2%BD-%ED%9B%84-vercel-%EB%B0%B0%ED%8F%AC-%EC%9D%B4%EC%8A%88\" aria-label=\"패키지매니저 변경 후 vercel 배포 이슈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지매니저 변경 후 vercel 배포 이슈</h2>\n<p>Yarn -> pnpm으로 변경함.\n근데 모노레포 배포 중 이슈를 만남.\nyarm은 workspace로 등록이 되어있다면, 하위 apps에 명시되지 않은 커맨드라도, root에 명시되어있다면 실행이 가능했음.</p>\n<p>그래서 vercel 배포할 때, working dir이 apps 하위로 되어있어도, root의 lostsark:build 커맨드를 호출할 수 있었음.</p>\n<p>하지만 pnpm은 그렇지 않기 때문에, build script를 cd ../.. lostark:build로 변경해줘야 잘됨</p>\n<p>이 때 든 생각이, yarn, pnpm 두개가 workpsace 내에서 package.json의 script를 읽을 수 있는 범위가 다른건가 했음</p>\n<h2 id=\"stand-alone-전환\" style=\"position:relative;\"><a href=\"#stand-alone-%EC%A0%84%ED%99%98\" aria-label=\"stand alone 전환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stand-alone 전환</h2>\n<p>Next 에서 Image 태그 사용 시, standalone 모드라면 sharp 라는 이미지 최적화 라이브러리를 깔아주어야 한다 함. (Vercel 배포시에는 자동 깔린다 함)</p>\n<p>그런데, 깔아주었는데도 깔아야한다는 에러가 계속 반환됨</p>\n<ul>\n<li><a href=\"https://github.com/vercel/nft/issues/371\">관련이슈</a></li>\n<li><a href=\"https://github.com/vercel/next.js/issues/59346\">sharp를 0.32.6 버전 사용 혹은, 14.0.5 canary 사용</a></li>\n</ul>\n<p>빌드 결과물에 static, public은 복사를 안해줌. 내가 직접 해야 함.\nstatic은 .next의 static을 standalone/apps/lostark-hands-next/.next/static\npublic은 root의 public을 standalone/apps/lostark-hands-next/public</p>\n<p>사실 위 두개의 정적폴더가 존재하지 않음은 docker 이미지빌드, 실행 하면서 확인함 ㅋㅋ..\ndocker파일에도 동일하게 추가해줬음</p>\n<p>turborpo내에 docker 이미지 전용 빌드방식이 있다고 하여 두가지 방법으로 모두 배포해보았음.\n아직 많이 경험해보진 못해서 이야기해주는 이점에 대해 크게 느끼진 못하겠음.. 더 경험해봐야 알것 같음</p>\n<blockquote>\n<p>prune.Dockerfile, no-prune.Dockerfile로 구분하여 생성해둠</p>\n</blockquote>\n<ul>\n<li><a href=\"https://turbo.build/repo/docs/handbook/deploying-with-docker\">turbo prune</a></li>\n</ul>\n<h2 id=\"next-14-axios--fetch\" style=\"position:relative;\"><a href=\"#next-14-axios--fetch\" aria-label=\"next 14 axios  fetch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next 14 axios / fetch</h2>\n<p>next14 appdir이 되면서, api 요청에 따른 캐시방식을 axios에서는 fetch보다 자유롭게 주기 어려운것 같음..</p>\n<p>ppr 모드 활성화 시 아직 실험모드라 그런건진 모르겠는데, revalidate값을 빼서 항상 새롭게 받아오는 형식으로 하더라도, 배포환경에서 부분적으로 렌더링되는게 아니라 한번에 캐시된것 가져오는것 같음..</p>\n<p>Home, User info 쪽 streaming render 적용했는데, home은 정적인 경로 캐시에, segment만 부여되어있어서 잘 안되는것 같기도..</p>\n<p>확실히 Userinfo는 완전 동적경로라 잘 되는것으로 보임</p>\n<p>얘는 확실하진 않아서 좀 더 확인해보긴 해야할듯..</p>\n<h2 id=\"timer-bin--publish-action--changesets\" style=\"position:relative;\"><a href=\"#timer-bin--publish-action--changesets\" aria-label=\"timer bin  publish action  changesets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>timer bin / publish action / changesets</h2>\n<p>timer binary로 package.json 변경해주는것은 만듬.</p>\n<p>changesets라고 binary로도 제공해주고, ci로도 제공해주는데 문제가 좀 있는게, 배포해줄 때 패키지 하위 모두 배포를 해주는것 같음. ignore로 제외할 수 있는것 같은데, devDeps에 사용되고있는 패키지가 ignore 되어있으면 에러를 반환함..</p>\n<p>changesets action까지 적용은 했는데, 액션이 무조건 fail함. timer는 배포가 되긴 함. 사실 위의 이유로 timer만 배포되는게 맞긴한데, 모든 패키지들을 배포하려고 시도하는것때문에.. 허허</p>\n<p>그래서 그냥 배포 액션도 따로 만듬.</p>","frontmatter":{"title":"토이프로젝트(모노레포) 구성기","date":"January 01, 2023"}}},"pageContext":{"slug":"/Note/toy-project/","previous":{"fields":{"slug":"/Study/Think/react18/"},"frontmatter":{"title":"React 18 준비하기","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/moduleresolution/"},"frontmatter":{"title":"Typescript 모듈추론방식","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["1162990174","1854831582","2054357557","3128451518"],"slicesMap":{}}