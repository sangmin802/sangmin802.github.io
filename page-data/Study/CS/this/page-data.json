{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/CS/this/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"2829052a-1212-53bb-a349-6a488ffae60f","excerpt":"프론트엔드 개발을 하다보면 정말 자주 접하게되는 키워드가 있다.  이전  기반의 를 구성할 때에는 이 를 정말 질리도록 사용을 했었다. 너무나도 자연스럽게 사용하고 있었지만, 에 대해 설명을 해보자 하면 무슨말 부터 꺼내야 할지 몰랐던 점이 에게 너무 미안해서 제대로 알아보려고 한다. this…","html":"<p>프론트엔드 개발을 하다보면 정말 자주 접하게되는 키워드가 있다.</p>\n<p><code class=\"language-text\">this</code></p>\n<p>이전 <code class=\"language-text\">class</code> 기반의 <code class=\"language-text\">React</code>를 구성할 때에는 이 <code class=\"language-text\">this</code>를 정말 질리도록 사용을 했었다.</p>\n<p>너무나도 자연스럽게 사용하고 있었지만, <code class=\"language-text\">this</code>에 대해 설명을 해보자 하면 무슨말 부터 꺼내야 할지 몰랐던 점이 <code class=\"language-text\">this</code>에게 너무 미안해서 제대로 알아보려고 한다.</p>\n<h2 id=\"this\" style=\"position:relative;\"><a href=\"#this\" aria-label=\"this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this</h2>\n<p>정말 단순하게 정의해보자면 <code class=\"language-text\">this</code>는 자신을 사용하는 메소드를 호출한 객체가 저장되어있는 속성이라고 생각해볼 수 있을것 같다.</p>\n<p>하지만 이러한 <code class=\"language-text\">this</code>가 형성이 되는 방식은 여러개가 있다.</p>\n<p>아마 이러한 점 때문에, <code class=\"language-text\">this</code>에 대해 혼선이 생기고 사용했을 때 예상하지 못한 결과를 맞닥드리게 되는게 아닌가 싶다.</p>\n<h2 id=\"전역문맥에서의-this\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD%EB%AC%B8%EB%A7%A5%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"전역문맥에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역문맥에서의 this</h2>\n<p>전역컨텍스트에서 형성된 <code class=\"language-text\">this</code>는 전역객체를 참조하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"함수문맥에서의-this\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%AC%B8%EB%A7%A5%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"함수문맥에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수문맥에서의 this</h2>\n<p>함수에서의 <code class=\"language-text\">this</code>는 다른 변수나 상수들과 다르게 선언 시에 할당되는것이 아닌, 호출되는 방법에 의해 할당이 된다.</p>\n<blockquote>\n<p>기본적으로 함수에서의 <code class=\"language-text\">this</code>는 전역객체인 <code class=\"language-text\">window</code>를 지칭한다.</p>\n</blockquote>\n<h3 id=\"전역호출\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD%ED%98%B8%EC%B6%9C\" aria-label=\"전역호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역호출</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span></code></pre></div>\n<p>일반 함수에서 <code class=\"language-text\">this</code>를 호출 하였을 때에는 전역객체인 <code class=\"language-text\">window</code>를 참조한다.</p>\n<p>우리는 함수를 호출할 때 간략하게 <code class=\"language-text\">test()</code>와 같이 함수명만 적어서 호출하지만, <code class=\"language-text\">window.test()</code>라는것이 생략되어있기 때문에, <code class=\"language-text\">window</code>를 참조하는 채로 호출이 되어서 그런것 같다.</p>\n<h3 id=\"this-객체-전달\" style=\"position:relative;\"><a href=\"#this-%EA%B0%9D%EC%B2%B4-%EC%A0%84%EB%8B%AC\" aria-label=\"this 객체 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this 객체 전달</h3>\n<p><code class=\"language-text\">call</code>과 <code class=\"language-text\">apply</code> 메소드를 사용하여 기존 호출 방식에 따른 <code class=\"language-text\">this</code>할당이 아닌 다른 객체로 넘겨줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'객체 상민'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'전역 상민'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 전역 상민</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 객체 상민</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 전역 상민</span></code></pre></div>\n<p>하지만, <code class=\"language-text\">call</code>의 방식은 일회성이 강하다. 객체를 넘겨주었을 때에는 해당 객체로 할당이 되지만, 이후의 호출에서는 다시 원래의 방식으로 돌아온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'객체 상민'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'전역 상민'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> newTest <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 전역 상민</span>\n<span class=\"token function\">newTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 객체 상민</span>\n<span class=\"token function\">newTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 객체 상민</span></code></pre></div>\n<p><code class=\"language-text\">ECMAScript5</code>에서 도입된 <code class=\"language-text\">bind</code>메소드를 사용하게 될 경우, <code class=\"language-text\">call</code>과 유사하게 객체를 넘겨줄수 있게 되지만, 일회성이 아닌 영구적으로 참조하게되는 새로운 함수를 생성하게된다.</p>\n<h2 id=\"내부함수에서의-this\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EB%B6%80%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"내부함수에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내부함수에서의 this</h2>\n<p>내부함수의 <code class=\"language-text\">this</code>는 전역컨텍스트의 <code class=\"language-text\">this</code>인 <code class=\"language-text\">window</code>를 참조하고 있다.</p>\n<p>이 때, 참조하는 <code class=\"language-text\">this</code>를 변경하기 위해서는 <code class=\"language-text\">.bind</code>, <code class=\"language-text\">.call</code>등으로 <code class=\"language-text\">this</code>를 할당하여 호출해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'innerFun'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerFun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'innerFun2'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">innerFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">innerFun2</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// innerFun window</span>\n<span class=\"token comment\">// innerFun2 obj</span></code></pre></div>\n<h2 id=\"화살표함수에서의-this\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"화살표함수에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표함수에서의 this</h2>\n<p>아마 가장 많이 헷갈리는 부분이 아닐까 싶다.</p>\n<p>콜백함수 등 자주 접하게되는 화살표함수 또한 <strong>함수</strong> 이지만, 화살표 함수를 호출할 때 형성되는것이 아닌, 자신보다 상위인 외부 렉시컬 환경에서 참조하고있는 <code class=\"language-text\">this</code>를 참조한다.</p>\n<p>또한, 이 화살표함수에는 <code class=\"language-text\">bind</code>와 같은 넘겨주는 메소드가 적용되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">introduce</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nobj1<span class=\"token punctuation\">.</span><span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// obj1</span>\nobj2<span class=\"token punctuation\">.</span><span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span></code></pre></div>\n<p><code class=\"language-text\">obj1</code>의 상황을 알아보자</p>\n<p><code class=\"language-text\">obj1</code>의 <code class=\"language-text\">introduce</code> 메소드를 호출하게 되면서, 함수 내부의 <code class=\"language-text\">this</code>는 호출방식에 따라 할당되기 때문에 <code class=\"language-text\">obj1</code>을 참조하게 된다.</p>\n<p><code class=\"language-text\">obj2</code>는 화살표함수로서 조금 다르게 진행된다.\n기본적으로 <code class=\"language-text\">this</code>는 두가지 방식으로 알 수 있다.</p>\n<ol>\n<li>전역 스코프의 <code class=\"language-text\">this</code></li>\n<li>객체의 프로퍼티로서 함수가 호출 및 메소드로 바인딩되는 <code class=\"language-text\">this</code></li>\n</ol>\n<p>하지만 위의 두가지와 다르가 화살표함수는 정적스코프의 <code class=\"language-text\">this</code>를 참조한다.</p>\n<p>화살표함수는 일반 함수와 다르게 <code class=\"language-text\">arguments</code>, <code class=\"language-text\">this</code>, <code class=\"language-text\">constructor</code>가 없다.</p>\n<blockquote>\n<p><code class=\"language-text\">consturctor</code>가 없기 때문에 화살표함수를 생성자 함수로 사용할 수 없는것.</p>\n</blockquote>\n<p>따라서, 함수 내부에서 사용되는 <code class=\"language-text\">this</code>를 사용하기 위해 선언될 당시의 상위 스코프에 있는 <code class=\"language-text\">this</code>를 참조하는 것이다.</p>\n<blockquote>\n<p>변수를 찾아가는 일종의 스코프 체인으로 볼 수 있을것 같음</p>\n</blockquote>\n<p>추측해보건데, 함수 컨텍스트가 실행되면서 기본적으로 <code class=\"language-text\">this</code>가 참조하는 <code class=\"language-text\">window</code>객체에서, 함수가 호출되는 방식에 따라 다른 <code class=\"language-text\">this</code>로 변경될 수 있고, 화살표함수는 정적스코프로 참조하는 변경된 <code class=\"language-text\">this</code>를 참조하는것이 아닐까?</p>\n<h2 id=\"prototype-chain에서의-this\" style=\"position:relative;\"><a href=\"#prototype-chain%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"prototype chain에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prototype chain에서의 this</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\nnewObj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nnewObj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p><code class=\"language-text\">class</code>이전 자바스크립트에서 상속개념을 사용할 수 있었던 <code class=\"language-text\">prototype</code>또한 <code class=\"language-text\">this</code>에 있어서는 일반 정규 함수와 비슷하게 호출될 때 할당이 된다.</p>\n<p>또한, <code class=\"language-text\">class</code>와 생성자함수 <code class=\"language-text\">new Fucntion</code>내부에서의 <code class=\"language-text\">this</code>또한 자기 자신 객체를 참조로 하여 <code class=\"language-text\">binding</code>된다.</p>\n<p><code class=\"language-text\">React</code>의 <code class=\"language-text\">class</code>기반에서 사용해오던 <code class=\"language-text\">this.state</code>, <code class=\"language-text\">this.props</code>들이 이와 같은 방식때문이다.</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://github.com/anirudh-modi/JS-essentials/blob/master/ES2015/Functions/Arrow%20functions.md#how-this-is-different-for-arrow-functions\">arrow functions this</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/orphaned/Web/JavaScript/Reference/Operators/this\">mdn this</a></li>\n<li><a href=\"https://poiemaweb.com/js-this\">this</a></li>\n<li><a href=\"https://velog.io/@seungdeng17/%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%9D%98-this-with-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\">화살표함수와 실행컨텍스트</a></li>\n</ul>","frontmatter":{"title":"🧙‍♀️ this를 제어하는 자","date":"July 23, 2021"}}},"pageContext":{"slug":"/Study/CS/this/","previous":{"fields":{"slug":"/Study/Think/delegation/"},"frontmatter":{"title":"⌛ Event Delegation을 통한 효율적인 이벤트 할당","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/CS/prototype/"},"frontmatter":{"title":"🌳 자바스크립트 class의 뿌리 prototype","category":"Study","draft":false,"tag":"CS"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}