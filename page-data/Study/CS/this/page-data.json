{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/CS/this/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"2829052a-1212-53bb-a349-6a488ffae60f","excerpt":"프론트엔드 개발을 하다보면 정말 자주 접하게되는 키워드가 있다.  이전  기반의 를 구성할 때에는 이 를 정말 질리도록 사용을 했었다. 너무나도 자연스럽게 사용하고 있었지만, 에 대해 설명을 해보자 하면 무슨말 부터 꺼내야 할지 몰랐던 점이 에게 너무 미안해서 제대로 알아보려고 한다. this…","html":"<p>프론트엔드 개발을 하다보면 정말 자주 접하게되는 키워드가 있다.</p>\n<p><code class=\"language-text\">this</code></p>\n<p>이전 <code class=\"language-text\">class</code> 기반의 <code class=\"language-text\">React</code>를 구성할 때에는 이 <code class=\"language-text\">this</code>를 정말 질리도록 사용을 했었다.</p>\n<p>너무나도 자연스럽게 사용하고 있었지만, <code class=\"language-text\">this</code>에 대해 설명을 해보자 하면 무슨말 부터 꺼내야 할지 몰랐던 점이 <code class=\"language-text\">this</code>에게 너무 미안해서 제대로 알아보려고 한다.</p>\n<h2 id=\"this\" style=\"position:relative;\"><a href=\"#this\" aria-label=\"this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this</h2>\n<p>정말 단순하게 정의해보자면 <code class=\"language-text\">this</code>는 자신을 사용하는 메소드를 호출한 객체가 저장되어있는 속성이라고 생각해볼 수 있을것 같다.</p>\n<p>하지만 이러한 <code class=\"language-text\">this</code>가 형성이 되는 방식은 여러개가 있다.</p>\n<p>아마 이러한 점 때문에, <code class=\"language-text\">this</code>에 대해 혼선이 생기고 사용했을 때 예상하지 못한 결과를 맞닥드리게 되는게 아닌가 싶다.</p>\n<h2 id=\"전역문맥에서의-this\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD%EB%AC%B8%EB%A7%A5%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"전역문맥에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역문맥에서의 this</h2>\n<p>전역컨텍스트에서 형성된 <code class=\"language-text\">this</code>는 전역객체를 참조하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"함수문맥에서의-this\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%AC%B8%EB%A7%A5%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"함수문맥에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수문맥에서의 this</h2>\n<p>함수 내부에서의 <code class=\"language-text\">this</code>는 다른 변수나 상수들과 다르게 선언 시에 할당되는것이 아닌, 호출되는 방법에 의해 할당이 된다.</p>\n<blockquote>\n<p>엄밀히 따지면, <code class=\"language-text\">this</code>를 선언하여 사용할 수 있지만, 그를 포함하고 있는 메소드가 호출되기 전 까지는 <code class=\"language-text\">undefined</code>상태이고, 호출 될 때 그 방법에 따라 <code class=\"language-text\">this</code>가 할당된다고 한다.</p>\n</blockquote>\n<h3 id=\"전역호출\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD%ED%98%B8%EC%B6%9C\" aria-label=\"전역호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역호출</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span></code></pre></div>\n<p>일반 함수에서 <code class=\"language-text\">this</code>를 호출 하였을 때에는 전역객체인 <code class=\"language-text\">window</code>를 참조한다.</p>\n<p>우리는 함수를 호출할 때 간략하게 <code class=\"language-text\">test()</code>와 같이 함수명만 적어서 호출하지만, <code class=\"language-text\">window.test()</code>라는것이 생략되어있기 때문에, <code class=\"language-text\">window</code>를 참조하는 채로 호출이 되어서 그런것 같다.</p>\n<h3 id=\"this-객체-전달\" style=\"position:relative;\"><a href=\"#this-%EA%B0%9D%EC%B2%B4-%EC%A0%84%EB%8B%AC\" aria-label=\"this 객체 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this 객체 전달</h3>\n<p><code class=\"language-text\">call</code>과 <code class=\"language-text\">apply</code> 메소드를 사용하여 기존 호출 방식에 따른 <code class=\"language-text\">this</code>할당이 아닌 다른 객체로 넘겨줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'객체 상민'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'전역 상민'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 전역 상민</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 객체 상민</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 전역 상민</span></code></pre></div>\n<p>하지만, <code class=\"language-text\">call</code>의 방식은 일회성이 강하다. 객체를 넘겨주었을 때에는 해당 객체로 할당이 되지만, 이후의 호출에서는 다시 원래의 방식으로 돌아온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'객체 상민'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'전역 상민'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> newTest <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 전역 상민</span>\n<span class=\"token function\">newTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 객체 상민</span>\n<span class=\"token function\">newTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 객체 상민</span></code></pre></div>\n<p><code class=\"language-text\">ECMAScript5</code>에서 도입된 <code class=\"language-text\">bind</code>메소드를 사용하게 될 경우, <code class=\"language-text\">call</code>과 유사하게 객체를 넘겨줄수 있게 되지만, 일회성이 아닌 영구적으로 참조하게되는 새로운 함수를 생성하게된다.</p>\n<h2 id=\"화살표함수에서의-this\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"화살표함수에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표함수에서의 this</h2>\n<p>아마 가장 많이 헷갈리는 부분이 아닐까 싶다.</p>\n<p>콜백함수 등 자주 접하게되는 화살표함수 또한 <strong>함수</strong> 이지만, 화살표 함수를 호출할 때 형성되는것이 아닌, 자신보다 상위인 외부 렉시컬 환경에서 참조하고있는 <code class=\"language-text\">this</code>를 참조한다.</p>\n<p>또한, 이 화살표함수에는 <code class=\"language-text\">bind</code>와 같은 넘겨주는 메소드가 적용되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">introduce</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nobj1<span class=\"token punctuation\">.</span><span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// obj1</span>\nobj2<span class=\"token punctuation\">.</span><span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span></code></pre></div>\n<p><code class=\"language-text\">obj1</code>의 상황을 알아보자</p>\n<p><code class=\"language-text\">obj1</code>의 <code class=\"language-text\">introduce</code> 메소드를 호출하게 되면서, 함수 내부의 <code class=\"language-text\">this</code>는 호출방식에 따라 할당되기 때문에 <code class=\"language-text\">obj1</code>을 참조하게 된다.</p>\n<p><code class=\"language-text\">obj2</code>는 화살표함수로서 조금 다르게 진행된다.\n기본적으로 <code class=\"language-text\">this</code>는 두가지 방식으로 알 수 있다.</p>\n<ol>\n<li>전역 스코프의 <code class=\"language-text\">this</code></li>\n<li>일반 정규 함수에서 호출 및 메소드로 바인딩되는 <code class=\"language-text\">this</code></li>\n</ol>\n<p>화살표함수의 경우 위의 두가지에 해당되지 않는 상태이며, 외부 렉시컬 스코프에서 <code class=\"language-text\">this</code>를 탐색하여 할당이 되기 때문에, <code class=\"language-text\">this</code>를 찾기 위해 상위인 <code class=\"language-text\">obj2</code>에서 탐색을 한다.</p>\n<p><code class=\"language-text\">obj2</code>에서는 <code class=\"language-text\">this</code>를 찾지 못하기 떄문에, 최상위 <code class=\"language-text\">window</code>까지 나오게 되고, <code class=\"language-text\">window</code>를 <code class=\"language-text\">this</code>로 참조하게 되는 것이다.</p>\n<h2 id=\"화살표함수와-정규함수의-this-차이\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98%EC%99%80-%EC%A0%95%EA%B7%9C%ED%95%A8%EC%88%98%EC%9D%98-this-%EC%B0%A8%EC%9D%B4\" aria-label=\"화살표함수와 정규함수의 this 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표함수와 정규함수의 this 차이</h2>\n<p>외부 깃에서 좋은 예제와 설명글을 찾을 수 있었다.</p>\n<h3 id=\"정규함수\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%ED%95%A8%EC%88%98\" aria-label=\"정규함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규함수</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// global</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nfoo<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">'func'</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span></code></pre></div>\n<p>처음 <code class=\"language-text\">foo</code>함수가 호출이 될 때, <code class=\"language-text\">foo</code>객체를 넘겨주었기 때문에 <code class=\"language-text\">foo</code>함수에서의 <code class=\"language-text\">this</code>는 <code class=\"language-text\">window</code>가 아니라 <code class=\"language-text\">foo</code>일것이다.</p>\n<p>하지만. <code class=\"language-text\">setTimeout</code>의 콜백함수로 실행된 함수에서의 <code class=\"language-text\">this</code>는 <code class=\"language-text\">foo</code>가 아닌 <code class=\"language-text\">window</code>를 참조하고 있다.</p>\n<p>왜일까?</p>\n<p>일반 함수의 경우 호출될 때 <code class=\"language-text\">this</code>가 할당된다고 하였다.</p>\n<p><code class=\"language-text\">foo</code>함수는 호출되는 과정에서 <code class=\"language-text\">call</code>을 통해 <code class=\"language-text\">foo</code>객체가 전달되었지만, <code class=\"language-text\">foo</code>내부에서 <code class=\"language-text\">setTimeout</code>이후 내부 콜백함수가 <strong>호출</strong> 될 때에는 별 다르게 넘겨지는것이 없기 때문에, <code class=\"language-text\">window</code>객체를 참조하는것이다.</p>\n<h3 id=\"settimeout-setinterval에서의-this\" style=\"position:relative;\"><a href=\"#settimeout-setinterval%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"settimeout setinterval에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setTimeout, setInterval에서의 this</h3>\n<p><code class=\"language-text\">setTimeout</code>에서의 <code class=\"language-text\">this</code> 바인딩은 기존과는 조금 다른 방식으로 진행된다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>함수에서의 <code class=\"language-text\">this</code>는 호출이 될 때 <code class=\"language-text\">binding</code>이 되니, <code class=\"language-text\">func</code>에서의 <code class=\"language-text\">this</code>는 <code class=\"language-text\">obj</code>라 생각할 수 있지만, 결과값은 <code class=\"language-text\">window</code>가 나온다.</p>\n<p><code class=\"language-text\">setTimeout</code>의 조금 특별한 동작방식때문이라고 한다.</p>\n<p>전달받은 인수인 콜백함수를 실행시킬 때, <code class=\"language-text\">this</code>에 <code class=\"language-text\">window</code>를 할당한다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>func\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같은 방식으로 실행되는 느낌이라고 한다.</p>\n<p>따라서, <code class=\"language-text\">setTimeout</code>의 콜백함수의 <code class=\"language-text\">this</code>를 <code class=\"language-text\">window</code>가 아닌 본연의 객체로 <code class=\"language-text\">binding</code>되게 하기 위해 하나의 껍데기 <code class=\"language-text\">function</code>을 감싸서 사용하는것이다.</p>\n<p>그렇게 된다면, 껍데기인 <code class=\"language-text\">fucntion</code>의 <code class=\"language-text\">this</code>는 <code class=\"language-text\">setTimeout</code>의 특징으로 <code class=\"language-text\">this</code>가 바인딩 되지만, 내부 함수는 일반 함수의 <code class=\"language-text\">binding</code> 방식에 따라 호출될 때 <code class=\"language-text\">this</code>가 결정된다.</p>\n<h3 id=\"정규함수--bind\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%ED%95%A8%EC%88%98--bind\" aria-label=\"정규함수  bind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규함수 + bind</h3>\n<p>위의 정규함수에서 콜백함수에 다른 객체를 전달해줄 수 있는 방법을 이전에 알았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// func</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">100</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nfoo<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">'func'</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이전까지는 모두 동일하지만, <code class=\"language-text\">setTimout</code>으로 보내지는 콜백함수에 <code class=\"language-text\">this</code>가 <code class=\"language-text\">binding</code>이 되어있는것을 볼 수 있다.</p>\n<p>이때의 <code class=\"language-text\">this</code>는 <code class=\"language-text\">foo.call(foo)</code> 로 전달이 된 <code class=\"language-text\">foo</code>객체를 지칭하고 있고, 해당 <code class=\"language-text\">foo</code>객체를 콜백함수의 호출단계에도 바인딩을 해준 것이다.</p>\n<h3 id=\"화살표함수\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C%ED%95%A8%EC%88%98\" aria-label=\"화살표함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표함수</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// func</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nfoo<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">'func'</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span></code></pre></div>\n<p>처음 정규함수와 동일하지만, 콜백함수가 화살표함수로 구성이 되어있다.</p>\n<p>단순하게 화살표함수로 구현을 했더니, 자연스럽게 <code class=\"language-text\">this</code>가 처음 전달된 <code class=\"language-text\">foo</code>객체를 참조하고 있다.</p>\n<p>순서를 생각해보면 간단하다.</p>\n<ol>\n<li>화살표함수 내부의 <code class=\"language-text\">this</code>는 외부 렉시컬 스코프를 참조하여 형성되기 때문에, 콜백함수 내부에서 바인딩된 <code class=\"language-text\">this</code>를 찾는다.</li>\n<li>콜백함수 내부에는 <code class=\"language-text\">this</code>가 존재하지 않아, <code class=\"language-text\">function foo</code>까지 탐색하여 올라간다.</li>\n<li><code class=\"language-text\">fucntion foo</code>에는 <code class=\"language-text\">call</code>로 전달된 <code class=\"language-text\">foo</code> <code class=\"language-text\">this</code>객체가 존재했고, 해당 객체를 참조하게 된다.</li>\n</ol>\n<p>당연히, <code class=\"language-text\">call</code>메소드가 존재하지 않는다면 <code class=\"language-text\">this</code>는 <code class=\"language-text\">window</code>를 참조하게 된다.</p>\n<h2 id=\"prototype-chain에서의-this\" style=\"position:relative;\"><a href=\"#prototype-chain%EC%97%90%EC%84%9C%EC%9D%98-this\" aria-label=\"prototype chain에서의 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prototype chain에서의 this</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\nnewObj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nnewObj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p><code class=\"language-text\">class</code>이전 자바스크립트에서 상속개념을 사용할 수 있었던 <code class=\"language-text\">prototype</code>또한 <code class=\"language-text\">this</code>에 있어서는 일반 정규 함수와 비슷하게 호출될 때 할당이 된다.</p>\n<p>또한, <code class=\"language-text\">class</code>와 생성자함수 <code class=\"language-text\">new Fucntion</code>내부에서의 <code class=\"language-text\">this</code>또한 자기 자신 객체를 참조로 하여 <code class=\"language-text\">binding</code>된다.</p>\n<p><code class=\"language-text\">React</code>의 <code class=\"language-text\">class</code>기반에서 사용해오던 <code class=\"language-text\">this.state</code>, <code class=\"language-text\">this.props</code>들이 이와 같은 방식때문이다.</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://github.com/anirudh-modi/JS-essentials/blob/master/ES2015/Functions/Arrow%20functions.md#how-this-is-different-for-arrow-functions\">arrow functions this</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/orphaned/Web/JavaScript/Reference/Operators/this\">mdn this</a></li>\n</ul>","frontmatter":{"title":"🧙‍♀️ this를 제어하는 자","date":"July 23, 2021"}}},"pageContext":{"slug":"/Study/CS/this/","previous":{"fields":{"slug":"/Study/CS/prototype/"},"frontmatter":{"title":"🌳 자바스크립트 class의 뿌리 prototype","category":"Study","draft":false,"tag":"CS"}},"next":{"fields":{"slug":"/Study/CS/browser/"},"frontmatter":{"title":"💻 브라우저 렌더링의 시작","category":"Study","draft":false,"tag":"CS"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}