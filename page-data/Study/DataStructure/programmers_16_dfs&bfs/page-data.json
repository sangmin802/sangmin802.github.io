{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/DataStructure/programmers_16_dfs&bfs/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"344e021a-e61a-5d7d-bdb6-27bcdc2c5eed","excerpt":"네트워크 Lv3 네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 와 가 직접적으로 연결되어있고, 와 가 직접적으로 연결되어 있을 때 와 도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 는 모두 같은 네트워크 상에 있다고 할 수 있습니다. 컴퓨터의 개수 , 연결에 대한 정보가 담긴 2차원 배열 가 매개변수로 주어질 때, 네트워크의 개수를  하도록  함수를 작성하시오. 제한사항 컴퓨터의 개수 은 1 이상 20…","html":"<h1 id=\"네트워크-lv3\" style=\"position:relative;\"><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-lv3\" aria-label=\"네트워크 lv3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>네트워크 Lv3</h1>\n<p>네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, <code class=\"language-text\">컴퓨터 A</code>와 <code class=\"language-text\">컴퓨터 B</code>가 직접적으로 연결되어있고, <code class=\"language-text\">컴퓨터 B</code>와 <code class=\"language-text\">컴퓨터 C</code>가 직접적으로 연결되어 있을 때 <code class=\"language-text\">컴퓨터 A</code>와 <code class=\"language-text\">컴퓨터 C</code>도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 <code class=\"language-text\">컴퓨터 A, B, C</code>는 모두 같은 네트워크 상에 있다고 할 수 있습니다.</p>\n<p>컴퓨터의 개수 <code class=\"language-text\">n</code>, 연결에 대한 정보가 담긴 2차원 배열 <code class=\"language-text\">computers</code>가 매개변수로 주어질 때, 네트워크의 개수를 <code class=\"language-text\">return</code> 하도록 <code class=\"language-text\">solution</code> 함수를 작성하시오.</p>\n<h2 id=\"제한사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한사항</h2>\n<ul>\n<li>컴퓨터의 개수 <code class=\"language-text\">n</code>은 1 이상 200 이하인 자연수입니다.</li>\n<li>각 컴퓨터는 0부터 <code class=\"language-text\">n-1</code>인 정수로 표현합니다.</li>\n<li><code class=\"language-text\">i</code>번 컴퓨터와 <code class=\"language-text\">j</code>번 컴퓨터가 연결되어 있으면 <code class=\"language-text\">computers[i][j]</code>를 1로 표현합니다.</li>\n<li><code class=\"language-text\">computer[i][i]</code>는 항상 1입니다.</li>\n</ul>\n<h3 id=\"해결-방안\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88\" aria-label=\"해결 방안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방안</h3>\n<ol>\n<li><code class=\"language-text\">체크가 필요한 컴퓨터 배열</code>, <code class=\"language-text\">모든 컴퓨터의 배열</code>이 남아있다면 작업 계속 진행</li>\n<li>\n<p><code class=\"language-text\">체크가 필요한 컴퓨터 배열</code>이 비어있다면, <code class=\"language-text\">모든 컴퓨터의 배열</code>의 첫번째 컴퓨터를 받아옴</p>\n<ul>\n<li>아래의 작업 중, 아무런 컴퓨터와도 연결되지 않은 컴퓨터일 경우, 다음 컴퓨터를 받아오도록 하기 위함 + 초기 값</li>\n<li><code class=\"language-text\">index</code> 카운팅</li>\n</ul>\n</li>\n<li><code class=\"language-text\">체크가 필요한 컴퓨터 배열</code>의 첫번째 배열의 첫번째 값이 체크한 컴퓨터이거나, 존재하지 않다면 처음부터 진행</li>\n<li>\n<p>3번의 조건이 아니라면, 현재 연결된 컴퓨터의 <code class=\"language-text\">index</code></p>\n<ul>\n<li><code class=\"language-text\">체크가 필요한 컴퓨터 배열</code>에 해당 컴퓨터 배열을 기존 앞에 풀어넣음</li>\n<li>연결중인 네트워크 선 -1</li>\n<li>체크한 컴퓨터 배열에 해당 <code class=\"language-text\">index</code>의 컴퓨터 추가</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> computers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>computers<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> CComputer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Checked Computer</span>\n  <span class=\"token keyword\">let</span> NCComputer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Need Check Computer</span>\n  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> n\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">returnIndex</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> me<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">!==</span> me<span class=\"token punctuation\">)</span> newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> newArr\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>NCComputer<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>NCComputer<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      NCComputer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token function\">returnIndex</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      CComputer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n      index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> NCComputer<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CComputer<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n\n    NCComputer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">returnIndex</span><span class=\"token punctuation\">(</span>computers<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>NCComputer<span class=\"token punctuation\">]</span>\n    answer <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    CComputer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> answer\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>최대한 모든 상황을 확인하려 했고, 어떠한 컴퓨터와도 연결되지 않은 컴퓨터에는 접근할 수 없기 때문에, 모든 컴퓨터를 네트워크 수라고 가정한 다음, 연결되어있을 때마다 -1을 해주었다.</p>\n<h3 id=\"더-나은-해결방안\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EB%82%98%EC%9D%80-%ED%95%B4%EA%B2%B0%EB%B0%A9%EC%95%88\" aria-label=\"더 나은 해결방안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 나은 해결방안</h3>\n<p>실제로 컴퓨터의 갯수만큼 공간을 생성하고, 체크를 한 컴퓨터인지와 네트워크 갯수를 동시에 처리하는 방식이다.</p>\n<ol>\n<li><code class=\"language-text\">n</code>개 의 <code class=\"language-text\">false</code>속성인 배열을 만든다.</li>\n<li>\n<p>그 갯수만큼 재귀함수를 실행시킨다.</p>\n<ul>\n<li>이때 재귀함수는 네트워크 수를 반환한다.</li>\n</ul>\n</li>\n<li>만약 체크를 한 컴퓨터라면 0을 반환</li>\n<li>\n<p>체크하지 않은 컴퓨터일 경우</p>\n<ul>\n<li><code class=\"language-text\">true</code>로 변경</li>\n<li>\n<p>해당 컴퓨터 배열을 순회하여 연결되어있는 다른 <code class=\"language-text\">index</code>의 컴퓨터들을 재귀함수의 인자로 보냄</p>\n<blockquote>\n<p>서로가 연결되어있다면, 이미 <code class=\"language-text\">true</code>로 되어있기 때문에 0으로 조기종료됨</p>\n</blockquote>\n</li>\n<li>연결한 컴퓨터이기 때문에 1을 반환</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> computers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> visit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    answer <span class=\"token operator\">+=</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> visit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    visit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> computers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 연결이 된 컴퓨터인 경우만 재귀함수 진행</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>computers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">recursive</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> answer\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h2>\n<ul>\n<li><a href=\"https://programmers.co.kr/learn/courses/30/lessons/43162?language=javascript\">프로그래머스 네트워크</a></li>\n</ul>","frontmatter":{"title":"알고리즘-DFS/BFS","date":"June 29, 2021"}}},"pageContext":{"slug":"/Study/DataStructure/programmers_16_dfs&bfs/","previous":{"fields":{"slug":"/Study/DataStructure/programmers_15_dfs&bfs/"},"frontmatter":{"title":"알고리즘-DFS/BFS","category":"Study","draft":false,"tag":"Programmers Coding Test"}},"next":null}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}