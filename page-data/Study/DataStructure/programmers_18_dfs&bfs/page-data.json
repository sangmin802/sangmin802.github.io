{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/DataStructure/programmers_18_dfs&bfs/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"0d0934c7-cfee-5ddb-876d-141b1462d7c5","excerpt":"여행경로 Lv3 주어진 항공권을 모두 이용하여 여행경로를 짜려고 합니다. 항상  공항에서 출발합니다. 항공권 정보가 담긴 2차원 배열 가 매개변수로 주어질 때, 방문하는 공항 경로를 배열에 담아  하도록  함수를 작성해주세요. 제한사항 모든 공항은 알파벳 대문자 3글자로 이루어집니다. 주어진 공항 수는 3개 이상 10,000개 이하입니다. 의 각 행 는  공항에서  공항으로 가는 항공권이 있다는 의미입니다. 주어진 항공권은 모두 사용해야 합니다. 만일 가능한 경로가…","html":"<h1 id=\"여행경로-lv3\" style=\"position:relative;\"><a href=\"#%EC%97%AC%ED%96%89%EA%B2%BD%EB%A1%9C-lv3\" aria-label=\"여행경로 lv3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여행경로 Lv3</h1>\n<p>주어진 항공권을 모두 이용하여 여행경로를 짜려고 합니다. 항상 <code class=\"language-text\">&quot;ICN&quot;</code> 공항에서 출발합니다.</p>\n<p>항공권 정보가 담긴 2차원 배열 <code class=\"language-text\">tickets</code>가 매개변수로 주어질 때, 방문하는 공항 경로를 배열에 담아 <code class=\"language-text\">return</code> 하도록 <code class=\"language-text\">solution</code> 함수를 작성해주세요.</p>\n<h2 id=\"제한사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한사항</h2>\n<ul>\n<li>모든 공항은 알파벳 대문자 3글자로 이루어집니다.</li>\n<li>주어진 공항 수는 3개 이상 10,000개 이하입니다.</li>\n<li><code class=\"language-text\">tickets</code>의 각 행 <code class=\"language-text\">[a, b]</code>는 <code class=\"language-text\">a</code> 공항에서 <code class=\"language-text\">b</code> 공항으로 가는 항공권이 있다는 의미입니다.</li>\n<li>주어진 항공권은 모두 사용해야 합니다.</li>\n<li>만일 가능한 경로가 2개 이상일 경우 알파벳 순서가 앞서는 경로를 <code class=\"language-text\">return</code> 합니다.</li>\n<li>모든 도시를 방문할 수 없는 경우는 주어지지 않습니다.</li>\n</ul>\n<h3 id=\"해결-방안\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88\" aria-label=\"해결 방안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방안</h3>\n<p>처음에는 간단한 문제라고 생각했었다.\n모든 항공권을 사용할 수 있다고 해서 <code class=\"language-text\">ICN &gt; 도칙지</code> 순 으로 정렬을 한 다음, 이어지는 경로의 끝을 찾아야 하므로 <code class=\"language-text\">dfs</code> 방식으로 해결하려고 했다.</p>\n<p>하지만, 1번의 테스트케이스만 계속 시간초과라는 오답을 반환했다.</p>\n<p>알아보니, <strong>항공권을 모두 사용할 수 있지만, 중간에 연결이 끊길수 도 있다는 점이였다</strong></p>\n<p>결국 정렬은 뒤로하고 모든 항공 경로를 따지기로 하였다. 출발 공항을 강제로 <code class=\"language-text\">&quot;ICN&quot;</code>으로 지정해준다면 중요한 정렬자체는 해결되는 셈이였다.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">출발지 = &quot;ICN&quot;</code>, <code class=\"language-text\">사용한 항공권</code>, <code class=\"language-text\">누적 경로</code>를 변수로 받는 재귀함수를 만든다.</p>\n<ul>\n<li><code class=\"language-text\">visit</code>과 <code class=\"language-text\">tickets</code>의 길이가 동일하다면 누적된 경로를 <code class=\"language-text\">answers</code>에 넣고 종료</li>\n<li><code class=\"language-text\">tickets</code>를 순회하여 해당 함수를 재귀시켜줌</li>\n<li>현재 출발지와 해당 항공권의 도착지가 다르다면 <code class=\"language-text\">continue</code></li>\n<li>이미 사용한 항공권이라면 <code class=\"language-text\">continue</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">answers</code>에 담긴 모든 경로들을 한번 정렬해주고, 가장 빠른 0번쨰 경로를 반환한다.</p>\n<ul>\n<li>배열 내부의 문자열들또한 고려해서 정렬을 해주는것은 처음알았다.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>tickets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> answers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dfs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>depart<span class=\"token punctuation\">,</span> visit<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> tickets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> answers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> tickets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tickets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> depart<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>tickets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>tickets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>visit<span class=\"token punctuation\">,</span> tickets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">,</span> tickets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ICN'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 배열 내에서 값들을 빠른순으로 정렬</span>\n  <span class=\"token keyword\">return</span> answers<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"후기\" style=\"position:relative;\"><a href=\"#%ED%9B%84%EA%B8%B0\" aria-label=\"후기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>후기</h2>\n<ol>\n<li><code class=\"language-text\">bfs</code>, <code class=\"language-text\">dfs</code>자료구조를 해결하는데에는 재귀가 단순하면서도 최고인듯 하다.</li>\n<li><code class=\"language-text\">sort</code>는 생각보다 친절했다.</li>\n</ol>\n<h2 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h2>\n<ul>\n<li><a href=\"https://programmers.co.kr/learn/courses/30/lessons/43164?language=javascript\">프로그래머스 여행경로</a></li>\n</ul>","frontmatter":{"title":"여행경로-DFS/BFS","date":"July 01, 2021"}}},"pageContext":{"slug":"/Study/DataStructure/programmers_18_dfs&bfs/","previous":{"fields":{"slug":"/Study/DataStructure/programmers_17_dfs&bfs/"},"frontmatter":{"title":"단어변환-DFS/BFS","category":"Study","draft":false,"tag":"Programmers Coding Test"}},"next":{"fields":{"slug":"/Study/Think/react-query/"},"frontmatter":{"title":"⚛ React-Query를 사용하여 효율적인 비동기 처리하기","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}