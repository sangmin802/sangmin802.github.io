{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/DataStructure/programmers_07_full exploration/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"a72557b4-52fc-551a-b985-b529c0c8cd91","excerpt":"소수찾기 Lv2 한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.\n\n각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution…","html":"<h1 id=\"소수찾기-lv2\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%88%98%EC%B0%BE%EA%B8%B0-lv2\" aria-label=\"소수찾기 lv2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소수찾기 Lv2</h1>\n<p>한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.\n<br>\n각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.</p>\n<h2 id=\"해결과정\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EA%B3%BC%EC%A0%95\" aria-label=\"해결과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결과정</h2>\n<p>처음에는 주어진 숫자에서 가장 작은수와, 가장 큰수를 구해서 그 사이의 소수중에서 찾으려고했다.</p>\n<ol>\n<li>작은수와 큰수사이를 순회하면서, 소수인숫자들만 배열에 담음</li>\n<li>배열을 순회하면서, 해당 숫자들을 정렬한것과, 주어진 숫자를 정렬한것이 동일하면 카운트 증가</li>\n</ol>\n<p>소수를 찾는것은 크게 어려움이 없었던 것이, 소수인지 알고자 하는 숫자가 변수로 들어오면, 변수를 2 이상 변수 이하의 숫자로 나누었을 때 나머지가 없으면 소수가 아님을 정의해주었다.</p>\n<p>이런 식으로 하려했는데, 당연히 주어지는 숫자의 길이가 길어질수록 for문의 특성상 O(n)의 시간복잡도를 가지고 있어 어마어마하게 오랜시간이 걸리게 되어 <code class=\"language-text\">시간초과</code>가 발생하더라.</p>\n<p>결국 프로그래머스 카테고리의 <strong>완전탐색</strong> 말 그대로, 주어진 숫자들을 조합하여 만들수 있는 모든 수 만 생각해야했다.</p>\n<h2 id=\"재귀함수\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98\" aria-label=\"재귀함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재귀함수</h2>\n<p>정말 너무 너무.. 고민했다 고작 Lv2인데.. 역시 아직 나는 많이부족한가보다.</p>\n<p>재귀함수란것이 늘.. 한번에 떠오르진 않더라.</p>\n<p>고민 끝에 키포인트는 하나였다. 만약, <code class=\"language-text\">[1,2,3]</code>이라는 배열(당연히<code class=\"language-text\">123</code> 변수를 푼)을 통해 만들수 있는 숫자를 생각해보았을 때,</p>\n<ol>\n<li>\n<p>첫 숫자가 담김</p>\n<blockquote>\n<p><code class=\"language-text\">1</code> ,<code class=\"language-text\">2</code>, <code class=\"language-text\">3</code></p>\n</blockquote>\n</li>\n<li>\n<p>첫 숫자를 제외한 나머지 숫자들의 배열과 첫 숫자를 조합</p>\n<blockquote>\n<p><code class=\"language-text\">1</code>과 <code class=\"language-text\">[2, 3]</code>의 조합, <code class=\"language-text\">2</code>와 <code class=\"language-text\">[1, 3]</code>의 조합, <code class=\"language-text\">3</code>과 <code class=\"language-text\">[1,2]</code>의 조합</p>\n</blockquote>\n</li>\n<li>\n<p>조합되는 값은 보관하여 계속 다음으로 넘겨주고 그 값에 새롭게 더해지는 방식</p>\n<blockquote>\n<p><code class=\"language-text\">12</code>, <code class=\"language-text\">13</code>, <code class=\"language-text\">21</code> <code class=\"language-text\">23</code> …</p>\n</blockquote>\n</li>\n</ol>\n<p>위의 과정을 재귀함수로 하여 더이상 나머지 숫자들의 배열이 존재하지 않을때까지 숫자를 생성하는 방식이다. 그러면서, 소수인지 파악하고 중복값을 제거할 수 있는 <code class=\"language-text\">Set</code>을 사용하였다.</p>\n<p>코드를 짜던중, 처음에는 뒤집어지는 값은 생성되지 않을것 같다는 생각을 잠깐 했었는데, 다시생각해보니 처음에 배열 내 모든 숫자를 기준으로 생성하기 때문에, 상관없을것 같다는 확신이 들었다.</p>\n<blockquote>\n<p><code class=\"language-text\">13</code> 의 반대 <code class=\"language-text\">31</code>을 생각할 필요가 없는것이, 처음에 <code class=\"language-text\">3</code>을 기준으로 시작한 재귀함수도 작동되어서 <code class=\"language-text\">3</code>을 제외한 모든 숫자들을 다음에 차곡차곡 쌓음</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> sosu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">find</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        bool <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token punctuation\">}</span>\n      bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> bool\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> newStr <span class=\"token operator\">=</span> str <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      newArr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>newStr <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> sosu<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>newStr <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">,</span> newStr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> sosu<span class=\"token punctuation\">.</span>size\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h2>\n<ul>\n<li><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42839\">프로그래머스 소수찾기</a></li>\n</ul>","frontmatter":{"title":"소수찾기-Exploration","date":"January 27, 2021"}}},"pageContext":{"slug":"/Study/DataStructure/programmers_07_full exploration/","previous":{"fields":{"slug":"/Study/DataStructure/programmers_06_full exploration/"},"frontmatter":{"title":"모의고사-Exploration","category":"Study","draft":false,"tag":"Programmers Coding Test"}},"next":{"fields":{"slug":"/Study/Framework/next.js route/"},"frontmatter":{"title":"Next.js Route","category":"Study","draft":false,"tag":"Framework"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}