{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/DataStructure/programmers_11_stack&que/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"cb1bbbc9-0633-54ba-a2c1-851760408b33","excerpt":"다리를 지나는 트럭 Lv…","html":"<h1 id=\"다리를-지나는-트럭-lv2\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A6%AC%EB%A5%BC-%EC%A7%80%EB%82%98%EB%8A%94-%ED%8A%B8%EB%9F%AD-lv2\" aria-label=\"다리를 지나는 트럭 lv2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다리를 지나는 트럭 Lv2</h1>\n<p>트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 다리에는 트럭이 최대 <code class=\"language-text\">bridge_length</code>대 올라갈 수 있으며, 다리는 <code class=\"language-text\">weight</code> 이하까지의 무게를 견딜 수 있습니다. 단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.</p>\n<p><code class=\"language-text\">solution</code> 함수의 매개변수로 다리에 올라갈 수 있는 트럭 수 <code class=\"language-text\">bridge_length</code>, 다리가 견딜 수 있는 무게 <code class=\"language-text\">weight</code>, 트럭 별 무게 <code class=\"language-text\">truck_weights</code>가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 <code class=\"language-text\">return</code> 하도록 <code class=\"language-text\">solution</code> 함수를 완성하세요.</p>\n<h2 id=\"제한사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한사항</h2>\n<ul>\n<li><code class=\"language-text\">bridge_length</code>는 1 이상 10,000 이하입니다.</li>\n<li><code class=\"language-text\">weight</code>는 1 이상 10,000 이하입니다.</li>\n<li><code class=\"language-text\">truck_weights</code>의 길이는 1 이상 10,000 이하입니다.</li>\n<li>모든 트럭의 무게는 1 이상 <code class=\"language-text\">weight</code> 이하입니다.</li>\n</ul>\n<h3 id=\"해결-방안\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88\" aria-label=\"해결 방안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방안</h3>\n<ul>\n<li>길이에 맞는 다리를 생성함</li>\n<li>대기 트럭이 있다면, 다리 위에는 항상 트럭이 존재함</li>\n<li>다리위의 트럭이 없을때까지 시간을 잼</li>\n<li>\n<p>다리 위에 트럭이 더 올라설 수 있을 경우</p>\n<ul>\n<li>맨 앞의 값을 빼고 뒤에 다음 트럭을 추가함</li>\n</ul>\n</li>\n<li>\n<p>다리 위에 트럭이 더 올라설 수 없을 경우</p>\n<ul>\n<li>맨 앞의 값을 빼고 뒤에 0을 추가함</li>\n</ul>\n</li>\n<li>맨 앞의 트럭을 뺄 때, 0이 아니라면 다리의 총 무게에서 해당 무게를 뺌</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bridge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span>bridge_length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> trucks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>truck_weights<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> bridgeWeight <span class=\"token operator\">=</span> trucks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  bridge<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>trucks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  trucks<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 다리 위 무게가 0이되면 종료</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bridgeWeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> outSomething <span class=\"token operator\">=</span> bridge<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token operator\">++</span>\n    <span class=\"token comment\">// 1초가 지나고 한칸 전진하여 맨 앞의 값을 뺌</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>outSomething <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> bridgeWeight <span class=\"token operator\">-=</span> outSomething\n\n    <span class=\"token comment\">// 맨 앞의 값이 빠져서 새로운 값이 들어오게됨</span>\n    <span class=\"token comment\">// 트럭이 더 들어올 수 있는지, 없는지</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bridgeWeight <span class=\"token operator\">+</span> trucks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      bridgeWeight <span class=\"token operator\">+=</span> trucks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      bridge<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>trucks<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      bridge<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> time\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"아쉬움\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%89%AC%EC%9B%80\" aria-label=\"아쉬움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아쉬움</h2>\n<p>위의 해결방안을 보았을 때 조금 아쉬운점이 있다. 좋은 성능을 위해서 알고리즘을 짜는것인데, 크기가 얼마나 되든 다리의 길이를 실제로 구현하여 메모리를 소비하고, 그만큼의 시간이 더 흐른다는 점이다.</p>\n<p>시간복잡도와 공간복잡도 측면에서 모두 아쉬움이 있는 해결방법이였다..</p>\n<p>본래 이 해결방법은 차선으로 생각했던 문제였고, 처음에 생각했던 방식이 잘 풀리지 않아 일단 해결먼저 하였다.</p>\n<h2 id=\"처음의-생각\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EC%9D%8C%EC%9D%98-%EC%83%9D%EA%B0%81\" aria-label=\"처음의 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처음의 생각</h2>\n<p>처음의 생각에서 키포인트는</p>\n<ol>\n<li>다리 위의 무게가 여유가 있어서 트럭이 더 들어올 수 있는경우</li>\n<li>다리 위의 무게에 여유가 없어서 맨 앞의 트럭이 빠져야 가능한 경우</li>\n</ol>\n<p>즉, 무게가 꽉 찼을 때 새로운 트럭이 들어올 수 있는 조건에는 앞의 트럭이 빠져야만 하므로 다리의 길이가 어쨌든 나가는 시간만 계산하면 된다고 생각했다.</p>\n<blockquote>\n<p>그런데 쉽지 않네..</p>\n</blockquote>\n<h2 id=\"더-좋은-해결\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EC%A2%8B%EC%9D%80-%ED%95%B4%EA%B2%B0\" aria-label=\"더 좋은 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 좋은 해결</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> trucks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>truck_weights<span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 트럭의 무게, 다리에서 나가는 시간</span>\n  <span class=\"token keyword\">const</span> bridge <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>trucks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bridge_length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> bridgeWeight <span class=\"token operator\">=</span> trucks<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> trucks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 시간이 흐름</span>\n    time<span class=\"token operator\">++</span>\n    <span class=\"token comment\">// 만약 맨 앞의 트럭이 나가는 시간이 현재 시간과 동일하다면 해당 트럭 내보냄</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> time<span class=\"token punctuation\">)</span> bridgeWeight <span class=\"token operator\">-=</span> bridge<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// 새로운 트럭이 추가될 수 있다면</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bridgeWeight <span class=\"token operator\">+</span> trucks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      bridgeWeight <span class=\"token operator\">+=</span> trucks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// 해당 트럭이 다리에서 나가는 시간은 현재 시간 + 다리 길이</span>\n      bridge<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>trucks<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bridge_length <span class=\"token operator\">+</span> time<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 새로운 트럭이 추가될 수 없다면</span>\n      <span class=\"token comment\">//      - 더 이상 트럭이 없을 때</span>\n      <span class=\"token comment\">//      - 무게때문에 들어갈 수 없을 때</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 가고있는 트럭이 있다면 강제로 트럭 내보내고 현재 시간을 그 트럭이 나간시간과 동일하게 변경</span>\n      <span class=\"token comment\">// 단, 문제의 조건 상 무게에 문제가 없다면 트럭이 나감과 동시에 들어와야 하므로 loop의 시작에서 추가되는 1초가 존재하지 않기 때문에 미리 -1초를 해줌</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> time <span class=\"token operator\">=</span> bridge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> time\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 방법을 통해, 확실히 길이가 긴 상황에 있어서는 몇 배 이상의 시간차가 났다.</p>\n<h2 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h2>\n<ul>\n<li><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42583?language=javascript#\">프로그래머스 다리를 지나는 트럭</a></li>\n</ul>","frontmatter":{"title":"알고리즘-Stack&Que","date":"June 25, 2021"}}},"pageContext":{"slug":"/Study/DataStructure/programmers_11_stack&que/","previous":{"fields":{"slug":"/Study/DataStructure/programmers_10_stack&que/"},"frontmatter":{"title":"알고리즘-Stack&Que","category":"Study","draft":false,"tag":"Programmers Coding Test"}},"next":null}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}