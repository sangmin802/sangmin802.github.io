{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/DataStructure/dataStructures_04/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"6d0bd432-bb7f-560e-a5c0-fdcfcdad9b00","excerpt":"Stack 스택 이전에 봤던 와 유사하게 선형자료구조라고 한다. 다만, 둘의 차이로는 데이터 출력의 방식이다. 가 라면, 은 으로 나중에 입력된 데이터가 먼저 출력된다. 실행컨텍스트에서의 스택 컨텍스트를 공부하면서, 함수들이 실행 될 때,(선언말고) 이 쌓이게 되고, 내부함수가 실행되면 내부함수가 먼저 종료된다고 나와있었다. 배열의 Pop과 Push 자바스크립트에서는 배열의 입력 와 마지막 인자 출력인 을 사용하면 쉽게 구현이 가능하다. 두가지 메소드 모두, 마지막 인자만 활용하기 때문에 O(n…","html":"<h1 id=\"stack-스택\" style=\"position:relative;\"><a href=\"#stack-%EC%8A%A4%ED%83%9D\" aria-label=\"stack 스택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stack 스택</h1>\n<ul>\n<li>이전에 봤던 <code class=\"language-text\">Queue</code>와 유사하게 선형자료구조라고 한다. 다만, 둘의 차이로는 데이터 출력의 방식이다.</li>\n<li><code class=\"language-text\">Queue</code>가 <code class=\"language-text\">FIFO (First In First Out)</code>라면, <code class=\"language-text\">Stack</code>은 <code class=\"language-text\">LIFO (Last In First Out)</code>으로 나중에 입력된 데이터가 먼저 출력된다.</li>\n</ul>\n<h2 id=\"실행컨텍스트에서의-스택\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%EC%8A%A4%ED%83%9D\" aria-label=\"실행컨텍스트에서의 스택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행컨텍스트에서의 스택</h2>\n<ul>\n<li>컨텍스트를 공부하면서, 함수들이 실행 될 때,(선언말고) <code class=\"language-text\">스택</code>이 쌓이게 되고, 내부함수가 실행되면 내부함수가 먼저 종료된다고 나와있었다.</li>\n</ul>\n<h2 id=\"배열의-pop과-push\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-pop%EA%B3%BC-push\" aria-label=\"배열의 pop과 push permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열의 Pop과 Push</h2>\n<ul>\n<li>자바스크립트에서는 배열의 입력 <code class=\"language-text\">push</code>와 마지막 인자 출력인 <code class=\"language-text\">pop</code>을 사용하면 쉽게 구현이 가능하다.</li>\n<li>두가지 메소드 모두, 마지막 인자만 활용하기 때문에 O(n)의 시간복잡도를 가지고있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"자료구조 Data Structures Stack","date":"November 12, 2020"}}},"pageContext":{"slug":"/Study/DataStructure/dataStructures_04/","previous":{"fields":{"slug":"/Study/DataStructure/dataStructures_03/"},"frontmatter":{"title":"자료구조 Data Structures Queue","category":"Study","draft":false,"tag":"Data Structures"}},"next":{"fields":{"slug":"/Study/Think/git/"},"frontmatter":{"title":"오리지널 깃","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}