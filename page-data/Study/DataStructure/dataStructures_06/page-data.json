{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/DataStructure/dataStructures_06/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"f2378c2c-cf5b-5266-a59e-89ed2924489f","excerpt":"Tree 트리 단순히 나무를 뒤집어놓은것처럼 생겨서 트리이다. DOM에서 태그를 조회하였을 때, 자식노드들이 쭈르륵 있는것을 생각하면 편할듯 용어 Root : 첫 시작이 되는 노드 Leaf : 마지막노드 Branch || Edge : 노드와 노드를 이어주는 것 그래프도 Edge로 이어져있었다. Height : 시작이 되는 노드에서 끝이되는 노드 사이의 Edge 갯수 이진트리(Binary Tree) : 자식노드를 최대 2개까지만 가질수 있는 트리 완전한이진트리(Full Binary Tree…","html":"<h1 id=\"tree-트리\" style=\"position:relative;\"><a href=\"#tree-%ED%8A%B8%EB%A6%AC\" aria-label=\"tree 트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tree 트리</h1>\n<ul>\n<li>\n<p>단순히 나무를 뒤집어놓은것처럼 생겨서 트리이다.</p>\n<blockquote>\n<p>DOM에서 태그를 조회하였을 때, 자식노드들이 쭈르륵 있는것을 생각하면 편할듯</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"용어\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4\" aria-label=\"용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어</h2>\n<ul>\n<li>Root : 첫 시작이 되는 노드</li>\n<li>Leaf : 마지막노드</li>\n<li>\n<p>Branch || Edge : 노드와 노드를 이어주는 것</p>\n<blockquote>\n<p>그래프도 Edge로 이어져있었다.</p>\n</blockquote>\n</li>\n<li>Height : 시작이 되는 노드에서 끝이되는 노드 사이의 Edge 갯수</li>\n<li>이진트리(Binary Tree) : 자식노드를 최대 2개까지만 가질수 있는 트리</li>\n<li>완전한이진트리(Full Binary Tree) : Leaf들을 제외한 모든 노드가 2개의 자식노드를 가지고있고, 모든 Leaf들이 값을 가지고 있는 트리</li>\n<li>이진탐색트리(Binary Search Tree, 이진검색트리) : 현재 노드의 오른쪽에있는 노드는 반드시 현재노드보다 큰 값이며, 왼쪽은 작은 값이다.</li>\n</ul>\n<h2 id=\"자바스크립트로-트리-구현하기\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"자바스크립트로 트리 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트로 트리 구현하기</h2>\n<ul>\n<li>\n<p>이번에 재귀함수가 더 익숙해진 느낌이다</p>\n<blockquote>\n<p>탈출구가 필요함(최종값의 결과물이나, 메소드가 한번 실행되었을 때 결과물을 반환)\n자식?느낌의 값이 기준이되도록 자식자신과 비교값등등을 인자로 재귀함수 진행</p>\n</blockquote>\n</li>\n<li>삽입은 큰 어려움 없으니 패스</li>\n<li>삭제하려는 노드의 자식노드가 둘다 없을 때 -> 그냥 지우면된다.</li>\n<li>삭제하려는 노드의 왼쪽자식이나 오른쪽자식만 있을 때 -> 그 자식을 끌어올려준다.</li>\n</ul>\n<h3 id=\"삭제하려는-노드의-자식노드가-둘-다-있을-때\" style=\"position:relative;\"><a href=\"#%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4%EB%8A%94-%EB%85%B8%EB%93%9C%EC%9D%98-%EC%9E%90%EC%8B%9D%EB%85%B8%EB%93%9C%EA%B0%80-%EB%91%98-%EB%8B%A4-%EC%9E%88%EC%9D%84-%EB%95%8C\" aria-label=\"삭제하려는 노드의 자식노드가 둘 다 있을 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삭제하려는 노드의 자식노드가 둘 다 있을 때</h3>\n<ol>\n<li>삭제하려는 노드(현재노드라고 하겠음)를 찾고, 해당 노드의 왼쪽자식노드를 기준으로 가장 오른쪽에있는노드를 찾는다.(삭제하려는 노드 다음으로 큰 노드)</li>\n<li>둘의 값을 바꿔준다.</li>\n<li>현재노드의 왼쪽자식노드를 기준으로, 삭제하려는 노드의 값을 찾아 지워주도록 하여(재귀함수를 다시 실행시켜 자동으로 세가지 조건에 맞는 과정을 거치도록 함) 왼쪽자식노드를 새롭게 만들어준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tree</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insertRecursive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRecursive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">insertRecursive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> newNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> newNode<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 왼쪽이나 오른쪽 자식노드가 없다면 그냥 노드 넣기</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> newNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insertRecursive</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새 노드의 값이 더 작다면, 왼쪽노드의 값과 비교해보기위해 재귀함수 전달</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;=</span> newNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insertRecursive</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새 노드의 값이 더 크거나 같다면, 오른쪽노드의 값과 비교해보기위해 재귀함수 전달</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">deleteRecursive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 노드가 없다면 그냥 종료</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 지우려는값보다 현재노드의 값이 더 크다면, 왼쪽노드의 값과 비교하기위해 재귀함수 전달</span>\n      node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRecursive</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 재귀함수 탈출구</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 지우려는값보다 현재노드의 값이 더 작다면, 오른쪽노드의 값과 비교하기위해 재귀함수 전달</span>\n      node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRecursive</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 재귀함수 탈출구</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 지우려는 값과 현재 노드의 값이 동일하여 지우려는 대상일 경우</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 자식이 없을때는 그냥 삭제</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오른쪽자식만 있다면, 오른쪽자식 끌어올리기</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 왼쪽자식만 있다면, 왼쪽자식 끌어올리기</span>\n\n    <span class=\"token comment\">// 둘다 가지고있을 경우</span>\n    <span class=\"token keyword\">let</span> changeTarget <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 노드의 왼쪽자식을 기준으로 가장 오른쪽에있는 Leaf노드를 찾음(현재 노드의 값보단 작은 두번째로 큰 값)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>changeTarget<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> changeTarget <span class=\"token operator\">=</span> changeTarget<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n    node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> changeTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 노드의 값을 찾은 값으로 변경</span>\n    changeTarget<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 찾은 값을 현재노드의 값으로 변경</span>\n    node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRecursive</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 노드의 왼쪽자식을 기준으로 하여 지우려는 값을 삭제하는 재귀함수 진행 후, 새롭게 왼쪽자식트리 생성</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 재귀함수 탈출구</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntree<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"느낌\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%8C\" aria-label=\"느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낌</h2>\n<ul>\n<li>삭제때문에 많이 애먹었다.</li>\n</ul>","frontmatter":{"title":"자료구조 Data Structures Tree","date":"December 04, 2020"}}},"pageContext":{"slug":"/Study/DataStructure/dataStructures_06/","previous":{"fields":{"slug":"/Study/DataStructure/dataStructures_05/"},"frontmatter":{"title":"자료구조 Data Structures Graphs","category":"Study","draft":false,"tag":"Data Structures"}},"next":{"fields":{"slug":"/Study/DataStructure/dataStructures_07/"},"frontmatter":{"title":"자료구조 Data Structures Hash Table","category":"Study","draft":false,"tag":"Data Structures"}}}},"staticQueryHashes":["3128451518","3665928227"]}