{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Next/next.js route/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"ef816f32-777e-5ba1-b24c-1e779feff29e","excerpt":"Next.js는 기존 React.js…","html":"<p>Next.js는 기존 React.js와 다르게, 라우팅이라는 것을 별도의 모듈을 설치할 필요없이 기본적으로 제공한다.</p>\n<p>더욱, 폴더의 구성을 통해 페이지 라우팅을 관리하더라</p>\n<blockquote>\n<p><code class=\"language-text\">pages/users/[name].tsx</code> -> <code class=\"language-text\">/users/sangmin</code>\n<code class=\"language-text\">pages/users/index.tsx</code> -> <code class=\"language-text\">/users</code></p>\n</blockquote>\n<p>위처럼 당연하게도 동적 라우팅을 제공하기도 한다.</p>\n<p>예제를 보던 중 다소 헷갈렸던 부분이 있었기때문에, 내 입맛대로 다시 정리해보려 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getStaticPaths<span class=\"token operator\">:</span> <span class=\"token function-variable function\">GetStaticPaths</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Get the paths we want to pre-render based on users</span>\n  <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> sampleUserData<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// We'll pre-render only these paths at build time.</span>\n  <span class=\"token comment\">// { fallback: false } means other routes should 404.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> paths<span class=\"token punctuation\">,</span> fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This function gets called at build time on server-side.</span>\n<span class=\"token comment\">// It won't be called on client-side, so you can even do</span>\n<span class=\"token comment\">// direct database queries.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getStaticProps<span class=\"token operator\">:</span> <span class=\"token function-variable function\">GetStaticProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> params<span class=\"token operator\">?.</span>id\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> sampleUserData<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// By returning { props: item }, the StaticPropsDetail component</span>\n    <span class=\"token comment\">// will receive `item` as a prop at build time</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> errors<span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">getStaticPaths</code> : 해당 동적라우팅이 생성?할 수 있는 모든 경우의 페이지들을 미리 파악하는것.</li>\n<li><code class=\"language-text\">getStaticProps</code> : 해당 라우팅 페이지를 정적생성하는데, 파일명에 있던 <code class=\"language-text\">[id]</code>를 갖고있는 하나의 데이터를 찾음.</li>\n<li>위의 두 메소드들은 해당 라우트를 <code class=\"language-text\">pre-rendering</code>하기 위함임. 당연히, 두개의 메소드가 존재하지 않아도 <code class=\"language-text\">id</code>변수를 <code class=\"language-text\">import Router from &#39;next/router</code>모듈을 통해 <code class=\"language-text\">query</code>를 확인할 수 있음</li>\n<li>\n<p>3번을 해보면 이상한점이 생길것이다. 새로고침을 했을 경우, 첫 렌더링에 비어있는 <code class=\"language-text\">query</code>객체가 오기때문에 정상적인 페이지 구성이 안될텐데, 알아보니 <code class=\"language-text\">hydrate</code>메소드가 작동되기 전에는 <code class=\"language-text\">query</code> 객체라 비어있는상태라고 한다. <code class=\"language-text\">hydrate</code>이후, <code class=\"language-text\">query</code>에 변수가 담기는것을 확인할 수 있다.</p>\n<blockquote>\n<p>클라이언트가 직접 요청하는 경우, <code class=\"language-text\">pre-rendering</code>이 필요하지 않은경우가 대부분이기때문에 아래의 1, 2번이 적합할 듯 함.</p>\n</blockquote>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 해결방법</span>\n<span class=\"token comment\">// 1. </span>\nRouter<span class=\"token punctuation\">.</span>router<span class=\"token operator\">?.</span>query<span class=\"token punctuation\">.</span>id\n\n<span class=\"token comment\">// 2.</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 위의 두 방법은 클라이언트사이드렌더링이기 때문에, network를 확인해보면 서버에서 받아오는 페이지가 아님</span>\n\n<span class=\"token comment\">// 3. 정적생성이 아닌, 서버측 구성을 통해 서버에서 query를 파악하여 클라이언트에게 넘겨주도록 함.</span>\n<span class=\"token comment\">//  3번은 해당 메소드 사용으로 서버사이드렌더링을 하게되기 때문에 network를 확인해보면 서버에서 받아오는 페이지임</span>\n<span class=\"token comment\">//  따라서 서버에서 알고있는 path가 아니면 404를 반환함. 당연하게도</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getServerSideProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>params<span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"5\">\n<li><code class=\"language-text\">fallback : false</code> : 없는 값은 404페이지를 반환시킴.</li>\n<li><code class=\"language-text\">fallback : true</code> : 정적 생성을 하고자 하는 데이터가 너무 많은 경우(제품 판매 사이트 등) 초기 빌드시간이 오래걸린다. 따라서, 일부분의 데이터만 정적생성을 하고 이후 사용자가 정적생성을 하지 못한 데이터를 요청할 때, 커스텀 로딩화면을 보게되고, <code class=\"language-text\">getStaticProps</code>메소드가 실행된다고 함.</li>\n</ol>\n<h2 id=\"느낌\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%8C\" aria-label=\"느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낌</h2>\n<p>직접 사용해보며 여러 상황을 겪어봐야 좀 더 정확하게 알 수 있을것 같음</p>","frontmatter":{"title":"Next.js Route","date":"January 28, 2021"}}},"pageContext":{"slug":"/Study/Next/next.js route/","previous":{"fields":{"slug":"/Study/DataStructure/programmers_07_full exploration/"},"frontmatter":{"title":"프로그래머스-소수찾기","category":"Study","draft":false,"tag":"Programmers Coding Test"}},"next":{"fields":{"slug":"/Study/Next/next.js webpack/"},"frontmatter":{"title":"Next.js Webpack","category":"Study","draft":false,"tag":"Next.js"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}