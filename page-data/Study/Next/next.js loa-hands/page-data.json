{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Next/next.js loa-hands/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"05f91b55-5956-52f8-a9f9-c7293f255fee","excerpt":"…","html":"<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/03/1.PNG?raw=true\" alt=\"1\">\n</div>\n<p>완료하였다.</p>\n<p>이전까지는, <code class=\"language-text\">gh-pages</code>를 애용했지만 <code class=\"language-text\">Next.js</code>는 <code class=\"language-text\">Vercel</code>이 더 적합하다고 하여, 처음 사용해보았는데 <code class=\"language-text\">package.json</code>에 <code class=\"language-text\">Vercel</code>전용 명령어를 입력한다면, 해당 깃 리포지토리에 추가될때마다 자동으로 빌드되는것이 참 편한것 같다.</p>\n<p>당연히 이전에도 발생했던 문제인 새로고침시 <code class=\"language-text\">404</code>는 이전에 해결했던 방법을 토대로 <code class=\"language-text\">Next.js</code>에 맞게 살 짝 수정하여 해결하였다. 애초에, <code class=\"language-text\">UserInfo</code>는 클라이언트사이드 라우팅을 사용하려했기때문에, 이 방법 밖에 없는듯..?</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 404.tsx</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Custom404</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> l <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pathSegmentsToKeep <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  l<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>protocol <span class=\"token operator\">+</span> <span class=\"token string\">'//'</span> <span class=\"token operator\">+</span> l<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>port <span class=\"token operator\">?</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> l<span class=\"token punctuation\">.</span>port <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n  l<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> pathSegmentsToKeep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/?/'</span> <span class=\"token operator\">+</span>\n  l<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>pathSegmentsToKeep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&amp;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'~and~'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n  <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>search <span class=\"token operator\">?</span> <span class=\"token string\">'&amp;'</span> <span class=\"token operator\">+</span> l<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&amp;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'~and~'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n  l<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span>\n\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token number\">404</span>입니다<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Custom404<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.tsx</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span>\n  router<span class=\"token punctuation\">.</span>asPath <span class=\"token operator\">!==</span> <span class=\"token string\">'/'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> decoded <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">~and~</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>decoded <span class=\"token operator\">+</span> l<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 일부분 수정하는 과정에서 여러개의 컴포넌트가 동시에 렌더링되며 발생한 에러가 있었는데</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">getUserData_Thunk</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">loadingToggle</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> userData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이와 같은 방법으로 해결해주었다. 그냥 렌더링 자체에 순위를 주면 되었던 것..</p>\n<p><code class=\"language-text\">Next.js</code>는 필요에 따라 검색엔진에 노출시키고자 하는 페이지만 <code class=\"language-text\">SSR</code>방식을 사용하고 나머지는 기존 <code class=\"language-text\">CSR</code>방식을 유지시킬 수 있다는점이 참 매력적인것 같다.</p>\n<blockquote>\n<p>앞으로 <code class=\"language-text\">React.js</code>만 사용하여 개발하는 일은 줄어들 듯..?</p>\n</blockquote>\n<blockquote>\n<p>아 그리고, <code class=\"language-text\">Next.js</code>를 하면서, 왜 <code class=\"language-text\">React.js</code>는 프레임워크이지만 라이브러리이기도 하다고 하는지 느낀것 같다.</p>\n</blockquote>","frontmatter":{"title":"Next.js Loa-Hands","date":"February 03, 2021"}}},"pageContext":{"slug":"/Study/Next/next.js loa-hands/","previous":{"fields":{"slug":"/Study/Next/next.js webpack/"},"frontmatter":{"title":"Next.js Webpack","category":"Study","draft":false,"tag":"Next.js"}},"next":{"fields":{"slug":"/Diary/gatsby/"},"frontmatter":{"title":"블로그 이사다!","category":"Diary","draft":false,"tag":null}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}