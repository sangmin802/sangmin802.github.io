{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/component composition/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"16c5fb75-e075-5623-b3e1-2ed39b206fc4","excerpt":"…","html":"<p><code class=\"language-text\">React</code>, <code class=\"language-text\">Vue</code> 등 최신의 <code class=\"language-text\">Javascript FrameWork</code> 들은 대부분 컴포넌트 기반으로 설계되고 있다.</p>\n<p>이러한 컴포넌트들은 외부의 영향을 받지않아서 재활용성이 뛰어난 특징을 갖고있어야 좋은 컴포넌트라 할 수 있다.</p>\n<p>또한, 속성만을 갖는 컴포넌트더라도 필수적인 속성들이 아닌, 내부에서 별다른 로직들을 한번 더 수행해야 해서 잡다한 속성들이 전달되는 컴포넌트라면 재활용은 할 수 있겠지만, 자유로운 컴포넌트라 보기는 어려운 것 같다.</p>\n<p>이러한 컴포넌트의 순수함, 자유로움, 재활용성을 위해 <code class=\"language-text\">React</code> 에서는 아예 대놓고 컴포넌트 <code class=\"language-text\">조합·합성</code>을 사용하는것이 좋은 방법이라 설명하고 있다.</p>\n<h3 id=\"component-조합·합성\" style=\"position:relative;\"><a href=\"#component-%EC%A1%B0%ED%95%A9%C2%B7%ED%95%A9%EC%84%B1\" aria-label=\"component 조합·합성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component 조합·합성</h3>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/04/26/1.PNG?raw=true\" alt=\"git1\">\n</div>\n<p>본래 왼족처럼 하나의 컴포넌트가 있고, 내부에서 또 다른 컴포넌트로 무수히 많은 속성들이 전달되는 컴포넌트였다.</p>\n<p>하지만, 오른족처럼 다른 작은 컴포넌트들을 모무 <code class=\"language-text\">children</code> 속성으로 보내주는 <code class=\"language-text\">조합·합성</code> 방식으로 변경하였다.</p>\n<p>이렇게 눈으로만 보면, 오히려 더 복잡해지고 부피가 커진것처럼 보인다.</p>\n<p>하지만, 이런 방식을 사용한다면</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>CharacteristicWrap data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>basic<span class=\"token punctuation\">,</span> battle<span class=\"token punctuation\">,</span> engrave<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>이와 같은 최 하위 컴포넌트에 필요한 데이터를 여러번 속성전달을 거칠 필요 없이, 최상위 컴포넌트에서 바로 지정해줄 수 있다.</p>\n<p>즉, 각각의 작은 컴포넌트들이 불필요한 속성을 가질 필요 없이, 필수적인 속성만 받을 수 있다는 점이다.</p>\n<h3 id=\"reactchildren\" style=\"position:relative;\"><a href=\"#reactchildren\" aria-label=\"reactchildren permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React.Children</h3>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/04/26/4.PNG?raw=true\" alt=\"git4\">\n</div>\n<p><code class=\"language-text\">조합·합성</code> 방식으로 변경한 컴포넌트이다. 이전이였다면 색 선으로 구분된 대로 각각의 컴포넌트가 존재하여 <code class=\"language-text\">map</code> 순회를 통해 부여된 <code class=\"language-text\">index</code>로 <code class=\"language-text\">isShow</code>기능을 구현했었다. 하지만, 해당 방식으로 변경되면서 동적인 <code class=\"language-text\">index</code>를 사용할 수 없게 되었다.</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/04/26/2.PNG?raw=true\" alt=\"git2\">\n</div>\n<p>이런 경우, <code class=\"language-text\">Children</code> 인터페이스 내부에 있는 <code class=\"language-text\">map</code> 메소드로 <code class=\"language-text\">children</code> 속성의 최상위 자식들에 한해서 <code class=\"language-text\">map</code> 메소드를 수행할 수 있다. 따라서, 동적인 <code class=\"language-text\">index</code> 속성을 통한 구현도 가능해진다.</p>\n<blockquote>\n<p>하나의 기존 컴포넌트에 속성을 추가하는 경우 이후 소개되는 <code class=\"language-text\">React.cloneElement</code>가 더 적절해 보인다.</p>\n</blockquote>\n<h3 id=\"reactcloneelement\" style=\"position:relative;\"><a href=\"#reactcloneelement\" aria-label=\"reactcloneelement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React.cloneElement</h3>\n<p><code class=\"language-text\">Vue</code>의 <code class=\"language-text\">isShow</code> 처럼 따라 다른 스타일을 적용시키는 상황이 필요해서 <code class=\"language-text\">index</code>와 같은 동적인 속성을 사용해야하는 경우가 있다.</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/04/26/3.PNG?raw=true\" alt=\"git3\">\n</div>\n<p>위의 예시처럼 다른 속성들이 부여된 상태로 생성된 컴포넌트에 추가적인 속성을 합쳐서 새로운 컴포넌트로 만드는 메소드가 존재하니 필요에 따라 잘 사용하면 될 것 같다.</p>\n<h3 id=\"고민\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EB%AF%BC\" aria-label=\"고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고민</h3>\n<p><code class=\"language-text\">조합·합성</code> 형식의 컴포넌트 구조를 통해, 각각의 하위 컴포넌트들은 좀 더 자유로운 상태가 되었지만, 최상위 컴포넌트의 경우 각각의 로직수행과 <code class=\"language-text\">조합·합성</code> 으로 짜여져 부피가 매우 커지게된다.</p>\n<p>요즘 이런 문제에 대한 고민을 하고 있다..</p>","frontmatter":{"title":"Component Composition","date":"April 26, 2021"}}},"pageContext":{"slug":"/Study/Think/component composition/","previous":{"fields":{"slug":"/Study/Think/abortController/"},"frontmatter":{"title":"AbortController","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/css-in-css & css-in-js/"},"frontmatter":{"title":"CSS-in-CSS, CSS-in-JS","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}