{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/browser-construction/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"utterances":"sangmin802/sangmin802.github.io"}}},"markdownRemark":{"id":"cb614bc4-9494-5cb6-8069-7ee8385f97cf","excerpt":"Construction 가져온 , 를 하고 합쳐진 하나의 를 생성하는것이 단계 이다. HTML parsing…","html":"<h2 id=\"construction\" style=\"position:relative;\"><a href=\"#construction\" aria-label=\"construction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Construction</h2>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/07/27/construction1.PNG\" alt=\"1\">\n</div>\n<p>가져온 <code class=\"language-text\">HTML</code>, <code class=\"language-text\">CSS</code>를 <code class=\"language-text\">parsing</code>하고 합쳐진 하나의 <code class=\"language-text\">Tree</code>를 생성하는것이 <code class=\"language-text\">constuction</code>단계 이다.</p>\n<h3 id=\"html-parsing\" style=\"position:relative;\"><a href=\"#html-parsing\" aria-label=\"html parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML parsing</h3>\n<p>처음 서버에서 받아오는 <code class=\"language-text\">HTML</code>은 마크업 언어로서 <code class=\"language-text\">Javascript</code>가 각각의 <code class=\"language-text\">HTML</code>태그에 접근할 수 있도록 <code class=\"language-text\">DOM Tree</code>로 파싱해줄 필요가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"example.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"example.jpg\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<p>위와 같은 마크업을</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/07/27/construction2.PNG\" alt=\"2\">\n</div>\n<p><code class=\"language-text\">DOM Tree</code>로 파싱을 해주어야 한다.</p>\n<p><code class=\"language-text\">DOM</code>이란, <code class=\"language-text\">Document Object Model</code>로 <code class=\"language-text\">HTML</code>마크업 문서를 <code class=\"language-text\">Javascript</code>가 이용할 수 있는 객체로 만든것이다.</p>\n<blockquote>\n<p>우리가 흔히 <code class=\"language-text\">React Typescript</code>를 사용하여 타입 상속을 해줄 때, 사용하는 <code class=\"language-text\">HTMLDivElement</code>등으로 변환되는 것이다.</p>\n</blockquote>\n<p>그리고, 태그를 포함한 텍스트등의 모든 속성들을 <code class=\"language-text\">Javascript</code>가 읽을수 있는 <code class=\"language-text\">node</code>로 하여 상위부터 하위로 뿌리처럼 내려가는 구조를 <code class=\"language-text\">DOM Tree</code>라고 한다.</p>\n<p><code class=\"language-text\">HTML</code> 마크업을 <code class=\"language-text\">DOM Tree</code>로 변환하는것이기 때문에, 결과를 보면 <code class=\"language-text\">1:1</code>의 매칭 관계를 맺는다고 한다.</p>\n<p>하지만 여기서 생성된 <code class=\"language-text\">DOM</code>은 <code class=\"language-text\">Javascript</code>기반이 아니다. 오로지 웹페이지를 효율적으로 렌더링하고 개발자가 여러 목적으로 <code class=\"language-text\">DOM</code>의 각 요소들을 동적으로 조작할 수 있도록 브라우저에서 제공하는 <code class=\"language-text\">Web API</code>이다.</p>\n<blockquote>\n<p><code class=\"language-text\">Javascript</code>의 작동원리를 생각할 때, <code class=\"language-text\">setTimeout</code>과 같은 비동기작업들이 실행되는 <code class=\"language-text\">Web API</code>가 브라우저에서 제공하는 <code class=\"language-text\">API</code>이다. 따라서, 메인스레드가 아닌 다른 스레드에서 작업이 실행되고, 완료된 후의 콜백함수를 다시 <code class=\"language-text\">Javascript</code>의 <code class=\"language-text\">Task Que</code>에 전달하는것</p>\n</blockquote>\n<p><code class=\"language-text\">Web API</code>는 <code class=\"language-text\">Javascript API</code>와 함께 사용되지만, 항상 그렇지는 않으며, 절대로 동일한것도 아니다.</p>\n<h3 id=\"css-parsing\" style=\"position:relative;\"><a href=\"#css-parsing\" aria-label=\"css parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS parsing</h3>\n<p><code class=\"language-text\">HTML</code> 마크업을 파싱하면서, <code class=\"language-text\">CSS</code>도 마찬가지로 파싱을 하여 <code class=\"language-text\">CSSOM - CSS Object Model</code>을 구축한다.</p>\n<p><code class=\"language-text\">CSSOM</code>에는 <code class=\"language-text\">HTML</code> 마크업 안에 있는 임베디드 스타일, css파일등 스타일에 있는 <code class=\"language-text\">color</code>나 <code class=\"language-text\">font-size</code>와 같은 디자인적인 속성들을 설정한다.</p>\n<p>사실 사용자의 커스텀한 속성 외에도, 모든 브라우저들은 <code class=\"language-text\">user agent styles</code>이라고 하는 기본 스타일 집합인 <code class=\"language-text\">computed styles</code>가 존재한다.</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/07/27/construction3.PNG\" alt=\"3\">\n</div>\n<p><code class=\"language-text\">CSSOM</code>은 <code class=\"language-text\">cascading</code>이라는 룰을 갖고 있다.</p>\n<ol>\n<li>계단식 스타일\n<blockquote>\n<p>동일한 속성의 스타일이라면 최 하단의 스타일이 적용됨</p>\n</blockquote>\n</li>\n<li><code class=\"language-text\">class</code>, <code class=\"language-text\">id</code>와 같은 선택자에 따라 우선순위가 결정됨</li>\n<li>몇몇 속성에 한정된 상속\n<blockquote>\n<p>부모 태그의 속성에 하위 태그도 영향을 받는 경우들</p>\n</blockquote>\n</li>\n</ol>\n<p>이러한 룰을 갖고 스타일을 세분화, 파싱한다.</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/07/27/construction4.PNG\" alt=\"4\">\n</div>\n<h2 id=\"dom-tree--cssom--render-tree\" style=\"position:relative;\"><a href=\"#dom-tree--cssom--render-tree\" aria-label=\"dom tree  cssom  render tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM Tree + CSSOM = Render Tree</h2>\n<p><code class=\"language-text\">body</code>태그를 <code class=\"language-text\">Render Tree</code>의 루트 오브젝트로 생성한다. 이후, 하위는 나머지 <code class=\"language-text\">DOM Node</code>들로 구성을 한다. 이 때의 <code class=\"language-text\">Render Tree</code>는 <code class=\"language-text\">DOM Tree</code>와 1:1 매칭이 아닌 상태이다.</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/07/27/construction5.PNG\" alt=\"5\">\n</div>\n<p>위의 사진을 통해 <code class=\"language-text\">CSSDOM</code>과 <code class=\"language-text\">DOM</code>이 합쳐졌지만, <code class=\"language-text\">display : none</code>이라는 속성이 존재하는 노드는 <code class=\"language-text\">Render Tree</code>에서 제외됨을 확인할 수 있다.</p>\n<p>해당 속성을 통해 요소는 화면에서 <code class=\"language-text\">0px 0px</code>의 크기를 갖기 때문이다.</p>\n<p>하지만 <code class=\"language-text\">opacity : 0;</code>나 <code class=\"language-text\">visiblity : hidden;</code>은 크기가 아닌 다른 속성으로인해 안보이는것이기 때문에, <code class=\"language-text\">Render Tree</code>에 포함된다.</p>\n<p><code class=\"language-text\">DOM API</code>를 통해 접근이 <code class=\"language-text\">DOM Tree</code>와는 다르게, <code class=\"language-text\">CSSOM</code>에 직접적인 접근은 불가능하지만 <code class=\"language-text\">Render Tree</code>로 서로가 결합한 이후, 브라우저는 <code class=\"language-text\">DOM</code>의 요소들의 <code class=\"language-text\">CSSOM</code>을 노출시켜 접근할 수 있도록 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span>\n<span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>background</code></pre></div>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p><code class=\"language-text\">HTML</code>, <code class=\"language-text\">CSS</code>를 <code class=\"language-text\">Javascript</code>가 이해할 수 있도록 분석하고, 결합하여 화면의 보여질 노드들만을 간추린 <code class=\"language-text\">Render Tree</code>를 생성하였다.</p>\n<p>하지만, 한가지 의문점이 있다.</p>\n<p>만약 <code class=\"language-text\">parsing</code>도중, <code class=\"language-text\">script</code>태그나 <code class=\"language-text\">link</code>로된 스타일시트 혹은 스크립트 파일을 만나게되면 어떠한 일이 일어날까?</p>\n<p>다음 포스트에서 알아보도록 하자</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://development-crow.tistory.com/5\">까마귀의 생각 창고 - 웹 브라우저 동작원리</a></li>\n<li><a href=\"https://blog.logrocket.com/eliminate-content-repaints-with-the-new-layers-panel-in-chrome-e2c306d4d752/\">LogRocket - Eliminate content repaints with the new Layers panel in Chrome</a></li>\n<li><a href=\"https://sangcho.tistory.com/entry/browser-rendering-construction\">consturction</a></li>\n</ul>","frontmatter":{"title":"💻 브라우저 렌더링 - 파싱단계 construction","date":"July 27, 2021"}}},"pageContext":{"slug":"/Study/Think/browser-construction/","previous":{"fields":{"slug":"/Study/Think/browser/"},"frontmatter":{"title":"💻 브라우저 렌더링의 시작","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/browser-parser-blocking/"},"frontmatter":{"title":"💻 브라우저 렌더링 - CRP 멈춰!","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["1162990174","1854831582","2054357557","3128451518"],"slicesMap":{}}