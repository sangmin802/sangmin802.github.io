{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/abstract painting/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"46a14e01-a6b6-5f22-9a93-2f95673a07ec","excerpt":"…","html":"<p><code class=\"language-text\">React</code>를 기반으로 개발을 하다보면, 고민이 되는 부분이 있다.\n컴포넌트 추상화의 수준을 정하는 것.</p>\n<h2 id=\"선언형-컴포넌트로-추상화\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%96%B8%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"선언형 컴포넌트로 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선언형 컴포넌트로 추상화</h2>\n<p><code class=\"language-text\">React</code>에서는 상위 컴포넌트가 하위 컴포넌트에게 속성을 전달하여 오로지 전달받은 속성만을 사용하여 렌더링하는것이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Title title<span class=\"token operator\">=</span><span class=\"token string\">\"타이틀1\"</span> handleTitle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleTitle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>위와 같은 속성전달을 통해 하위 컴포넌트 내부에는 비즈니스 로직을 생성하지 않아 재활용성을 높일 수 있게 된다.</p>\n<p>또한, 해당 컴포넌트에서 사용하게 될 로직이나, 필수적으로 보여질 데이터들만을 속성으로 보내서 다른 역할을 빠르게 알 수 있다.</p>\n<p><code class=\"language-text\">무엇을 하는지</code>만 외부에서 보여지고, <code class=\"language-text\">어떻게 하는지</code>는 컴포넌트 내부에서 처리한다.</p>\n<p>이와같은 방식을 선언적인 코드라고 한다.\n그리고 중요 개념만을 남기고 <code class=\"language-text\">Title</code>이라는 컴포넌트로 추상화 한 것이다.</p>\n<p>추상화 과정에서 하위로 전달되야하는 속성들이 많아서, 컴포넌트의 재활용성이 떨어지는것 같다면 <strong>조합</strong>을 사용할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>Form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>InputText<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span> autoComplete<span class=\"token operator\">=</span><span class=\"token string\">\"off\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>InputText<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>InputSubmit<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>검색<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>InputSubmit<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>Form<span class=\"token operator\">></span></code></pre></div>\n<ol>\n<li>하나의 일 만을 수행하는 컴포넌트를 위해 필요한 속성만을 전달받을 수 있다.</li>\n<li>상위에서 생성된 비즈니스로직들을 하위로 여러번 전달할 필요가 없이 한번에 전달할 수 있다.</li>\n</ol>\n<p>어쩌면, 조합 또한 이 컴포넌트가 <code class=\"language-text\">무엇을 하는지</code>에만 집중하여 추상화 될 수 있도록 도와주는 방법이 아닐까 싶다.</p>\n<h2 id=\"추상화의-수준\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94%EC%9D%98-%EC%88%98%EC%A4%80\" aria-label=\"추상화의 수준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화의 수준</h2>\n<h3 id=\"높은-추상화\" style=\"position:relative;\"><a href=\"#%EB%86%92%EC%9D%80-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"높은 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>높은 추상화</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Title type<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"리스트\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>해당 컴포넌트 내부에서 어떤 작업, 어떤 마크업을 갖고 렌더링하는지는 신경쓰지 않고, <code class=\"language-text\">무엇을 사용할지</code>만 전달하여 역할을 빠르게 알 수 있도록 높은 수준으로 추상화 할 수 있다.</p>\n<h3 id=\"중간-추상화\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EA%B0%84-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"중간 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중간 추상화</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">!</span>data <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleFetchData<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>불러오기<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">React</code>에서 많이보던 조건부 렌더링일 것이다. 이 또한, 높은 추상화와 유사하게 <code class=\"language-text\">무엇을 할 지</code>와 관련된 속성만을 전달하여 렌더링한다.</p>\n<p>하지만, <code class=\"language-text\">data</code>에 따라서 다른 렌더링을 해야 하기 때문에, 추상화된 컴포넌트 외부의 조건 로직도 함께해야한다.</p>\n<blockquote>\n<p>아마 그 때문에 중간 추상화 단계가 아닐까 싶다..</p>\n</blockquote>\n<h3 id=\"낮은-추상화\" style=\"position:relative;\"><a href=\"#%EB%82%AE%EC%9D%80-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"낮은 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>낮은 추상화</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Item data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>res<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>처음 높은 추상화와 비교해보았을 때 정말 큰 차이가 있다. <code class=\"language-text\">무엇을 할 지</code>가 중심이 아닌 <code class=\"language-text\">어떻게 할 지</code>가 중심이된 코드이다.</p>\n<h2 id=\"추상화-수준의-정답\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94-%EC%88%98%EC%A4%80%EC%9D%98-%EC%A0%95%EB%8B%B5\" aria-label=\"추상화 수준의 정답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화 수준의 정답</h2>\n<p>사실 추상화 수준을 정하는 데에 정답은 없다고 한다.</p>\n<p>각각의 조직에서 선택한 수준에 따라가면 될 것 같다.</p>\n<p>하지만, 이러한 상황들이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Container<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Text type<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>리스트<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Item data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>res<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>버튼<span class=\"token operator\">&lt;</span>Button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>data <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>데이터가 없습니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre></div>\n<p>하나의 컴포넌트에 여러 추상화수준이 사용되었을 때.</p>\n<p>실제로 위와 같은 코드들이 프로젝트에 있어서 이번에 모두 수정해보았다.</p>\n<p>대표적인 상황이 두가지가 있었다.</p>\n<h3 id=\"동적으로-생성되는-컴포넌트-추상화\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%83%9D%EC%84%B1%EB%90%98%EB%8A%94-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"동적으로 생성되는 컴포넌트 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적으로 생성되는 컴포넌트 추상화</h3>\n<p><code class=\"language-text\">.map</code>과 같이 동적으로 컴포넌트를 생성할 때 위처럼 높은 추상화 수준인 컴포넌트와 함께 있는 경우에는 구분해주기로 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MapContainer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  dataKey <span class=\"token operator\">=</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PropsWithChildren<span class=\"token operator\">&lt;</span>IMapContainer<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>dataKey<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> i<span class=\"token punctuation\">,</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>컴포넌트의 이름과 전달되는 속성들을 통해 내부에서 <code class=\"language-text\">어떻게 수행될 지</code>가 아닌 <code class=\"language-text\">어떤 일을 하는 지</code> 바로 이해할 수 있도록 추상화하였다.</p>\n<p>동적으로 생성되는 컴포넌트에 실제 데이터들이 전달되야하는 경우가 대부분이기 때문에, <code class=\"language-text\">React.cloneElement</code>를 사용하여 이후에 컴포넌트가 합성되도록 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Container<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Text type<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>리스트<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>MapContainer data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Item <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MapContainer<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>버튼<span class=\"token operator\">&lt;</span>Button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>data <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>데이터가 없습니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre></div>\n<p>위에서의 예시 상황을 수정해보았을 때, 우리는 <code class=\"language-text\">MapContainer</code>는 내부에서는 어떤 일을 하는지 알 필요 없이 <code class=\"language-text\">data</code>를 순회하여 <code class=\"language-text\">Component</code>를 동적으로 생성함을 알 수 있다.</p>\n<h3 id=\"조건부-렌더링-컴포넌트-추상화\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"조건부 렌더링 컴포넌트 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건부 렌더링 컴포넌트 추상화</h3>\n<p>어떠한 속성을 기반으로하여 조건부로 렌더링되는 컴포넌트들이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  dialog <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Dialog dialog<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dialog<span class=\"token punctuation\">}</span> setDialog<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setDialog<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이와 같은 상황일 때, 그냥 <code class=\"language-text\">dialog</code>의 상태를 파악하는 로직을 <code class=\"language-text\">Dialog</code>컴포넌트 내부에 넣어서 처리할 수 있긴 하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dialog<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></code></pre></div>\n<p>컴포넌트 추상화를 통해 어떠한 일을 하는지만 알수 있고 하나의 일만을 수행하는 컴포넌트를 생성하고자 했다.</p>\n<p>현재 수정중인 <code class=\"language-text\">Loa-Hands</code>또한 그러한 특징을 중요하게 생각해 <code class=\"language-text\">React-Query</code>를 사용하여 <code class=\"language-text\">Suspense</code>나 <code class=\"language-text\">ErrorBoundary</code>를 통해 로딩이나 에러와 같은 용도에 조금 엇나가는 기능들은 외부로 뺐었다.</p>\n<p><code class=\"language-text\">Dialog</code>컴포넌트는 오로지 <code class=\"language-text\">Dialog</code>컴포넌트를 생성하는 일만 생각하도록 하기 위해 생성되지 않는 상황은 밖으로 빼는것이 맞다고 생각했다.</p>\n<p>그리고, <code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useEffect</code>와 같은 라이프사이클 훅들은 조건문 이후에는 들어올 수 없어서, 천상 <code class=\"language-text\">render</code>이전에 위와같은 조건문이 들어가야 하는데, 이 때문에 아래와 같은 상황이 많았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dialog<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dialog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dialog<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dialog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dialog<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">render</span> <span class=\"token punctuation\">(</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>나만 그랬나..?</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ConditionalContainer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  isRender<span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PropsWithChildren<span class=\"token operator\">&lt;</span>IConditionalContainer<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isRender<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">return</span> children\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ConditionalContainer</code>는 말 그대로, <code class=\"language-text\">isRender</code>속성에 따라 생성할지 말 지 <strong>대신</strong> 결정해주는 컴포넌트이다.</p>\n<p>전달되는 컴포넌트들은 자신이 생성되지 않는 예외적인 상황을 고려할 필요 없이 생성되는 경우만을 따져서 역할을 수행하면 될 뿐이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Container<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Text type<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>리스트<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>MapContainer data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Item <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MapContainer<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Button handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>버튼<span class=\"token operator\">&lt;</span>Button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>ConditionalContainer isRender<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token operator\">!==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text type<span class=\"token operator\">=</span><span class=\"token string\">\"desc\"</span><span class=\"token operator\">></span>데이터가 없습니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ConditionalContainer<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre></div>\n<p>처음 여러 수준의 추상화가 섞인 컴포넌트를 최종적으로 수정해보았다.</p>\n<p>실제로 <code class=\"language-text\">Loa-Hands</code>에서도 위와 같은 방식으로 추상화 수준을 통일해주었다.</p>\n<p>확실히, 컴포넌트가 각각의 역할만을 수행하도록 확실하게 분리되어, 어떠한 역할을 수행하는지 알 수 있었다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://toss.im/slash-21/sessions/3-3\">Toss 실무에서 바로 쓰는 Frontend Clean Code</a></li>\n</ul>","frontmatter":{"title":"⚛ 선언적인 컴포넌트로 추상화, 그리고 수준의 통일","date":"August 02, 2021"}}},"pageContext":{"slug":"/Study/Think/abstract painting/","previous":{"fields":{"slug":"/Study/CS/browser-operation/"},"frontmatter":{"title":"💻 브라우저 렌더링 - 시각화 단계 operation","category":"Study","draft":false,"tag":"CS"}},"next":{"fields":{"slug":"/Study/Think/abort fetch/"},"frontmatter":{"title":"⚛ React-Query cancel과 Fetch cancel(feat debounce)","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}