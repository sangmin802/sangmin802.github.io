{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/intersectionObserver/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"37b5848e-edcc-5054-b97e-63cdd245f8e6","excerpt":"IntersectionObserver…","html":"<h2 id=\"intersectionobserver\" style=\"position:relative;\"><a href=\"#intersectionobserver\" aria-label=\"intersectionobserver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IntersectionObserver</h2>\n<p>프론트엔드 개발을 해오다보면 사용자의 스크롤에 따라 특정 조건을 감지해야하는 경우들이 정말 많다.</p>\n<ul>\n<li>\n<p>컨텐츠의 최 하위 높이에 도달했을 경우 콜백 실행</p>\n<blockquote>\n<p>대표적으로 <code class=\"language-text\">infinite scroll</code></p>\n</blockquote>\n</li>\n<li>\n<p>특정 높이에 되었을 때, 해당 컨텐츠에 속성 부여</p>\n<blockquote>\n<p><code class=\"language-text\">dataSet</code>에 값을 갖고 있다가 조건이 되는 높이가 되었을 시, <code class=\"language-text\">src</code>속성 부여하는 <code class=\"language-text\">lazy loading</code></p>\n</blockquote>\n</li>\n</ul>\n<p>위와 같은 경우, 대부분 수동으로 높이를 구해서 작업을 하였는데, 스크롤 이벤트 이후 실행되는 콜백메소드의 경우는 <code class=\"language-text\">throttling</code>방식으로 끊어줄 수 있지만, 해당 이벤트 자체는 계속 감지되는지라 불필요한 소요가 존재하기도 했다.</p>\n<p>그러던 중 해당 <code class=\"language-text\">API</code>를 발견하였다.</p>\n<p><code class=\"language-text\">MDN</code>의 말을 내 느낌대로 줄여본다면, <code class=\"language-text\">target</code>이 되는 엘리먼트의 경계를 넘나들 때, 콜백함수가 실행되는것 같다.</p>\n<h2 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// dom</span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"div1 div\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"div2 div\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// script</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    root<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    rootMargin<span class=\"token operator\">:</span> <span class=\"token string\">\"0px 0px 80px 0px\"</span><span class=\"token punctuation\">,</span>\n    threshold<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> io <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 모습을 드러냈으니, 원하는 로직 실행</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">\"활성화\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 모습을 감춘상태</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">\"비활성화\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> els <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  els<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> io<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>해당 생성자에 있어서 첫번째 인자로는 콜백함수, 두번째 인자로는 옵션을 보내줄 수 있다.</p>\n<p>옵션의 속성으로는</p>\n<ol>\n<li><code class=\"language-text\">root</code> : 지정해 주지 않으면 기본값으로, 감지를 할 범위를 의미하는것 같다. 기본값은 <code class=\"language-text\">window</code> 전체인듯 하다.</li>\n<li><code class=\"language-text\">rootMargin</code> : <code class=\"language-text\">css</code>의 <code class=\"language-text\">margin</code>과 같은 구조로, 감지를 하는 <code class=\"language-text\">target</code>요소 + <code class=\"language-text\">margin</code>값에 도달할 때, 콜백함수를 실행시킨다.</li>\n<li><code class=\"language-text\">threshold</code> : 0~1사이의 값으로 보여지는 %를 의미한다고하는데, 사실상 대부분 보여지자마자 실행시키도록 하니깐 0으로 두면 될듯..?</li>\n</ol>\n<p>콜백함수의 첫번째 변수에는 <code class=\"language-text\">target</code>이 하나의 요소든 여러개의 요소든 배열의 구조인것 같다. 따라서, <code class=\"language-text\">forEach</code>와 같은 순회 메소드로 관리하는것이 좋아보인다.</p>\n<p>크게 신경쓸 속성으로는 <code class=\"language-text\">target</code>과, <code class=\"language-text\">intersectionRatio</code>가 있는것같다.</p>\n<ol>\n<li><code class=\"language-text\">target</code> : 해당 <code class=\"language-text\">API</code>에 영향을 받는 요소들</li>\n<li><code class=\"language-text\">intersectionRatio</code> : 해당 요소가 감지?되기위한 기준 으로 0보다 클경우 해당 요소가 조건에 해당되고, 0이면 해당되지 않는다.</li>\n</ol>\n<h2 id=\"예시-infinite-scroll\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-infinite-scroll\" aria-label=\"예시 infinite scroll permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 Infinite scroll</h2>\n<p><code class=\"language-text\">oberver</code> 요소가 <code class=\"language-text\">target</code>이 되고, 해당 요소가 화면에 보일때 새로운 <code class=\"language-text\">div</code>를 추가해주는 방식이다.</p>\n<p><code class=\"language-text\">unobserve</code> 메소드를 통해, 첫번째 인자로 요소를 받으며, 요소에 대한 감지를 제거할 수 있다.</p>\n<p><code class=\"language-text\">disconnect</code> 메소드는 <code class=\"language-text\">unobserve</code>랑 비슷한 것 같은데, 아무런 요소도 받지 않는것 보아 전부를 해제하는 느낌이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// dom</span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"divWrap\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"div1 div\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"observer\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// script</span>\n    <span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      rootMargin<span class=\"token operator\">:</span> <span class=\"token string\">\"0px 0px 0px 0px\"</span><span class=\"token punctuation\">,</span>\n      threshold<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> divWrap <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".divWrap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          divWrap<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div class=\"div</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> div\">&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".observer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// observer.unobserve(target);</span>\n    <span class=\"token comment\">// observer.disconnect();</span></code></pre></div>\n<h3 id=\"주의점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%EC%A0%90\" aria-label=\"주의점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의점</h3>\n<p>감지 중단을 위해 <code class=\"language-text\">unobserve</code>를 사용한 다음, <code class=\"language-text\">observe</code>를 다시 호출해주게 될 경우, 스크롤이 끝에 가있을 때 무한히 호출된다.</p>\n<blockquote>\n<p>당연한것이, <code class=\"language-text\">observe</code>상태일 때 대상이 지정한 비율만큼 보일 때 한번 실행되는데, 대상이 보이는 상태에서 <code class=\"language-text\">unobserve</code>시켰다가 다시 <code class=\"language-text\">observe</code> 하게 되면 실행되었다는 기록이 초기화된 상태이기 때문에 또 한번 실행되게되어 무한반복.</p>\n</blockquote>\n<h2 id=\"느낌\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%8C\" aria-label=\"느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낌</h2>\n<p><code class=\"language-text\">scroll</code>이벤트의 경우 어쩔수없이 꾸준히 발생하고, 이후에 높이를 각각 계산하여야 했었는데, 모든것을 한번에 처리해주니 참 좋은듯 하다.</p>\n<p>사용자가 스크롤을 사용할 때, 모든 스크롤을 감지하고 이벤트를 호출하게 되면서 발생하는 성능문제에 대해 <code class=\"language-text\">throttling</code>을 사용하는것이 권장되었지만, 특정 지점에 도달할 때 만 호출되도록 도와주는점이 큰 매력!</p>\n<blockquote>\n<p>단, 비동기로 서버에 데이터를 요청하는것과는 별개인듯 하여 그 작업에 대해서는 별도의 성능개선작업을 해줘야 할 듯</p>\n</blockquote>","frontmatter":{"title":"IntersectionObserver","date":"March 11, 2021"}}},"pageContext":{"slug":"/Study/Think/intersectionObserver/","previous":{"fields":{"slug":"/Study/Think/coding convention/"},"frontmatter":{"title":"Coding Convention","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Framework/next.js style error/"},"frontmatter":{"title":"Next.js style error","category":"Study","draft":false,"tag":"Framework"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}