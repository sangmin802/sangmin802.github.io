{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/how styled-components work/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"921325f3-7158-5bb9-9592-6fe71be50357","excerpt":"요즈음에는 스타일링 기법에 있어서 방식을 조금 더선호하게 된 것 같다. 무엇보다도 스크립트 환경에 더 친화적이여서 서로간 공유가 원활하게 이뤄질 수 있다는점이 매력있었고, 컴포넌트를 디자인 할 때, 유연한 컴포넌트를 만들기 위해 상위에서 많은것을 결정해서 속성으로 넘겨주는 과정에서 의 속성을 전달하는 특징과도 잘 융화된 느낌이였기 때문이다. 그렇게 사용하게된 는 자바스크립트에서 어떠한 기능 어떠한 특징때문에 작동될 수 있는것일까 styled-components…","html":"<p>요즈음에는 스타일링 기법에 있어서 <code class=\"language-text\">CSS-IN-JS</code>방식을 조금 더선호하게 된 것 같다.</p>\n<p>무엇보다도 스크립트 환경에 더 친화적이여서 서로간 공유가 원활하게 이뤄질 수 있다는점이 매력있었고, 컴포넌트를 디자인 할 때, 유연한 컴포넌트를 만들기 위해 상위에서 많은것을 결정해서 속성으로 넘겨주는 과정에서 <code class=\"language-text\">React</code>의 속성을 전달하는 특징과도 잘 융화된 느낌이였기 때문이다.</p>\n<p>그렇게 사용하게된 <code class=\"language-text\">styled-components</code>는 자바스크립트에서 어떠한 기능 어떠한 특징때문에 작동될 수 있는것일까</p>\n<h2 id=\"styled-components\" style=\"position:relative;\"><a href=\"#styled-components\" aria-label=\"styled components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styled-components</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Box <span class=\"token operator\">=</span>\n  styled<span class=\"token punctuation\">.</span>div <span class=\"token operator\">&lt;</span>\n  <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p><code class=\"language-text\">styled-components</code>를 사용해오던 방식이다.\n위처럼, 특정 태그를 사용할 수 도 있고</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Component <span class=\"token keyword\">from</span> <span class=\"token string\">'...'</span>\n\n<span class=\"token keyword\">const</span> Box <span class=\"token operator\">=</span>\n  <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>\n  <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  margin-right : 10px;\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>이와 같이 특정 재사용 가능한 컴포넌트의 유연함을 유지하기 위해 위치값과 같은 요소들을 상위에서 정해서 전달해주기도 한다.</p>\n<blockquote>\n<p>많이 사용하는 방식</p>\n</blockquote>\n<p>이와 같이 <code class=\"language-text\">styled-components</code>를 사용하는 방식을 보면 눈에 띄는 자바스크립트 문법이 존재한다.</p>\n<h2 id=\"template-literals\" style=\"position:relative;\"><a href=\"#template-literals\" aria-label=\"template literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>template literals</h2>\n<p>기존의 문자열에 변수나 상수등을 표현하기 위해서는 이와 같은 방법으로 처리해야 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">'안녕하세요'</span>\n<span class=\"token keyword\">const</span> say <span class=\"token operator\">=</span> hello <span class=\"token operator\">+</span> <span class=\"token string\">'접니다'</span></code></pre></div>\n<p>이후 <code class=\"language-text\">ES2015</code>에서는 아래와 같은 방식으로 문자열 내에 표현식을 넣을 수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">'안녕하세요'</span>\n<span class=\"token keyword\">const</span> say <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hello<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 접니다</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<h2 id=\"tagged-template-literals\" style=\"position:relative;\"><a href=\"#tagged-template-literals\" aria-label=\"tagged template literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tagged template literals</h2>\n<p>기존의 <code class=\"language-text\">template literals</code>에서 더욱 발전한 것이 <code class=\"language-text\">tagged template literals</code>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tagFunction<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>위와 같은 함수를 <code class=\"language-text\">tagged function</code>이라고 하는데, <code class=\"language-text\">template literlas</code>를 인자로 받아서 사용하는 함수를 <code class=\"language-text\">tagged function</code>이라고 하는것 같다.</p>\n<p>이 <code class=\"language-text\">tagged function</code>은 생각보다 많은 기능을 제공하는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">tagFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>funcs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> funcs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ntagFunction<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'I am Sangmin'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. who are you?</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// [ 'hello, ', '. who are you?' ] [ [Function (anonymous)] ]</span></code></pre></div>\n<p><code class=\"language-text\">tagged function</code>이 전달받은 <code class=\"language-text\">template literals</code>를 내부 표현식을 기준으로 분리하는것 같다.</p>\n<p>첫번째 인자로는 문자열을, 두번째 인자로는 내부의 표현식들을 받아오게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">tagFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>funcs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> funcs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ntagFunction<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'I am Sangmin'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// [ 'hello, ', '' ] [ [Function (anonymous)] ]</span></code></pre></div>\n<p>만약, 표현식 뒤에 별다른 문자열이 없다면, 비어있는 문자열을 반환하게 되는것 같다.</p>\n<p>또한, 문자열 -> 표현식의 순서가 보장되는것 같다.</p>\n<p>이를 특징으로 <code class=\"language-text\">React</code>에서 자주 생성한 <code class=\"language-text\">styled-components</code>를 구현해볼 수 있다.</p>\n<h2 id=\"직접구현\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EC%A0%91%EA%B5%AC%ED%98%84\" aria-label=\"직접구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>직접구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">styled</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">type</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strs<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>liters</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  strs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> literRes <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>liters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      literRes <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> liters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> liters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> liters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    result <span class=\"token operator\">=</span> result <span class=\"token operator\">+</span> str <span class=\"token operator\">+</span> literRes\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// React라면 createElement</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> StyldDiv <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  font-size: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>title <span class=\"token operator\">?</span> <span class=\"token string\">'16px'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'14px'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token function\">StyldDiv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// div</span>\n<span class=\"token comment\">// font-size: 14px;</span>\n<span class=\"token comment\">// color: red;</span></code></pre></div>\n<ol>\n<li>\n<p><code class=\"language-text\">div</code>라는 태그 타입을 인자로 받고, <code class=\"language-text\">template literals</code>를 받는 <code class=\"language-text\">tagged function</code>을 반환한다.</p>\n<ul>\n<li>이 때, <code class=\"language-text\">div</code>라는 태그도 가능하지만, <code class=\"language-text\">Component</code>들도 가능하다.</li>\n<li><code class=\"language-text\">React</code>라면 이 때 전달받은 인자를 통해 마지막에 <code class=\"language-text\">createElement</code>를 통해 <code class=\"language-text\">React Element</code>를 생성할 것 같다.</li>\n</ul>\n</li>\n<li>\n<p>전달받은 <code class=\"language-text\">template literals</code>를 분석하여, 문자열과 표현식을 분리해서 갖고있는 함수를 반환하는데, 해당 함수는 <code class=\"language-text\">props</code>를 전달받을 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">React</code>에서의 특징</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">props</code>를 전달받을 수 있고, 전달받은 <code class=\"language-text\">props</code>를 통해 표현식을 실행시켜 하나의 스타일을 완성시키고, <code class=\"language-text\">1</code>의 단계에서 생성한 태그 혹은 <code class=\"language-text\">components</code>에 해당 스타일을 적용시키는 함수를 반환한다</p>\n<ul>\n<li>이것이 <code class=\"language-text\">StyldDiv</code> 컴포넌트</li>\n</ul>\n</li>\n</ol>\n<p>아마 위와같은 방식으로 <code class=\"language-text\">styled-components</code>가 작동되는것이 아닐까 생각해본다.</p>\n<h2 id=\"느낌\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%8C\" aria-label=\"느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낌</h2>\n<p>생각해보면 자주 사용하는 모듈들은 모두 자바스크립트의 환경에서 생성되고, 사용되고있다.</p>\n<p>이를 보면, 자바스크립트가 갖고있는 고유한 특징을 기반으로 작동된다고 생각해볼 수있는데, 최근에 들었던 조언을 생각해보면 적어도 내가 자주사용하는것들에 있어서는 어느정도 이해를 해보는것이 좋을것 같다.</p>\n<p>최근에는 <code class=\"language-text\">React Hook</code>자체의 원리에 대해 이해해보려고 하는데, 아직 몇몇부분에 대해서는 궁금증이 해소되지 않고 있다.. 이해하고 정리하는날을 기대해보자.</p>","frontmatter":{"title":"🎨 styled-components의 작동원리","date":"November 17, 2021"}}},"pageContext":{"slug":"/Study/Think/how styled-components work/","previous":{"fields":{"slug":"/Study/Think/directory destructure/"},"frontmatter":{"title":"⚛ 컴포넌트의 역할과 디렉토리 구조","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/mouse and click issue/"},"frontmatter":{"title":"🖱 동일 요소의 클릭이벤트, 마우스이벤트 이슈","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}