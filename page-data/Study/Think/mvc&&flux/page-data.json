{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/mvc&&flux/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"e6dcb551-0142-54ae-8b1d-a0617c91a5da","excerpt":"요즘 프로젝트들의 리팩토링을 고민하면서 자연스럽게 디렉토리의 구조도 생각해보게 되었다. 어찌보면, 비즈니스로직들과 뷰를 구분할 때, 디렉토리를 기반으로 짜면 좋지 않을까라는 생각도 들었다. 디자인 패턴 프로젝트를 구성할 때, 정한 디자인패턴에 준하여 구조를 잡는다면 외부의 사람들이 해당 프로젝트를 이해하는 데에도 좋고 이후 기술변경등으로 인한 수정사항이 있을 때, 스파게티코드러처럼 여러곳을 수정할 필요없이 필요한 부분만 수정할 수 있다는 큰 장점이 있다. MVC…","html":"<p>요즘 프로젝트들의 리팩토링을 고민하면서 자연스럽게 디렉토리의 구조도 생각해보게 되었다. 어찌보면, 비즈니스로직들과 뷰를 구분할 때, 디렉토리를 기반으로 짜면 좋지 않을까라는 생각도 들었다.</p>\n<h2 id=\"디자인-패턴\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4\" aria-label=\"디자인 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 패턴</h2>\n<p>프로젝트를 구성할 때, 정한 디자인패턴에 준하여 구조를 잡는다면 외부의 사람들이 해당 프로젝트를 이해하는 데에도 좋고 이후 기술변경등으로 인한 수정사항이 있을 때, 스파게티코드러처럼 여러곳을 수정할 필요없이 필요한 부분만 수정할 수 있다는 큰 장점이 있다.</p>\n<h2 id=\"mvc\" style=\"position:relative;\"><a href=\"#mvc\" aria-label=\"mvc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC</h2>\n<p>정말 유명하고 많은 프로젝트들에 사용되고있는 디자인패턴이다.</p>\n<ul>\n<li><strong>M</strong>odel : 프로젝트의 데이터, 자료를 의미한다.</li>\n<li><strong>V</strong>iew : 사용자에게 보여지는 부분. <code class=\"language-text\">UI</code></li>\n<li><strong>C</strong>ontroller : <code class=\"language-text\">Model</code>과 <code class=\"language-text\">View</code>를 이어주는 다리라고 한다. <code class=\"language-text\">UI</code>에서 발생하는 각종 이벤트처리나, 그로 인한 <code class=\"language-text\">Model</code>의 변경을 관리한다. 즉 각종 로직들을 관리하는 파트</li>\n</ul>\n<h2 id=\"mvc-동작-순서\" style=\"position:relative;\"><a href=\"#mvc-%EB%8F%99%EC%9E%91-%EC%88%9C%EC%84%9C\" aria-label=\"mvc 동작 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 동작 순서</h2>\n<ol>\n<li>사용자의 요청들이 <code class=\"language-text\">Controller</code>에 들어옴.</li>\n<li><code class=\"language-text\">Controller</code>는 <code class=\"language-text\">View</code>에게서 사용자의 요청을 확인하고, 필요하다면 <code class=\"language-text\">Model</code>을 업데이트함.</li>\n<li><code class=\"language-text\">Model</code>이 변경된다면 <code class=\"language-text\">View</code>에서 해당 데이터를 사용하는 부분이 업데이트 됨. 필요에 따라, 데이터를 즉시 사용하는것이 아닌, 어떠한 로직이 필요한 경우 <code class=\"language-text\">Controller</code>를 거치기도 함.</li>\n</ol>\n<div style=\"display : flex; justify-content : space-between;\">\n  <img style=\"display : inlneblock; width : 100%\" src=\"/img/2021/02/11/5.png?raw=true\" alt=\"result1\">\n</div>\n<blockquote>\n<p><a href=\"https://medium.com/@jang.wangsu/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-mvc-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-1d74fac6e256\">이미지 출처 : https://medium.com/@jang.wangsu</a></p>\n</blockquote>\n<p>💢 이후 프로젝트의 규모가 커지게 되면서 문제가 발생하게 된다. <code class=\"language-text\">MVC</code>패턴은 <code class=\"language-text\">Model</code>과 <code class=\"language-text\">View</code>의 의존성이 높기 때문에 하나의 <code class=\"language-text\">Model</code>이 다수의 <code class=\"language-text\">View</code>에게 영향을 줄 수도 있고, 반대로 다수의 <code class=\"language-text\">View</code>가 하나의 <code class=\"language-text\">Model</code>에 영향을 받을 수 있다. 즉 여러개의 파트들이 서로에게 의존성을 갖게되어, 둘을 이어주는 <code class=\"language-text\">Controller</code>에 복잡하게 연결되어있는 상황이 생길 수 있다.</p>\n<blockquote>\n<p>Angular와 같은 양방향 바인딩</p>\n</blockquote>\n<div style=\"display : flex; justify-content : space-between;\">\n  <img style=\"display : inlneblock; width : 100%\" src=\"/img/2021/02/11/6.png?raw=true\" alt=\"result2\">\n</div>\n<blockquote>\n<p><a href=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FALrHe%2FbtqBTMSuHfN%2FZlW9i9ET34e90APgCRChk1%2Fimg.png\">이미지 출처 : https://beomy.tistory.com/44</a></p>\n</blockquote>\n<h2 id=\"flux\" style=\"position:relative;\"><a href=\"#flux\" aria-label=\"flux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flux</h2>\n<p>페이스북에서 개발한 디자인 패턴으로, 무조건 한방향으로만 이뤄지는 디자인 패턴이다.</p>\n<div style=\"display : flex; justify-content : space-between;\">\n  <img style=\"display : inlneblock; width : 100%\" src=\"/img/2021/02/11/7.png?raw=true\" alt=\"result3\">\n</div>\n<blockquote>\n<p><a href=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FALrHe%2FbtqBTMSuHfN%2FZlW9i9ET34e90APgCRChk1%2Fimg.png\">이미지 출처 : https://beomy.tistory.com/44</a></p>\n</blockquote>\n<ol>\n<li><code class=\"language-text\">View</code>에서 사용자의 요청<code class=\"language-text\">Action</code>이 발생</li>\n<li><code class=\"language-text\">Dispatcher</code>호출</li>\n<li><code class=\"language-text\">Dispatcher</code>에 따른 <code class=\"language-text\">Store</code>상태값 변경</li>\n<li><code class=\"language-text\">Store</code> 상태값 변경에 따른 <code class=\"language-text\">View</code> 재구성</li>\n</ol>\n<p>사실상 <code class=\"language-text\">Redux</code>는 이러한 <code class=\"language-text\">Flux</code>디자인패턴을 잘 활용한 중앙상태관리툴이라고 볼 수 있는데, 단 하나의 <code class=\"language-text\">Store</code>만을 관리하며 해당 <code class=\"language-text\">Store</code>에 <code class=\"language-text\">View</code>는 직접적으로 영향을 줄 수 없으며 오로지 특정 <code class=\"language-text\">Action</code>에 따른 <code class=\"language-text\">Dispatcher</code>로만 접근할 수 있는점이다.</p>\n<p>하지만 요즘 드는 생각이, 디렉토리의 구조를 짤 때, <code class=\"language-text\">Redux</code>를 <code class=\"language-text\">MVC</code>패턴의 모양? 을 기반으로 하여 짤 수 도 있지 않나 생각이 든다.</p>\n<p>크기가 커지면서 여러개의 <code class=\"language-text\">Model</code>이 생성되는것을 하나의 <code class=\"language-text\">store</code>로 친다면..</p>\n<ul>\n<li><code class=\"language-text\">View</code>는 뭐.. 당연히 <code class=\"language-text\">Component</code>들이겠고</li>\n<li><code class=\"language-text\">Model</code>은 <code class=\"language-text\">reducer</code> + <code class=\"language-text\">store</code> 부분이려나..? 초기 상태인 <code class=\"language-text\">initialState</code>를 사실상 <code class=\"language-text\">reducer</code>에서 생성해서 이렇게 생각했다.</li>\n<li><code class=\"language-text\">Controller</code>는 <code class=\"language-text\">Action</code>이 될 것 같다.</li>\n</ul>\n<p>좀 더 생각을 해봐야겠다.</p>","frontmatter":{"title":"MVC && Flux","date":"February 11, 2021"}}},"pageContext":{"slug":"/Study/Think/mvc&&flux/","previous":{"fields":{"slug":"/Study/Think/ssr vs csr/"},"frontmatter":{"title":"SSR vs CSR 비교","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Next/next.js start vs export/"},"frontmatter":{"title":"Next.js start vs export","category":"Study","draft":false,"tag":"Next.js"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}