{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/config&&env/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"7d604418-aa6f-5a3a-9e30-1e3a662efc37","excerpt":".config 특정 프로그램에 대한 기본설정값들이 배치되는 형식의 파일이다.   any의 사용 여부 등 타입스크립트 설정 관련  프로젝트의 번들링 설정을 해주는  의 헤더 값들 및 각종 설정을 해주는  env…","html":"<h2 id=\"config\" style=\"position:relative;\"><a href=\"#config\" aria-label=\"config permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.config</h2>\n<p>특정 프로그램에 대한 기본설정값들이 배치되는 <code class=\"language-text\">JSON</code>형식의 파일이다.  </p>\n<p>any의 사용 여부 등 타입스크립트 설정 관련 <code class=\"language-text\">tsconfig.json</code></p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/03/01/1.PNG?raw=true\" alt=\"1\">\n</div>\n<p>프로젝트의 번들링 설정을 해주는 <code class=\"language-text\">webpack.config</code></p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/03/01/2.PNG?raw=true\" alt=\"12\">\n</div>\n<p><code class=\"language-text\">Gatsby</code>의 헤더 값들 및 각종 설정을 해주는 <code class=\"language-text\">gatsby-config *</code></p>\n<div style=\"text-align : center; display : flex;\">\n  <img style=\"display : inlne-block; width : 49.5%; margin-right : 1%;\" src=\"/img/2021/03/01/3.PNG?raw=true\" alt=\"3\">\n  <img style=\"display : inlne-block; width : 49.5%;\" src=\"/img/2021/03/01/4.PNG?raw=true\" alt=\"4\">\n</div>\n<h2 id=\"env\" style=\"position:relative;\"><a href=\"#env\" aria-label=\"env permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>env</h2>\n<p><code class=\"language-text\">Node.js</code>를 사용하게 된다면, 갖게되는 환경변수이다. 기본적으로 여러가지의 값들을 갖고있는 <code class=\"language-text\">JSON</code> 형식인데, 추가적으로 값을 설정할 수 있다.</p>\n<p><br><br></p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/03/01/5.PNG?raw=true\" alt=\"12\">\n</div>\n<p>콘솔로 <code class=\"language-text\">process.env</code>를 찍어본다면 위의 결과값이 나온다.</p>\n<p><br><br></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// package.json</span>\n<span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"set WORK_TYPE=production&amp;&amp; node server.js\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>위와 같이 해당 프로젝트가 실행될 때, 일시적으로 값을 추가해줄 수 있다.</p>\n<p><br><br></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// dev.env</span>\nname<span class=\"token operator\">=</span>개발용 <span class=\"token constant\">DB</span> 입니다\npw<span class=\"token operator\">=</span><span class=\"token number\">12345</span>\n<span class=\"token comment\">// pro.env</span>\nname<span class=\"token operator\">=</span>배포용 <span class=\"token constant\">DB</span> 입니다\npw<span class=\"token operator\">=</span><span class=\"token number\">67890</span></code></pre></div>\n<p><code class=\"language-text\">.env</code>파일을 사용하여, <code class=\"language-text\">WORK_TYPE</code>에 따라 다른 값들을 사용하도록 설정해준다.</p>\n<p><br><br></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// server.js</span>\n<span class=\"token keyword\">const</span> dotenv <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  path <span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">WORK_TYPE</span> <span class=\"token operator\">==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'pro.env'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'dev.env'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">)</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">DB명 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, DB비번 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>pw<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div style=\"text-align : center; display : flex;\">\n  <img style=\"display : inlne-block; width : 49.5%; margin-right : 1%;\" src=\"/img/2021/03/01/6.PNG?raw=true\" alt=\"6\">\n  <img style=\"display : inlne-block; width : 49.5%;\" src=\"/img/2021/03/01/7.PNG?raw=true\" alt=\"7\">\n</div>\n<p><code class=\"language-text\">detenv</code>를 통해, 실행되고 나서 <code class=\"language-text\">process.env</code>에 해당 값들이 추가되도록 하는 방식이다.</p>\n<h2 id=\"의문\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EB%AC%B8\" aria-label=\"의문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의문</h2>\n<p>하지만 좀만 생각해본다면 의아한점이 있는데, <code class=\"language-text\">config.js</code>나 방금의 <code class=\"language-text\">.env</code>방식 둘다 결국은 비밀번호와 같은 중요한 값들을 파일로 관리하게 되지만 결국 해당 파일은 깃허브 같은곳에서 <code class=\"language-text\">.gitignore</code> 파일로 지정해놓으면 문제 없지 않나 생각하게된다.</p>\n<p>하지만, 사실 위의 <code class=\"language-text\">env</code>사용 방식은 전 - 혀 추천되지 않는 방식이다.</p>\n<h2 id=\"processenv\" style=\"position:relative;\"><a href=\"#processenv\" aria-label=\"processenv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>process.env</h2>\n<p>프로젝트를 실행하기 전, <code class=\"language-text\">Node.js</code>환경에 변수를 추가시키는 방식이다.  </p>\n<p>이러한 특징때문에, 굳이 <code class=\"language-text\">.gitignore</code>에 파일을 추가해줄 필요도 없고, 좀 더 감춰진 환경에서 값을 사용할 수 있다.  </p>\n<p>해당 값은 <strong>생성한 터미널</strong> 내부라면 어디에서든 사용할 수 있다.  </p>\n<p>계속해서 테스트 해보았는데, 외부 윈도우터미널에 <code class=\"language-text\">set key=value</code> 형식으로 직접 추가 하더라도 VS코드 내부의 윈도우터미널에서는 해당 값을 찾을 수 없었다.</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/03/01/8.PNG?raw=true\" alt=\"8\">\n</div>\n<p><br><br></p>\n<p>단, 동일하게 내부 터미널 이라면 윈도우에서 생성하더라도 <code class=\"language-text\">bash</code>환경에서 조회하는것은 가능했다. 도대체 왜지..?</p>\n<blockquote>\n<p>어차피 <code class=\"language-text\">EC2</code>와 같은 환경에서는 외부터미널에서 모든 명령어로 수행되기 때문에, 전혀 문제없을듯 하다.</p>\n</blockquote>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/03/01/9.PNG?raw=true\" alt=\"9\">\n</div>\n<p><br><br></p>\n<p>위와 같은 방법으로, <code class=\"language-text\">EC2</code>로 배포될 때에는 배포용 값들을, 로컬에서 개발용으로 사용할 때에는 개발용 값들을 따로 저장해 놓으면 파일도 필요하지 않고 좀 더 노출을 막을 수 있다.</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/03/01/10.PNG?raw=true\" alt=\"10\">\n</div>\n<h3 id=\"환경변수-등록-방식\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EB%93%B1%EB%A1%9D-%EB%B0%A9%EC%8B%9D\" aria-label=\"환경변수 등록 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경변수 등록 방식</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">CMD</code> : <code class=\"language-text\">set key=value</code></p>\n<blockquote>\n<p>윈도우의 경우 띄어쓰기를 하면, 띄어쓰기 또한 값으로 판단되니 사용하면 안된다.</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">bash</code> : <code class=\"language-text\">export key=value</code></p>\n<blockquote>\n<p>리눅스 환경에서도 해당 방식을 사용한다고 함.</p>\n</blockquote>\n</li>\n</ul>","frontmatter":{"title":"config와 env","date":"March 01, 2021"}}},"pageContext":{"slug":"/Study/Think/config&&env/","previous":{"fields":{"slug":"/Study/Think/loa-hands2/"},"frontmatter":{"title":"loa-hands refactoring","category":"Study","draft":false,"tag":"Think"}},"next":null}},"staticQueryHashes":["3128451518","3665928227","479399088"]}