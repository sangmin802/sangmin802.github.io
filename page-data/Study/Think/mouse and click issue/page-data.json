{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/mouse and click issue/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"2e05c040-bc9a-581d-9fe3-2b9893ed98ff","excerpt":"…","html":"<h2 id=\"문제-발생\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D\" aria-label=\"문제 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 발생</h2>\n<p>최근 어떤 프로젝트를 진행하면서 한가지 발생했던 이슈와 해결과정, 해결방법에 대한 확신을 다룬 포스트 이다.</p>\n<p>좌우 스크롤과 같은 영역을 구현할 때, 워낙 잘 알려져있고 높은 사용을 자랑하는 <code class=\"language-text\">swiper</code>모듈 대신 좌우 스크롤을 통해 구현해보고자 하였다.</p>\n<p>구현과정 자체에는 큰 문제가 없었는데 한가지 문제가 발생하였다.</p>\n<p><code class=\"language-text\">click</code> 이벤트의 경우, <strong>동일한 요소</strong> 내에 <code class=\"language-text\">mousedown</code> - <code class=\"language-text\">mouseup</code>이 발생하면 <code class=\"language-text\">click</code>이 호출되는것 같았다.</p>\n<p>그 순서또한 동일하게 <code class=\"language-text\">mousedown</code> - <code class=\"language-text\">mouseup</code> - <code class=\"language-text\">click</code>이 호출되었다.</p>\n<blockquote>\n<p>그래서 그게 왜?</p>\n</blockquote>\n<p>위에서 잠깐 언급되었는데, 서로 다른 요소에서 <code class=\"language-text\">mousedown</code>, <code class=\"language-text\">mouseup</code>이 이어지게된다면 <code class=\"language-text\">click</code>이 호출되지 않지만 동일한 요소에서 시작, 마무리 된다면 <code class=\"language-text\">click</code>이 호출되어 원하지 않는 상황에 해당 이벤트가 발생하였다.</p>\n<p>즉, 사용자의 입장에서 단순 좌우 스크롤을 원했던 것이 예상하지 못한 클릭이벤트가 발생하여 요소에 할당된 <code class=\"language-text\">route</code>로 이동하는 등의 사이드이펙트가 발생하였다.</p>\n<h2 id=\"이벤트-전파-차단을-통한-해결\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A0%84%ED%8C%8C-%EC%B0%A8%EB%8B%A8%EC%9D%84-%ED%86%B5%ED%95%9C-%ED%95%B4%EA%B2%B0\" aria-label=\"이벤트 전파 차단을 통한 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 전파 차단을 통한 해결</h2>\n<p>한가지 해결방법은 클릭이벤트가 아닌 <code class=\"language-text\">mouseup</code>이벤트로 대체하고 드래그중인 상태를 구분하여 이벤트 전파를 막는것이였다.</p>\n<p>이벤트가 전달되는 순서나 이벤트 전파자체를 막을수 있는 자바스크립트의 특징을 잘 살린 해결방법일 수 있다.</p>\n<p>다만 아쉬운점은 <code class=\"language-text\">mouseup</code>이라는 행위는 생각보다 많은 방법을 공유하게되는데,</p>\n<p>마우스 휠을 클릭한다거나, 다른 요소에서 시작하고 드래그하여 해당요소에서 마우스업을 할 경우에도 발생할 수 있다는 점이다.</p>\n<p>결국, 동일하게 사용자가 원하지 않는 상황에서도 해당 이벤트가 발생할 수 있다는점은 해결되지 않았다.</p>\n<h2 id=\"실행함수의-호출시간-제어\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%ED%95%A8%EC%88%98%EC%9D%98-%ED%98%B8%EC%B6%9C%EC%8B%9C%EA%B0%84-%EC%A0%9C%EC%96%B4\" aria-label=\"실행함수의 호출시간 제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행함수의 호출시간 제어</h2>\n<p>조금 다르게 접근을 해보자.</p>\n<p>결국 <code class=\"language-text\">mousedown</code> - <code class=\"language-text\">mouseup</code> - <code class=\"language-text\">click</code>과 같이 동일 요소 내에서 발생하는 이벤트의 호출순서는 바꿀 수 가 없다.</p>\n<p>즉 <code class=\"language-text\">mouseup</code>을 통해 드래그중이 아닌 상태를 초기화 하게 된다면 당연히 이후에 호출되는 <code class=\"language-text\">click</code>이벤트에서는 드래그중인 상태를 구분할 수 없다.</p>\n<p>자바스크립트가 실행되는 환경은 하나의 콜스택으로 처리되어 필요시 비동기로 전달하여 실행되는 순서, 시간을 개발자가 어느정도 컨트롤 할 수 있다.</p>\n<p>이러한 점이 정말 매력있다고 생각하는데, 위의 문제도 이와같이 접근하여 해결할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  isDragging <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>정말 단순한 한 줄 이지만 많은것을 의미하고있다.</p>\n<p>저 함수는 <code class=\"language-text\">mouseup</code>라는 이벤트가 실행될 때 콜백함수로 전달되어 실행되는 실행함수이다.</p>\n<p>하지만, <code class=\"language-text\">setTimout</code>을 통해 비동기처리하였기 때문에 별도의 시간을 지정해주지 않았더라도 즉시실행되는것이 아닌 태스크큐에 저장이 된다.</p>\n<p>사용자의 이벤트도 각각의 이벤트 핸들러에 할당되어있는 실행함수들이 비동기로 처리되는 특징인데, 저 <code class=\"language-text\">setTimeout</code>을 통해 전달되는 <strong>드래그상태 초기화</strong> 라는 실행함수는 <code class=\"language-text\">click</code>이벤트의 실행함수보다 뒷순위인 상태로 태스크큐에 저장된다.</p>\n<p>선입선출의 특징을 갖고있는 큐의 자료규조 특성상 <code class=\"language-text\">click</code>이벤트의 호출이 먼저 진행이 되지만, 아직 <code class=\"language-text\">isDragging</code>의 상태가 초기화되지 않았기 때문에 <code class=\"language-text\">route</code>이동과 같이 할당된 클릭이벤트가 호출되지 않는다.</p>\n<p>다만, 위의 <code class=\"language-text\">click</code>이벤트의 실행함수가 종료되면 콜스택이 비어있음을 감지하고 <code class=\"language-text\">setTimeout</code>의 <code class=\"language-text\">isDragging</code>상태를 초기화하는 실행함수가 호출되는 점이다.</p>\n<p>이를 통해, 드래그중인 상태 초기화는 <code class=\"language-text\">mouseup</code>에 할당하였더라도 실제 그 로직 자체는 <code class=\"language-text\">click</code>이벤트 호출 이후에 작동되기 때문에 <code class=\"language-text\">click</code>의 실행함수 내부에서는 <code class=\"language-text\">isDragging</code>의 <code class=\"language-text\">true</code>, <code class=\"language-text\">false</code> 두가지 상태를 알 수 있게 된다.</p>\n<h2 id=\"swiper-모듈에서는-어떻게-처리될까\" style=\"position:relative;\"><a href=\"#swiper-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B2%98%EB%A6%AC%EB%90%A0%EA%B9%8C\" aria-label=\"swiper 모듈에서는 어떻게 처리될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>swiper 모듈에서는 어떻게 처리될까</h2>\n<p>내가 해결했던 방법이 절대로 정답이라고 생각하지 않고, 틀린 정답일 수 도 있다.</p>\n<p>따라서 다른 대중적으로 사용되고있는 비슷한 상황이 생길수 있는 오픈소스를 통해 어떤 방법이 있는지 확인해보고자 했다.</p>\n<ul>\n<li>\n<p><a href=\"https://www.npmjs.com/package/swiper\">swiper</a></p>\n<blockquote>\n<p>토요일 기준 주간 다운횟수가 70만회 이상인 어마어마한 모듈이다.</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">onClick<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">swiper<span class=\"token operator\">:</span> SwiperClass<span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> MouseEvent <span class=\"token operator\">|</span> TouchEvent <span class=\"token operator\">|</span> PointerEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\nonTouchStart<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">swiper<span class=\"token operator\">:</span> SwiperClass<span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> MouseEvent <span class=\"token operator\">|</span> TouchEvent <span class=\"token operator\">|</span> PointerEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\nonTouchMove<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">swiper<span class=\"token operator\">:</span> SwiperClass<span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> MouseEvent <span class=\"token operator\">|</span> TouchEvent <span class=\"token operator\">|</span> PointerEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\nonTouchEnd<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">swiper<span class=\"token operator\">:</span> SwiperClass<span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> MouseEvent <span class=\"token operator\">|</span> TouchEvent <span class=\"token operator\">|</span> PointerEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>먼저 해당 모듈의 <code class=\"language-text\">Swiper</code>에서는 생성한 커스텀 이벤트가 <code class=\"language-text\">mouse</code>, <code class=\"language-text\">touch</code>, <code class=\"language-text\">pointer</code> 3가지 일반 이벤트들을 핸들링해주는것 같다.</p>\n<blockquote>\n<p><code class=\"language-text\">pointer</code>는 <code class=\"language-text\">mouse</code>를 포함한 조금 더 넓은 개념의 이벤트라고 한다.</p>\n</blockquote>\n<p><code class=\"language-text\">core.js</code>에서 <code class=\"language-text\">Swiper</code>라는 클래스가 생성될 때 갖고있는 몇가지 속성이 핵심으로 보인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Clicks</span>\nallowClick<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\npreventClicks<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\npreventClicksPropagation<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>또한, 커스텀하게 생성되는 <code class=\"language-text\">click</code>이벤트는 아래와 같은 중간단계를 거치게 되는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> swiper <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>swiper<span class=\"token punctuation\">.</span>enabled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>swiper<span class=\"token punctuation\">.</span>allowClick<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>swiper<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>preventClicks<span class=\"token punctuation\">)</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>swiper<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>preventClicksPropagation <span class=\"token operator\">&amp;&amp;</span> swiper<span class=\"token punctuation\">.</span>animating<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">stopImmediatePropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">swiper.allowClick</code>속성이 <code class=\"language-text\">false</code> 라면 이벤트 전파자체를 막아버린다.</p>\n<p>이 구분 로직이 매우 핵심이다.</p>\n<p><code class=\"language-text\">Swiper</code>모듈에서 커스텀하게 생성한 <code class=\"language-text\">onTouchMove</code>이벤트의 내부 코드를 보다보면 모든 종료상황 전에 값이 할당되는것이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">swiper<span class=\"token punctuation\">.</span>allowClick <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>즉, 드래그중인 상황에는 내부적으로 클릭이 가능한 상태를 부정화 하는 구문이다.</p>\n<p>그리고 <code class=\"language-text\">onTouchEnd</code>의 커스텀 이벤트 내부에 눈에띄는 한가지 로직이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>swiper<span class=\"token punctuation\">.</span>destroyed<span class=\"token punctuation\">)</span> swiper<span class=\"token punctuation\">.</span>allowClick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>종료될 때, <code class=\"language-text\">swiper</code>모듈이 존재한다면 <code class=\"language-text\">swiper.allowClick</code> 속성을 다시 클릭 가능한 상태로 변경을 해주는데,</p>\n<p>놀랍게도 저 <code class=\"language-text\">nextTick</code>메소드의 역할은</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>똑같다.</p>\n<p>초기화 로직을 비동기로 전달하여 <code class=\"language-text\">click</code>이벤트 이후에 실행되도록 해주었다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>요소를 선택한다는 행위에 <code class=\"language-text\">mouseup</code>이벤트를 사용하는것이 권장되지 않고, 동일한 요소 내에 <code class=\"language-text\">mousedown</code>과 <code class=\"language-text\">mouseup</code>이 함께 작동되야하는 <code class=\"language-text\">click</code>이벤트를 적극 권장하고 있었고 그러한 이유가 사용자의 입장에서 예상 외의 상황을 발생시킬수 있다는점이 이유였기 때문에 그러한 방법을 유지한 채로 해결에 접근했다는것에 큰 의미가 있었던것 같다.</p>\n<p>또, 대중적인 모듈이 선택했던 방식과 동일한 방식의 접근이라 나름의 가치있는 방법인것 같아 뿌듯하기도 하다.</p>","frontmatter":{"title":"🖱 동일 요소의 클릭이벤트, 마우스이벤트 이슈","date":"January 22, 2022"}}},"pageContext":{"slug":"/Study/Think/mouse and click issue/","previous":{"fields":{"slug":"/Study/Think/how styled-components work/"},"frontmatter":{"title":"🎨 styled-components의 작동원리","category":"Study","draft":false,"tag":"Think"}},"next":null}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}