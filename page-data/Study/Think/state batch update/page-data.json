{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/state batch update/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"f7d0619d-e4b3-543f-9ffe-563ba3d331a6","excerpt":"에서 에 영향을 주는 를 통해 에 대한 업데이트 요청은 비동기로 전달된다. 또한, 는 상태값을 업데이트 할 때 모든 요청에 따라 바로바로 가 되는것이 아닌 변경사항을 모아서 한번에 일괄 처리한다고 한다. 모든 요청에 각각 반응하여 를 하는것보단, 단 한번의 를 통해 성능 향상을 위함이라고 한다. 공문 에서는 에 대해 이런식으로 표현했다. 상태 업데이트는 비동기식일 수 있습니다.\nReact는 setState…","html":"<p><code class=\"language-text\">React</code>에서 <code class=\"language-text\">render</code>에 영향을 주는 <code class=\"language-text\">setState</code>를 통해 <code class=\"language-text\">state</code>에 대한 업데이트 요청은 비동기로 전달된다.</p>\n<p>또한, <code class=\"language-text\">React</code>는 상태값을 업데이트 할 때 모든 요청에 따라 바로바로 <code class=\"language-text\">rerender</code>가 되는것이 아닌 변경사항을 모아서 한번에 일괄 처리한다고 한다.</p>\n<p>모든 요청에 각각 반응하여 <code class=\"language-text\">rerender</code>를 하는것보단, 단 한번의 <code class=\"language-text\">rerender</code>를 통해 성능 향상을 위함이라고 한다.</p>\n<p><code class=\"language-text\">React</code>공문 에서는 <code class=\"language-text\">setState</code>에 대해 이런식으로 표현했다.</p>\n<blockquote>\n<p><strong>상태 업데이트는 비동기식일 수 있습니다.</strong>\nReact는 setState()성능을 위해 여러 호출을 단일 업데이트로 일괄 처리할 수 있습니다 .</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./styles.css'</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state2<span class=\"token punctuation\">,</span> setState2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setState2</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setState2</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> state2<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello CodeSandbox<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Start editing to see some magic happen<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// console</span>\n<span class=\"token comment\">// 0 0</span>\n<span class=\"token comment\">// 19 19</span></code></pre></div>\n<p>이전 <code class=\"language-text\">class</code>에서 동일한 이벤트 내에서 여러번의 <code class=\"language-text\">setState</code>는 병합의 방식으로, <code class=\"language-text\">hook</code>을 사용한 <code class=\"language-text\">setState</code>는 대체의 방식으로 진행된다.</p>\n<h3 id=\"예외적인-상황\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%A0%81%EC%9D%B8-%EC%83%81%ED%99%A9\" aria-label=\"예외적인 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외적인 상황</h3>\n<p><code class=\"language-text\">intersectionObserver</code>는 사용자의 스크롤이 어느 지점을 넘어섰을 때 발생하는 이벤트이다.</p>\n<p>기존 스크롤 이벤트는 여러번 이벤트가 호출 될 수 있다는 점에서 <code class=\"language-text\">throttling</code>을 함께 사용했었는데, 이를 대신해주어서 <code class=\"language-text\">infinite scroll</code>을 구현할 때 사용하곤 한다.</p>\n<p><code class=\"language-text\">intersectonObserver</code>의 조건에 도달했을 때, 아래와 같은 함수가 호출되도록 작성을 하였다.</p>\n<blockquote>\n<p>실제로 이런 코드는 아니였고.. 간단하게 수정하였다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> handleGetData <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setState 1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setState 2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span></code></pre></div>\n<p>가장 아래에 작성된 <code class=\"language-text\">console</code>은 <code class=\"language-text\">rerender</code> 작동 여부를 파악하고자 작성을 했는데 예상하지 못한 결과를 보였다.</p>\n<p><code class=\"language-text\">setState</code>를 통한 요청은 비동기로 전달되기 때문에, 아래와 같은 결과를 반환한다고 생각했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 'setState 1'</span>\n<span class=\"token comment\">// 'setState 2'</span>\n<span class=\"token comment\">// 2</span></code></pre></div>\n<p>하지만 작동을 하였을 때 실제로 보인 결과는 이러했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 'setState 1'</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 'setState 2'</span>\n<span class=\"token comment\">// 2</span></code></pre></div>\n<p>각각의 <code class=\"language-text\">setState</code>요청들이 비동기로 전달되어 <code class=\"language-text\">batch</code>로 병합을 통해 단 한번의 <code class=\"language-text\">rerender</code>만 발생하는것이 아니라, 각각의 <code class=\"language-text\">setState</code>요청에 대해 변경되는 상태값에 대해 바로바로 <code class=\"language-text\">rerender</code>가 발생했다.</p>\n<p>비슷한 결과를 보였던 예제가 한가지 더 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>testState<span class=\"token punctuation\">,</span> setTestState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> async <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setTestState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>async<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testState<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testState<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> loading<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">React-Query</code>나 <code class=\"language-text\">Redux-Saga</code>를 사용하지 않고, <code class=\"language-text\">React Hook</code>만을 사용하여 비동기작업을 처리하고자 할 때 이런식으로 작성할 것이다.</p>\n<p>위의 결과를 미리 보자면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 0 null false</span>\n<span class=\"token comment\">// 1 null true</span>\n<span class=\"token comment\">// 1 \"done\" true</span>\n<span class=\"token comment\">// 1 \"done\" false</span></code></pre></div>\n<p><code class=\"language-text\">setLoading(false)</code>와 <code class=\"language-text\">setTestState(1)</code>은 비동기로 전달이 되고, 한번의 <code class=\"language-text\">rerender</code>를 위해 잘 병합되어 상태값이 업데이트 되었다.</p>\n<p>하지만, <code class=\"language-text\">await</code>이후의 <code class=\"language-text\">setState</code>들은 각각의 요청에 별도의 <code class=\"language-text\">rerender</code>를 갖고있다.</p>\n<p>위의 두가지 상황에 있어서는 공통점을 하나 갖고있다.</p>\n<h2 id=\"state-batch-updating의-예외상황\" style=\"position:relative;\"><a href=\"#state-batch-updating%EC%9D%98-%EC%98%88%EC%99%B8%EC%83%81%ED%99%A9\" aria-label=\"state batch updating의 예외상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>state batch updating의 예외상황</h2>\n<ol>\n<li><code class=\"language-text\">intersectionObserver</code></li>\n<li><code class=\"language-text\">Promise.then</code></li>\n</ol>\n<p><code class=\"language-text\">intersectionObserver</code>는 <code class=\"language-text\">element</code>가 보이는지 안보이는지에 따라 <strong>비동기</strong>로 이벤트를 처리해준다.</p>\n<p><code class=\"language-text\">await</code>은 <code class=\"language-text\">Promise.then</code>으로 대표적인 <strong>비동기</strong> 작업이다.</p>\n<p><code class=\"language-text\">async/await</code>, <code class=\"language-text\">then/catch</code>, <code class=\"language-text\">setTimeout</code>, <code class=\"language-text\">fetch</code>와 같은 비동기 동작을 사용하는 핸들러 내부의 <code class=\"language-text\">setState</code>들은 <code class=\"language-text\">batch</code>작업이 이뤄지지 않는다고 한다.</p>\n<p>따라서, <code class=\"language-text\">await</code>이전의 <code class=\"language-text\">setState</code>들은 <code class=\"language-text\">batch</code>가 정상적으로 진행되었지만, <code class=\"language-text\">.then</code>이후의 콜백함수에 해당되는 <code class=\"language-text\">setState</code>들은 비동기작업과 관련된 핸들러 내부에 위치하고 있기 때문에 <code class=\"language-text\">batch</code>가 작동되지 않았던것 같다.</p>\n<h2 id=\"react18\" style=\"position:relative;\"><a href=\"#react18\" aria-label=\"react18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React18</h2>\n<p><code class=\"language-text\">React</code>의 18버전에는 모든 경우에 <code class=\"language-text\">batching</code> 에 대해 많은 이슈가 있는것 같다.</p>\n<ul>\n<li><a href=\"https://github.com/reactwg/react-18/discussions/21\">Automatic batching for fewer renders in React 18</a></li>\n</ul>\n<blockquote>\n<p>React 18 adds automatic batching for all use cases to improve performance even further. Now, React batches state updates in React events handlers, promises, setTimeout, native event handlers and so on.</p>\n</blockquote>\n<h2 id=\"느낌\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%8C\" aria-label=\"느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낌</h2>\n<p><code class=\"language-text\">setState</code>가 작동되는 방식에 있어서 생각보다 많은부분에서 성능을 고려해주는것 같다.</p>\n<p>사실, 위의 2번째 상황과 같은 비동기작업 처리에 있어서는 여러개의 상태값이 변화될수 있다는 점이나, 에러핸들링과 같이 로직이 길어질 수 있다는 점을 고려해보았을 때 <code class=\"language-text\">useReducer</code>를 사용하는것이 더 적합해보이기도 한다.</p>\n<blockquote>\n<p><code class=\"language-text\">SUCCESS</code>, <code class=\"language-text\">FAIL</code>라는 액션으로 분리하고, 그에 맞는 복수의 상태값변경 및 로직 작성</p>\n</blockquote>\n<p>최근 <code class=\"language-text\">React</code>나 <code class=\"language-text\">React Hook</code>등의 작동원리같은 디테일한 부분에 호기심이 생겨서 더 알아보는 중이다.</p>\n<p>적어도 내가 사용하는 프레임워크, 모듈에 대해서는 깊은 이해를 갖고 있어야겠다는 생각을 하고 있다.</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://medium.com/swlh/react-state-batch-update-b1b61bd28cd2\">state batch updating</a></li>\n<li><a href=\"https://github.com/reactwg/react-18/discussions/21\">Automatic batching for fewer renders in React 18</a></li>\n<li><a href=\"https://www.bigbinary.com/blog/react-18-introduces-automatic-batching\">React 18 introduces Automatic Batching</a></li>\n</ul>","frontmatter":{"title":"⚛ React state batch updating 이슈","date":"October 21, 2021"}}},"pageContext":{"slug":"/Study/Think/state batch update/","previous":{"fields":{"slug":"/Diary/channel coperation/"},"frontmatter":{"title":"✍ 채널 코퍼레이션 후기","category":"Diary","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/directory destructure/"},"frontmatter":{"title":"⚛ 컴포넌트의 역할과 디렉토리 구조","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}