{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/graphql/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"utterances":"sangmin802/sangmin802.github.io"}}},"markdownRemark":{"id":"bb8fe8d5-8abf-5290-9009-cefb4c825ee0","excerpt":"최근 갖고있던 프로젝트를 타입스크립트화 하면서, 그리고 지금까지 모든 프로젝트를 하며 RESTful API를 통해 서버에서 받아오는 데이터에대해 고민을 하게되었었다. 데이터에서 필요하지 않는 부분도 모두 받아오기때문에 데이터가 한눈에 들어오지 않더라. 최근 프로젝트에서 타입스크립트화 하면서, 어떠한 구조의 데이터가 넘어올 지 예상할 수 없고, 인터페이스를 짜기도 좀 어렵더라. URI를 통해 데이터를 요청하게 될 경우, 같은 뷰에서 필요한 데이터더라도 여러번 HTTP통신을 해야 했었다. 상황…","html":"<ul>\n<li>최근 갖고있던 프로젝트를 타입스크립트화 하면서, 그리고 지금까지 모든 프로젝트를 하며 RESTful API를 통해 서버에서 받아오는 데이터에대해 고민을 하게되었었다.\n<ul>\n<li>데이터에서 필요하지 않는 부분도 모두 받아오기때문에 데이터가 한눈에 들어오지 않더라.</li>\n<li>최근 프로젝트에서 타입스크립트화 하면서, 어떠한 구조의 데이터가 넘어올 지 예상할 수 없고, 인터페이스를 짜기도 좀 어렵더라.</li>\n<li>URI를 통해 데이터를 요청하게 될 경우, 같은 뷰에서 필요한 데이터더라도 여러번 HTTP통신을 해야 했었다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"상황1---over-fetching\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%99%A91---over-fetching\" aria-label=\"상황1   over fetching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상황1 - Over-Fetching</h2>\n<ul>\n<li>모든 유저의 이름을 화면에 띄우고 싶음\n<ul>\n<li>처음에는 그냥 모든 유저의 이름만 사용하고 싶지만, 기존 우리가 사용하던 <code class=\"language-text\">REST API</code>의 경우, <code class=\"language-text\">/users/</code> 를 <code class=\"language-text\">GET</code> 해오게 되면 이름 사진 주소 등등 관련된 모든 정보가 넘어오게되어 필요하지 않는부분까지 DB에서 찾아 비효율적인 활동이 일어남.</li>\n</ul>\n</li>\n<li>이러한 상황을 <code class=\"language-text\">over-fetching</code>이라고 한다.\n<blockquote>\n<p>클라이언트가 요청한 정보보다 많은 정보를 서버에서 가져오는 상황</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"상황2---under-fetching\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%99%A92---under-fetching\" aria-label=\"상황2   under fetching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상황2 - Under-Fetching</h2>\n<ul>\n<li>하나의 화면을 구성하기위해 여러번의 <code class=\"language-text\">REST</code> 요청을 하게되는 상황\n<ul>\n<li>Loa-Hands를 할 때, 유저정보를 띄우는 과정에서 실제로는 유저 수집품정보만 사용하긴 했지만, 원래대로라면 수집품정보, pvp정보 등등을 다 따로따로 요청을 보냈어야 했다.</li>\n</ul>\n</li>\n<li>이러한 상황을 <code class=\"language-text\">under-fetching</code>이라고 한다.</li>\n</ul>\n<h1 id=\"graphql\" style=\"position:relative;\"><a href=\"#graphql\" aria-label=\"graphql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Graphql</h1>\n<ul>\n<li>위의 두 상황을 <code class=\"language-text\">Grpahql</code>로 해결이 가능하다.</li>\n<li>URI가 아닌 Query를 사용하여 데이터에서 필요한 부분만 가져다 쓸 수 있는 기능이다.</li>\n<li>클라이언트는 <code class=\"language-text\">Graphql서버</code>와 통신하고 <code class=\"language-text\">Graphql서버</code>는 실제 <code class=\"language-text\">DB서버</code>와 통신한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// GraphQL 언어</span>\n<span class=\"token comment\">// 쿼리의 구조. 딱 이렇게 요청한 속성의 값들만 서버에서 반환함.</span>\n<span class=\"token punctuation\">{</span>\n  feed <span class=\"token punctuation\">{</span>\n    comments\n    likeNumber\n  <span class=\"token punctuation\">}</span>\n  notifications <span class=\"token punctuation\">{</span>\n    isRead\n  <span class=\"token punctuation\">}</span>\n  user <span class=\"token punctuation\">{</span>\n    userName\n    profilePic\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"시작하기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"movieql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Movie API with Graphql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-node index.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// index.js에서 import같은 최신 문법을 사용할 수 있도록</span>\n    <span class=\"token string-property property\">\"@babel/cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.12.10\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"@babel/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.12.10\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"@babel/node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.12.10\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"@babel/preset-env\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.12.11\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// graphql 간단 서버</span>\n    <span class=\"token string-property property\">\"graphql-yoga\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.18.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// node.js에서 fetch API를 사용할 수 있도록</span>\n    <span class=\"token string-property property\">\"node-fetch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.6.1\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// .babelrc</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"indexjs\" style=\"position:relative;\"><a href=\"#indexjs\" aria-label=\"indexjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.js</h3>\n<ul>\n<li><code class=\"language-text\">graphql</code> 서버를 만드는 과정이다.</li>\n<li>실행하게될 경우, 4000포트에 <code class=\"language-text\">graphql playground</code>라는 화면이 보여진다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/01/07/1.PNG?raw=true\" alt=\"1\">\n</div>\n<ul>\n<li><code class=\"language-text\">GraphQLServer</code>생성자에는 객체가 인자로 보내진다.\n<ul>\n<li><code class=\"language-text\">typeDefs</code> : 클라이언트에서 요청한 <code class=\"language-text\">Query</code>나 <code class=\"language-text\">Mutation</code>의 타입을 찾는다.\n<blockquote>\n<p><code class=\"language-text\">Query</code> : DB에서 받아오는 모든것<br>\n<code class=\"language-text\">Mutation</code> : DB에 변경을 주는 모든것</p>\n</blockquote>\n</li>\n<li><code class=\"language-text\">resolvers</code> : <code class=\"language-text\">Query</code>나 <code class=\"language-text\">Mutation</code>으로 왔을 때, 돌려주는 값을 계산?해주는 부분이다. 말 그대로 Query에 대한 해결사</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>GraphQLServer<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql-yoga'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> resolvers <span class=\"token keyword\">from</span> <span class=\"token string\">'./graphql/resolvers'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">typeDefs</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"graphql/schema.graphql\"</span><span class=\"token punctuation\">,</span>\n  resolvers\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Graphql Server Running'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"schemagraphql---typedefs\" style=\"position:relative;\"><a href=\"#schemagraphql---typedefs\" aria-label=\"schemagraphql   typedefs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>schema.graphql - typeDefs</h3>\n<ul>\n<li>요청이 들어오는 쿼리에 대한 반환되는 값의 구조? 인듯 하다.\n<blockquote>\n<p>타입스크립트처럼</p>\n</blockquote>\n</li>\n<li>!는 필수로 반환. 따라서, 값이 존재하지 않을 경우에는 !가 없음</li>\n<li>타입 지정해줄 때, 무조건 첫글자는 대문자로 해야 에러안생김..</li>\n<li>몇개의 타입을 가지고있든 상관 없지만, <code class=\"language-text\">Query</code>나 <code class=\"language-text\">Mutation</code>은 하나씩만 존재할 수 있다.</li>\n</ul>\n<h3 id=\"resolversjs---resolvers\" style=\"position:relative;\"><a href=\"#resolversjs---resolvers\" aria-label=\"resolversjs   resolvers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>resolvers.js - resolvers</h3>\n<ul>\n<li><code class=\"language-text\">schema.graphql</code>의 쿼리 구조에 맞는 응답을 해주는 부분이다.</li>\n<li>여러 데이터베이스에 접촉해서 곳곳의 값을 가져올 수 있도록 함수도 가능한것 같다.</li>\n</ul>\n<h2 id=\"예제---파일구성-및-간단-문자열-반환하기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C---%ED%8C%8C%EC%9D%BC%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EA%B0%84%EB%8B%A8-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B0%98%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"예제   파일구성 및 간단 문자열 반환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 - 파일구성 및 간단 문자열 반환하기</h2>\n<ul>\n<li><code class=\"language-text\">GraphQLServer</code>의 인자로 필요한 <code class=\"language-text\">schema</code>파일과 <code class=\"language-text\">resolvers</code>파일을 만든다</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    schema파일은 클라이언트로부터 오는 Query를 찾는 파일이다.\n  </p>\n  <p>\n    resolvers파일은 schema에서 찾은 타입의 해결을 맡는다.\n  </p>\n  <img src=\"/img/2021/01/07/2.PNG?raw=true\" alt=\"2\">\n</div>\n<ul>\n<li><code class=\"language-text\">schema.graphql</code>에서 <code class=\"language-text\">Query</code>를 생성한다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    클라이언트에서 user라는 query가 왔을 때, 반환해주는 값의 타입을 지정해준다.\n  </p>\n  <img src=\"/img/2021/01/07/3.PNG?raw=true\" alt=\"3\">\n</div>\n<ul>\n<li><code class=\"language-text\">resolvers</code>에서 찾은 <code class=\"language-text\">Query</code>에 대한 해결을 한다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    user Query에서 문자열을 꼭 반환한다고 schema에서 찾았기 떄문에, 그에 맞는 결과물을 리턴해준다.\n  </p>\n  <img src=\"/img/2021/01/07/4.PNG?raw=true\" alt=\"4\">\n</div>\n<ul>\n<li>4000포트의 <code class=\"language-text\">playground</code>에서 user Query로 요청을 보내면 <code class=\"language-text\">resolvers</code>에서 지정한 값이 반환된다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/01/07/5.PNG?raw=true\" alt=\"5\">\n</div>\n<h2 id=\"예제---객체의-원하는-속성만-받아오기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C---%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%9B%90%ED%95%98%EB%8A%94-%EC%86%8D%EC%84%B1%EB%A7%8C-%EB%B0%9B%EC%95%84%EC%98%A4%EA%B8%B0\" aria-label=\"예제   객체의 원하는 속성만 받아오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 - 객체의 원하는 속성만 받아오기</h2>\n<ul>\n<li><code class=\"language-text\">schema.graphql</code>에서 <code class=\"language-text\">User</code>타입을 반환하는 <code class=\"language-text\">Query</code>를 생성한다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    타입스크립트와 유사하게, 객체형식일 경우 커스텀 타입을 생성할 수 있다.\n  </p>\n  <p>\n    users가 아닌 user입니다. 오타가 있네요\n  </p>\n  <img src=\"/img/2021/01/07/6.PNG?raw=true\" alt=\"6\">\n</div>\n<ul>\n<li><code class=\"language-text\">resolvers</code>에서 찾은 <code class=\"language-text\">Query</code>에 대한 해결을 한다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    user Query는 User타입을 꼭 반환한다 하였으니, resolvers에서도 그에 맞는 객체를 반환해준다.\n  </p>\n  <img src=\"/img/2021/01/07/7.PNG?raw=true\" alt=\"7\">\n</div>\n<ul>\n<li>4000포트의 <code class=\"language-text\">playground</code></li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    user Query로 요청을 보낼 때, 반환되는 값이 객체라면 꼭 원하는 속성을 함께 보내주어야 한다.\n  </p>\n  <p>\n    resolvers에서 클라이언트가 요청한 속성들만 보내주는것을 확인할 수 있다.\n  </p>\n  <img src=\"/img/2021/01/07/8.PNG?raw=true\" alt=\"8\">\n</div>\n<ul>\n<li><code class=\"language-text\">playground</code>의 장점</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    schema에서 어떤 타입이 있고, 각 속성들이 어떠한 타입을 요구하는지 확인할 수 있다.\n  </p>\n  <img src=\"/img/2021/01/07/9.PNG?raw=true\" alt=\"9\">\n</div>\n<h2 id=\"예제---실제-db와-유사한-다수의-데이터\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C---%EC%8B%A4%EC%A0%9C-db%EC%99%80-%EC%9C%A0%EC%82%AC%ED%95%9C-%EB%8B%A4%EC%88%98%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0\" aria-label=\"예제   실제 db와 유사한 다수의 데이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 - 실제 DB와 유사한 다수의 데이터</h2>\n<ul>\n<li>다수의 데이터 관리</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    실제 DB를 연동한 것과 같이, 다수의 데이터를 관리해보자.\n  </p>\n  <img src=\"/img/2021/01/07/10.PNG?raw=true\" alt=\"10\">\n</div>\n<ul>\n<li><code class=\"language-text\">schema.graphql</code>에서 <code class=\"language-text\">Query</code>를 생성한다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    이전과 다르게 두개의 Query를 가지고있다. 잘 보면, 타입스크립트와 매우 유사하다는것을 알 수 있다.\n  </p>\n  <p>\n    users : User타입의 객체가 담긴 배열을 반환하는 Query\n  </p>\n  <p>\n    user(id : Int) : Query에 보내어진 인자에 맞는 User타입의 객체 반환\n  </p>\n  <img src=\"/img/2021/01/07/11.PNG?raw=true\" alt=\"11\">\n</div>\n<ul>\n<li><code class=\"language-text\">resolvers</code>에서 찾은 <code class=\"language-text\">Query</code>에 대한 해결을 한다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    위의 배열이 DB데이터라고 생각하자\n  </p>\n  <p>\n    users : 해당 DB를 그대로 반환하는것\n  </p>\n  <p>\n    user(id : Int) : Query에 보내어진 id와 동일한 객체만 반환\n  </p>\n  <img src=\"/img/2021/01/07/12.PNG?raw=true\" alt=\"12\">\n</div>\n<ul>\n<li>4000포트의 <code class=\"language-text\">playground</code></li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    모든 유저정보가 담긴 배열의 DB더라도, 필요한 속성만을 지정해서 받을 수 있다.\n  </p>\n  <p>\n    Query를 보낼 떄, 인자를 같이 보내어서 조건에 맞는 데이터만 찾을 수 있다.\n  </p>\n  <img src=\"/img/2021/01/07/13.PNG?raw=true\" alt=\"13\">\n</div>\n<ul>\n<li><code class=\"language-text\">playground</code>의 장점</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    schema에서 어떤 타입이 있고, 각 속성들이 어떠한 타입을 요구하는지 확인할 수 있다.\n  </p>\n  <img src=\"/img/2021/01/07/14.PNG?raw=true\" alt=\"14\">\n</div>\n<h2 id=\"예제---영화-db-관리하기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C---%EC%98%81%ED%99%94-db-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"예제   영화 db 관리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 - 영화 DB 관리하기</h2>\n<ul>\n<li><code class=\"language-text\">schema.graphql</code>에서 <code class=\"language-text\">Query</code>와 <code class=\"language-text\">Mutation</code>을 생성한다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    Query는 같지만 Mutation이라는 타입이 추가되었다.\n  </p>\n  <p>\n    Query는 DB에서 가져오는거라면, Mutation은 DB에 변화를 주는 타입이다.\n  </p>\n  <p>\n    addMovie(name : String!, score : Int!) : 이름과 점수 인자를 보내 영화를 DB에 추가하는 Mutation이다.\n  </p>\n  <p>\n    deleteMovie(id : Int!) : 해당 id의 영화를 DB에서 제거하는 Mutation이다.\n  </p>\n  <img src=\"/img/2021/01/07/15.PNG?raw=true\" alt=\"15\">\n</div>\n<ul>\n<li><code class=\"language-text\">resolvers</code>에서 찾은 <code class=\"language-text\">Query</code>와 <code class=\"language-text\">Mutation</code>에 대한 해결을 한다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    Query와 Mutation에 두번째 인자로 Query의 변수들이 넘어가는점을 알아야 한다.\n  </p>\n  <img src=\"/img/2021/01/07/16.PNG?raw=true\" alt=\"16\">\n</div>\n<ul>\n<li>Movie DB</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    DB와, 각종 로직들이다.\n  </p>\n  <img src=\"/img/2021/01/07/17.PNG?raw=true\" alt=\"17\">\n</div>\n<ul>\n<li>영화 추가</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    필요한 인자를 Mutation으로 보내서 영화를 추가할 수 있다.\n  </p>\n  <img src=\"/img/2021/01/07/18.PNG?raw=true\" alt=\"18\">\n</div>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/01/07/19.PNG?raw=true\" alt=\"19\">\n</div>\n<ul>\n<li>영화 제거</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    id를 보내어 영화를 제거할 수 있다.\n  </p>\n  <img src=\"/img/2021/01/07/20.PNG?raw=true\" alt=\"20\">\n</div>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/01/07/21.PNG?raw=true\" alt=\"21\">\n</div>\n<h2 id=\"예제---외부-api와-graphql-연동\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C---%EC%99%B8%EB%B6%80-api%EC%99%80-graphql-%EC%97%B0%EB%8F%99\" aria-label=\"예제   외부 api와 graphql 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 - 외부 API와 Graphql 연동</h2>\n<ul>\n<li><code class=\"language-text\">schema.graphql</code>에서 <code class=\"language-text\">Query</code>를 생성한다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    해당 API에서 제공하는 속성들 중, 반환하고자하는 속성들만 뽑아서 type을 만들어준다.\n  </p>\n  <p>\n    movies Query의 인자들은 API에서 queryString으로 데이터의 필터링을 하는 값들이다.\n  </p>\n  <img src=\"/img/2021/01/07/22.PNG?raw=true\" alt=\"22\">\n</div>\n<ul>\n<li><code class=\"language-text\">resolvers</code>에서 찾은 <code class=\"language-text\">Query</code>에 대한 해결을 한다.</li>\n</ul>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/01/07/23.PNG?raw=true\" alt=\"23\">\n</div>\n<ul>\n<li>API</li>\n</ul>\n<div style=\"text-align : center\">\n  <p>\n    각 변수들을 사용하여 fetch API로 데이터를 받아서 반환한다.\n  </p>\n  <p>\n    위의 예제들 처럼 클라이언트에서는 받고자 하는 속성들만 받을 수 있다.\n  </p>\n  <p>\n    이를 통해, 클라이언트는 Graphql서버와 query로 소통하고, Graphql서버가 DB서버와 RESTful API로 소통하는것을 알 수 있다. \n  </p>\n  <img src=\"/img/2021/01/07/24.PNG?raw=true\" alt=\"24\">\n</div>\n<h2 id=\"생각\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81\" aria-label=\"생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각</h2>\n<ul>\n<li>별도의 두개의 서버를 운용을 하는것일까..? 아니면 express 서버 내부에서도 graphql을 운용할 수 있는건가..?</li>\n<li>확실히 클라이언트단에서 생각해보았을 때, 넘어오는 데이터를 완전히 예상할 수 있고, 필요한 데이터만 받을 수 있다는점에서는 엄청난 매력이 있는듯 함.</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://nomadcoders.co/courses\">노마드코더 Graphql</a></li>\n</ul>","frontmatter":{"title":"Graph ql","date":"January 08, 2021"}}},"pageContext":{"slug":"/Study/Think/graphql/","previous":{"fields":{"slug":"/Study/TypeScript/TypeScript_practice04/"},"frontmatter":{"title":"TypeScript로 바꿔보자5","category":"Study","draft":false,"tag":"TypeScript"}},"next":{"fields":{"slug":"/Study/DataStructure/programmers_01_hash/"},"frontmatter":{"title":"완주하지 못한 선수-Hash","category":"Study","draft":false,"tag":"Programmers Coding Test"}}}},"staticQueryHashes":["1162990174","1854831582","2054357557","3128451518"],"slicesMap":{}}