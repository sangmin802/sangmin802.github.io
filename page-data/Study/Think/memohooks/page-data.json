{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/memohooks/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"bcdb1c33-6bc0-5db1-8c59-4ad9dd26ed91","excerpt":"는 라는 상태값이 변경되면 이 일어난다. 아마 대부분의 최신 프레임워크들은 비슷할 것이다. 이러한 특징이 장점도 있지만, 불필요하게 렌더링이 되거나 동일한 변수 혹은 메소드를 반복해서 생성하는 경우가 있다. 불필요한 재생산이 일어나는것을 예방하기 위해 에서는 메모이제이션 들을 제공하고 있다. , ,  캐싱이라는 장점만을 생각하고 이런 들을 계속해서 사용해왔는데, 그 사용이 잘못된 사용임을 알게되었고, 확실하게 사용하기 위해서 정리해보려고 한다. useMemo…","html":"<p><code class=\"language-text\">React</code>는 <code class=\"language-text\">state</code>라는 상태값이 변경되면 <code class=\"language-text\">rerendering</code>이 일어난다.</p>\n<blockquote>\n<p>아마 대부분의 최신 프레임워크들은 비슷할 것이다.</p>\n</blockquote>\n<p>이러한 특징이 장점도 있지만, 불필요하게 렌더링이 되거나 동일한 변수 혹은 메소드를 반복해서 생성하는 경우가 있다.</p>\n<p>불필요한 재생산이 일어나는것을 예방하기 위해 <code class=\"language-text\">React</code>에서는 메모이제이션 <code class=\"language-text\">hook</code>들을 제공하고 있다.</p>\n<p><code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useCallback</code>, <code class=\"language-text\">memo</code></p>\n<p>캐싱이라는 장점만을 생각하고 이런 <code class=\"language-text\">hook</code>들을 계속해서 사용해왔는데, 그 사용이 잘못된 사용임을 알게되었고, 확실하게 사용하기 위해서 정리해보려고 한다.</p>\n<h3 id=\"usememo\" style=\"position:relative;\"><a href=\"#usememo\" aria-label=\"usememo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useMemo</h3>\n<p>변수나 상수를 기억한다. 계산된 속성이라고 보아도 될까?\n<code class=\"language-text\">useMemo</code>를 사용한다면 아래와 같이 표현될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'peach'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>사실 위의 사용은 매우 부적절한 사용이다.</p>\n</blockquote>\n<p>첫번째 인자로 콜백함수를 사용하여 반환되는 값, 두번째 인자로는 의존하는 배열을 설정한다.</p>\n<h3 id=\"usecallback\" style=\"position:relative;\"><a href=\"#usecallback\" aria-label=\"usecallback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useCallback</h3>\n<p><code class=\"language-text\">useMemo</code>가 변수나 상수에 대한 메모이제이션을 하기 위한 <code class=\"language-text\">hook</code>이라면 <code class=\"language-text\">useCallback</code>은 메소드를 위한 <code class=\"language-text\">hook</code>이다.</p>\n<blockquote>\n<p>사실 <code class=\"language-text\">useMemo</code>만으로도 메소드를 메모이제이션 할 수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> func <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// doSomething...</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>doSomething<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>첫번째 인자로 사용되는 <code class=\"language-text\">callback</code>함수로 변수를 받을 수 있으며, <code class=\"language-text\">useMemo</code>와 동일하게 의존배열이 두번째 인자로 전달된다.</p>\n<h3 id=\"또-하나의-비용\" style=\"position:relative;\"><a href=\"#%EB%98%90-%ED%95%98%EB%82%98%EC%9D%98-%EB%B9%84%EC%9A%A9\" aria-label=\"또 하나의 비용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>또 하나의 비용</h3>\n<p>두가지 모두 두번째 인자 내의 속성이 변화가 되면 새롭게 생성하는 방법이다.</p>\n<p>비어있는 배열이 전달된다면, 처음에만 생성되고 이후에는 저장되어있는 값을 사용한다.</p>\n<p>조금 극단적으로 표현이 되긴 했지만, 위처럼 아무런 계산식이 존재하지 않는 콜백함수를 통해 배열을 반환하는것이 굳이 필요할까?</p>\n<p><code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useCallback</code>을 사용하는것 자체도 어찌보면 하나의 비용이소모되는것이다.</p>\n<p>위처럼 단순한 변수나 상수를 선언하는데 이러한 <code class=\"language-text\">hook</code>을 사용하는것은 오히려 역효과만 발생하는 오용이라고 볼 수 있을것 같다.</p>\n<ul>\n<li><a href=\"https://medium.com/swlh/should-you-use-usememo-in-react-a-benchmarked-analysis-159faf6609b7\">Should You Really Use useMemo in React? Let’s Find Out.</a></li>\n</ul>\n<p>실제로 위의 글을 따르면, <code class=\"language-text\">useMemo</code>로 성능개선을 경험할 수 있는 경우는, 계산되는 로직의 복잡성이 100 미만이면, 오히려 초기 <code class=\"language-text\">useMemo</code>를 사용하는 비용이 더 크게 작용되어 역효과만 난다고 한다.</p>\n<blockquote>\n<p>위 글의 복잡도는 <code class=\"language-text\">render</code>를 하기 전, 반복문의 횟수를 기준으로 측정한것으로 보이며, 각각의 횟수에 따라 <code class=\"language-text\">useMemo</code>를 사용했을 때, 사용하지 않았을 때의 <code class=\"language-text\">render</code>완료 시간을 비교한것 같다.</p>\n</blockquote>\n<p><code class=\"language-text\">useCallback</code>의 경우에도, <code class=\"language-text\">render</code>가 되어 계속해서 생성되는 메소드가 하위 컴포넌트의 <code class=\"language-text\">rerender</code>에 영향을 주는것이 아니라면, 사용할 필요가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addOne</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">const</span> callbackSomething <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do Something...</span>\n  <span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>변화가 있는 상태값과 관련이 없는 부수적인 역할을 하는 함수들은 절대 변할일이 없기 때문에, 처음 생성될 때 참조하는것을 그대로 사용할 수 있어서, 의존성배열에 추가해줄 필요가 없다.</p>\n<p>위에 설명된 상황들의 변수, 상수, 함수들은 <code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useCallback</code>을 사용하기보다는 별도의 <code class=\"language-text\">constants</code> 디렉토리나, 외부에서 선언하여 참조하는것처럼 다른 방법을 찾는것이 좋아보인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addOne</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">num</span> <span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> callback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res  <span class=\"token operator\">=</span> <span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// do something...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Child callback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"적합한-사용\" style=\"position:relative;\"><a href=\"#%EC%A0%81%ED%95%A9%ED%95%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"적합한 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적합한 사용</h2>\n<p><code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useCallback</code>을 통해 불필요한 렌더링을 줄여줄 수 있을 때 사용하는것이 좋다.</p>\n<p><code class=\"language-text\">React</code>에서는 하위로 속성이 전달이 되면서, 전달받은 속성이 변화가 있을 때 새롭게 렌더링이 된다.</p>\n<p>아마 <code class=\"language-text\">Javascript</code>를 사용해왔다면 알 수 있는 특징이 있다.\n<code class=\"language-text\">참조</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// true</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">'a'</span> <span class=\"token operator\">===</span> <span class=\"token string\">'a'</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>문자열, 숫자열과 같은 자료형들은 보여지는대로 같다고 인식되지만, 배열, 객체, 함수와 같은 자료형들은 보여지는 모습이 같더라도 다르다고 인식된다.</p>\n<p>이들은 <code class=\"language-text\">참조</code>의 속성을 갖고있기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> a\na <span class=\"token operator\">===</span> c <span class=\"token comment\">// true</span>\na <span class=\"token operator\">===</span> b <span class=\"token comment\">// false</span></code></pre></div>\n<p>이러한 특징들을 생각하고 사용하면 간단하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">method</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// doSomething</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Children method<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>method<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">Children</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> arr<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// render</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Parent</code>컴포넌트에서는 <code class=\"language-text\">Children</code>컴포넌트에게 <code class=\"language-text\">method</code>이라는 메소드을 속성으로 전달한다.</p>\n<p><code class=\"language-text\">Children</code>컴포넌트에서는 무분별하게 렌더링되는것을 막기 위해 <code class=\"language-text\">memo</code>를 사용하여 <code class=\"language-text\">method</code>이 변경될 때만 렌더링이 되도록 설정을 해주었다.</p>\n<p>만약, <code class=\"language-text\">Parent</code>컴포넌트 또한 <code class=\"language-text\">rerender</code>가 일어났을 때 동일한 구조의 메소드 전달하게 되는데, 이러면 <code class=\"language-text\">Children</code>은 <code class=\"language-text\">rerender</code>가 일어나지 않을까?</p>\n<p>그렇지 않다. 값은 동일하지만 서로 참조하는 배열이 다르기 때문에 <code class=\"language-text\">rerender</code>가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// doSomething</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Children method<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>method<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">Children</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> arr<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// render</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이러한 상황일 때, 전달이 되는 속성들이 생성이 되고, 캐싱이 되도록 한다면 <code class=\"language-text\">Parent</code>가 <code class=\"language-text\">rerender</code>되더라도 <code class=\"language-text\">Children</code>에 전달되는 속성은 동일하게 참조되는 값들이 전달되기 때문에 <code class=\"language-text\">rerender</code>를 막을 수 있다.</p>\n<blockquote>\n<p>만약 재생산될 필요가 있다면, 의존성 배열을 수정해주도록 하자</p>\n</blockquote>\n<p><code class=\"language-text\">useMemo</code>의 경우 많은 비용이 소모되는 계산을 통해 생성되는 변수나 상수일 때, <code class=\"language-text\">useCallback</code>의 경우, 자신이 의존하고있는 상태값 외의 변경이 잦은 컴포넌트에서 하위로 메소드를 전달할 때 좋다.</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://ideveloper2.dev/blog/2019-06-14--when-to-use-memo-and-use-callback/\">useCallback, useMemo 사용</a></li>\n<li><a href=\"https://medium.com/swlh/should-you-use-usememo-in-react-a-benchmarked-analysis-159faf6609b7\">Should You Really Use useMemo in React? Let’s Find Out.</a></li>\n</ul>","frontmatter":{"title":"⚛ 메모이제이션 hooks의 오용","date":"September 01, 2021"}}},"pageContext":{"slug":"/Study/Think/memohooks/","previous":{"fields":{"slug":"/Study/Think/git flow/"},"frontmatter":{"title":"🌿git flow 브랜치 전략을 사용하여 안전하게 프로젝트 관리해보기","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/useState,redux,useReducer/"},"frontmatter":{"title":"⚛ useState, Redux 그리고 useReducer","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}