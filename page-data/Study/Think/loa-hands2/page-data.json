{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/loa-hands2/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"76e2257b-dc86-534f-afbc-77379708b3f0","excerpt":"예~ 전에 모 기업에서 피드백을 받고, 또한 리팩토링을 하였었다. 그때 비즈니스 로직과 뷰를 구성하는 컴포넌트를 분리해야한다 라는 말에 , 를 사용하여 를 통한 상태값은 에서 모두 처리하고 속성들을 통해 를 그리는 방식으로 모두 바꿨었다. 하지만 수정을 하고나서도 이해가 안가는점이 있었다. Redux…","html":"<p>예~ 전에 모 기업에서 피드백을 받고, <code class=\"language-text\">Loa-Hands</code>또한 리팩토링을 하였었다.</p>\n<p>그때 비즈니스 로직과 뷰를 구성하는 컴포넌트를 분리해야한다 라는 말에 <code class=\"language-text\">Presentational Component</code>, <code class=\"language-text\">Container Component</code>를 사용하여 <code class=\"language-text\">dispatch</code>를 통한 상태값은 <code class=\"language-text\">Container Component</code>에서 모두 처리하고 속성들을 통해 <code class=\"language-text\">Presentational Component</code>를 그리는 방식으로 모두 바꿨었다.</p>\n<p>하지만 수정을 하고나서도 이해가 안가는점이 있었다.</p>\n<h2 id=\"redux가-의미있나\" style=\"position:relative;\"><a href=\"#redux%EA%B0%80-%EC%9D%98%EB%AF%B8%EC%9E%88%EB%82%98\" aria-label=\"redux가 의미있나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux가 의미있나</h2>\n<p><code class=\"language-text\">Redux Hook</code>을 왜쓴거지..? 라는 생각이 떠나질 않았다.</p>\n<p>이렇게되면 최상위 컴포넌트에서 <code class=\"language-text\">useState</code>를 사용하고, 모든 <code class=\"language-text\">dispatcher</code>와 <code class=\"language-text\">state</code>값들을 그냥 속성으로 보내주는거랑 뭐가다른거지..</p>\n<p>어쩌면 위의 두가지를 분리한다는점을 내가 잘못이해한게 아닌가 싶었다.</p>\n<p>위와 다른 기준으로 리팩토링을 다시해보기로 했다.</p>\n<ol>\n<li>\n<p>재사용 가능한 컴포넌트를 위해 <code class=\"language-text\">chldren</code>기능을 좀 더 잘 사용해보자.</p>\n<blockquote>\n<p>재사용 가능한 컴포넌트를 사용한다는점에서, 최대한 부품부품별로 잘게 나누는것도 중요할 것 같다.</p>\n</blockquote>\n</li>\n<li>\n<p>비즈니스 로직을 생성하는 훅을 만들고, 필요한 컴포넌트에서는 생성된 훅을 가져다 사용한다.</p>\n<blockquote>\n<p>사실, 이 방법이 올바른 방법인지는 잘 모르겠지만, <code class=\"language-text\">useDispatch</code>나 <code class=\"language-text\">useSelector</code> 등도 이와같이 하면, 해당 훅으로 생성되는 함수만 컴포넌트에서 받아오기때문에, 추후 기술스택이 업데이트되거나 바뀌더라도 해당 파일의 훅만 수정해주면 된다는 점이다.</p>\n</blockquote>\n</li>\n<li>특정 컴포넌트에서만 사용되거나 뷰를 구성할 때 필요한 훅들 <code class=\"language-text\">useEffect</code>, <code class=\"language-text\">useState</code>또한 재사용할 수 있도록 분리하자.</li>\n<li><code class=\"language-text\">Redux</code>의 경우, 사실상 <code class=\"language-text\">Redux</code>를 사용한 순간 데이터 흐름 방식은 <code class=\"language-text\">Flux</code> 패턴이지만 디렉토리 구조는 <code class=\"language-text\">MVC</code>패턴을 따르기로 했다.</li>\n</ol>\n<h2 id=\"디렉토리-구조\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-label=\"디렉토리 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디렉토리 구조</h2>\n<h3 id=\"before\" style=\"position:relative;\"><a href=\"#before\" aria-label=\"before permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Before</h3>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/1.PNG?raw=true\" alt=\"1\">\n</div>\n<h3 id=\"after\" style=\"position:relative;\"><a href=\"#after\" aria-label=\"after permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>after</h3>\n<ul>\n<li>이전의 <code class=\"language-text\">Presentational Component</code>, <code class=\"language-text\">Container Component</code>로 나눈것이 아닌, 최대한 부품으로 나눠서 사용</li>\n<li>\n<p>재사용 목적인 컴포넌트<code class=\"language-text\">_name</code> 와 그렇지 않은 컴포넌트 <code class=\"language-text\">part-name</code>를 구분함. 다만 디렉토리의 경우 가독성을 위해 <code class=\"language-text\">Kebab case</code>를 사용</p>\n<blockquote>\n<p>각각의 컴포넌트별 필요한 값, 속성명, 값을 구하기 위한 로직들이 다르기때문에 재사용목적이 아닌 컴포넌트도 존재하게 됨… </p>\n</blockquote>\n</li>\n<li>추후 확장 가능성을 위해 기능별로 디렉토리를 꼭 갖도록 함</li>\n</ul>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/2.PNG?raw=true\" alt=\"1\">\n</div>\n<h2 id=\"재사용-가능한-hook\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-hook\" aria-label=\"재사용 가능한 hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재사용 가능한 Hook</h2>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/3.PNG?raw=true\" alt=\"1\">\n</div>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/4-1.PNG?raw=true\" alt=\"1\">\n</div>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/4-2.PNG?raw=true\" alt=\"1\">\n</div>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/4-3.PNG?raw=true\" alt=\"1\">\n</div>\n<p>위와 같은 재사용가능한 컴포넌트를 최대한 만들었다(?) 유지했다(?).</p>\n<p>속성 값들만 받아와서 생성하는 부분이다. 물론, <code class=\"language-text\">Nullalbe</code>을 통해 없는속성이라면 생성하지 않는다.</p>\n<p>당연하게도, 재사용을 하더라도 <code class=\"language-text\">CSS</code>는 다르게 필요한 경우가 있는데, 이러한 경우 해당 컴포넌트를 부품으로 사용하는 상위컴포넌트의 클래스명에 상속시켜서 <code class=\"language-text\">CSS</code>를 덮어씌우는 방식으로 하였다.</p>\n<blockquote>\n<p>사실상 이런식으로 하게된다면 <code class=\"language-text\">SCSS</code>가 더 나을듯 함</p>\n</blockquote>\n<p>붉은 원들은 모두 동일한 컴포넌트임</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/5.PNG?raw=true\" alt=\"1\">\n</div>\n<p>위의 컴포넌트도 재사용 가능한 컴포넌트인데, 조금은 규모가 크다.</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/6-1.PNG?raw=true\" alt=\"1\">\n</div>\n<p>해당 라우트에서 저 부분은 모두 두개의 기둥?이 서있는 형식을 갖고있다.</p>\n<p>다만, 모양은 모두 같아보여도 외부에서 받아오는 <code class=\"language-text\">JSON</code>의 <code class=\"language-text\">key</code>, <code class=\"language-text\">value</code>가 다르고, 해당 <code class=\"language-text\">value</code>를 파싱하는 과정도 모두 다르다.</p>\n<p>왜 파싱이 필요한가 싶겠지만.. 내가 만든 <code class=\"language-text\">JSON</code>이 아니라 어쩔수가..</p>\n<p>물론 <code class=\"language-text\">GrpahQl</code>을 사용한다면 해당 서버에서 통일화하여 클라이언트단으로 넘어와 사용하기때문에 좀 더 컴포넌트를 단순하게하고 줄일 수 있겠지만 그럴수있는 상황이 아니니깐..</p>\n<p>저 <code class=\"language-text\">DoubleColumnList</code>에 각기 다른 컴포넌트를 내부에 갖게된다.</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/6-2.PNG?raw=true\" alt=\"1\">\n</div>\n<p>대략적인 생김새는 이렇게 생겼다. 이런것들이 각각 필요한 값들, 파싱과정을 갖고있는 컴포넌트에 맞춰 할당된다. 이부분이 참 애매하고 더 개선할 수 있는지 고민해봐야될것 같다..</p>\n<p>어쨌든 이런 컴포넌트들이 <code class=\"language-text\">DoubleColumnList</code>에게 보내지게되는데, 저 <code class=\"language-text\">data</code>라는 속성은 어떻게 받아오냐면</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/6-3.PNG?raw=true\" alt=\"1\">\n</div>\n<p>이런식으로 <code class=\"language-text\">children</code>객체를 디스트럭쳐링하여 직접부여해준다.</p>\n<p>사실상 이런방식을 사용하면 <code class=\"language-text\">DoubleColumnList</code>는 <code class=\"language-text\">children</code>에 따라 다른 화면을 생성하는 재사용가능한 컴포넌트가 된다.</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/6-4.PNG?raw=true\" alt=\"1\">\n</div>\n<p><code class=\"language-text\">ColumnList</code>또한, 받아오는 <code class=\"language-text\">children</code>에 따라 리스트가 다르게 생성됨.</p>\n<blockquote>\n<p>누구는 <code class=\"language-text\">hoverComponent</code>가 있고, 누구는 <code class=\"language-text\">Text</code>만 있고 등등..</p>\n</blockquote>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/7.PNG?raw=true\" alt=\"1\">\n</div>\n<p>각종 훅들 또한 별도로 관리하도록 하였다. 특정 훅들은 다른 컴포넌트에서도 재활용 될 수 있다고 생각하였는데, 그런 과정에서 수정이 필요하다면 하나의 훅만 수정하면 되기 때문!</p>\n<h2 id=\"layout과-pages\" style=\"position:relative;\"><a href=\"#layout%EA%B3%BC-pages\" aria-label=\"layout과 pages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Layout과 Pages</h2>\n<p>사실상 이 구조는 <code class=\"language-text\">Next.js</code>를 하는도중 괜찮다고 생각해서 가져왔다.</p>\n<p><code class=\"language-text\">Next.js</code>에서는 <code class=\"language-text\">pages</code>가 <code class=\"language-text\">path</code>에 따라 보여지는 화면들이기 때문에 <code class=\"language-text\">React</code>에서도 라우트별 컴포넌트를 관리하게 하였다.</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/8.PNG?raw=true\" alt=\"1\">\n</div>\n<h2 id=\"redux---flux와-mvc\" style=\"position:relative;\"><a href=\"#redux---flux%EC%99%80-mvc\" aria-label=\"redux   flux와 mvc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux - Flux와 MVC</h2>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/9.PNG?raw=true\" alt=\"1\">\n</div>\n데이터 흐름 방식 자체는 `Flux`패턴이지만, 디렉토리 구조는 `MVC`를 따라갔다.\n<p>메인 데이터가 되는 <code class=\"language-text\">model</code> 디렉토리에는 <code class=\"language-text\">Initial State</code>나, 이후 컨트롤러로 변경된 값을 <code class=\"language-text\">State</code>에 합쳐주는 역할을 하는 <code class=\"language-text\">reducer</code>와, <code class=\"language-text\">Saga</code>등의 각종 미들웨어나 <code class=\"language-text\">reducer</code>를 병합해주는 <code class=\"language-text\">store</code>가 있다.</p>\n<p><code class=\"language-text\">model</code>에 변경을 주거나 변경된 값을 가져오는 기능들은 모두 <code class=\"language-text\">controller</code>디렉토리에 넣었다.</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/9-1.PNG?raw=true\" alt=\"1\">\n</div>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/9-2.PNG?raw=true\" alt=\"1\">\n</div>\n<p>위에서 다시 정한 두번째 기준에 따라 만든것인데, <code class=\"language-text\">dispatch</code>나 <code class=\"language-text\">selector</code> 기능을 하는 값을 생성하는 훅이 혹여나 바뀔수도 있다고 생각해서, 해당 <code class=\"language-text\">dispatchers</code>폴더에서 생성하고 다른 컴포넌트에서 생성된 것만 사용하게 했다.</p>\n<p>이를 통해, 이 하나만 수정해주면 모두를 바꿀 필요가 없게된다.</p>\n<h2 id=\"react의-깜빡임이-싫어\" style=\"position:relative;\"><a href=\"#react%EC%9D%98-%EA%B9%9C%EB%B9%A1%EC%9E%84%EC%9D%B4-%EC%8B%AB%EC%96%B4\" aria-label=\"react의 깜빡임이 싫어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React의 깜빡임이 싫어</h2>\n<p>사실상 이거는 리팩토링보다는 그냥 내가 불편해서..</p>\n<p><code class=\"language-text\">state</code>에 따라서 그때마다 컴포넌트를 생성하는 방식을 사용하면 편하긴 하지만 처음 컴포넌트를 생성하게 될 때, 생성하는 시간이 있어 한번 깜빡이는? 느낌이 들더라</p>\n<blockquote>\n<p>깜빡인다기 보다는 컨텐츠가 한번 사라졌다가 다시 생성되는 느낌</p>\n</blockquote>\n<p>물론 새롭게 데이터를 받아와야 하는 구조라면 적당한 로딩화면을 노출시키고 컨텐츠를 감싸는 부모에게 최소높이를 지정해주면 쉽게 해결되긴 하지만, 이미 갖고있는 데이터에 양이 많은것도아니라 굳이 이렇게 해야할 필요가 있나 생각했다.</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/10-1.gif?raw=true\" alt=\"1\">\n</div>\n<p>따라서, 미리 생성을 해두고, <code class=\"language-text\">display</code>기능을 통해 컴포넌트 전환을 하게 하였다.</p>\n<p><code class=\"language-text\">Vue</code>의 <code class=\"language-text\">isShow</code>처럼.</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/02/26/10-2.gif?raw=true\" alt=\"1\">\n</div>\n<p>확실히 훠 얼 씬 자연스러움</p>\n<h2 id=\"느낌\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%8C\" aria-label=\"느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낌</h2>\n<p>절대로 이것이 정답이 아니다.</p>\n<p>더 좋은 방법도 있을것이고 더 효율적으로 구성할 수 도 있을것 같다.</p>\n<p>다만, 이전에 받았던 피드백의 <code class=\"language-text\">추후 기술 스택이 변경될 수 있으니 비즈니스로직과 뷰를 구성하는 컴포넌트는 분리하는것이 좋습니다.</code></p>\n<p>라는 말에는 이번 리팩토링이 이전 리팩토링보다 더 적합하다고 느껴진다.</p>\n<p>아 그리구 디자인도 좀 바꿈 </p>\n<p>찡긋 😉</p>","frontmatter":{"title":"loa-hands refactoring","date":"February 26, 2021"}}},"pageContext":{"slug":"/Study/Think/loa-hands2/","previous":{"fields":{"slug":"/Study/Next/next.js start vs export/"},"frontmatter":{"title":"Next.js start vs export","category":"Study","draft":false,"tag":"Next.js"}},"next":{"fields":{"slug":"/Study/CS/config&&env/"},"frontmatter":{"title":"config와 env","category":"Study","draft":false,"tag":"CS"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}