{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/hoisting/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"3d9bd8b6-7d52-59a2-9c93-8a68b70b9400","excerpt":"Hoisting…","html":"<h1 id=\"hoisting-호이스팅\" style=\"position:relative;\"><a href=\"#hoisting-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"hoisting 호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hoisting, 호이스팅</h1>\n<p>처음 코딩을 배울 때, 들었던 말이 있는데</p>\n<blockquote>\n<p>변수나 함수는 항상 맨 위에 쓰세요.</p>\n</blockquote>\n<p>처음에는 그 이유를 몰랐었고, 함수의 경우는 길어지게되면 너무 스크롤을 많이 내려야해서 아래에 몰아쓰기도 했다</p>\n<blockquote>\n<p>사실 이때는, 리팩토링이라는 개념도 없던시절이라 구현만 되면 장땡이라고 생각했던..</p>\n</blockquote>\n<p>그러다보면 종종 마주치는 상황이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hi</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수는 잘 출력되지만, 변수는 <code class=\"language-text\">undefined</code> 라는 값을 출력한다.<br>\n이는, 코드의 실행환경인 컨텍스트가 형성되면서 생기는 이유이다.</p>\n<h2 id=\"표현식과-선언식\" style=\"position:relative;\"><a href=\"#%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC-%EC%84%A0%EC%96%B8%EC%8B%9D\" aria-label=\"표현식과 선언식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표현식과 선언식</h2>\n<p>표현식이든 선언식이든 모두 컨텍스트가 형성될 때, 해당 스코프에서 최상위로 이동이 된다. 이렇게 올라가지는 것을 <code class=\"language-text\">hoisting</code>이라고 한다</p>\n<p>단, 중요한점은 <strong>선언</strong> 까지이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// var a = 라는 선언까지만 hoisting</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// function func(){} 라는 선언까지만</span></code></pre></div>\n<p>위에서처럼 선언 까지만 <code class=\"language-text\">hoisting</code>이 되는데, 선언식같은 경우 모든것이 <code class=\"language-text\">hoisting</code>되지만, 표현식의 경우 변수의 선언까지만 <code class=\"language-text\">hoisting</code>이 된다.</p>\n<p>따라서, <code class=\"language-text\">hoisting</code>이 진행된 후의 모습을 본다면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런식으로 진행되기 때문에, 표현식과 같은 경우 변수 차제는 <code class=\"language-text\">hoisting</code>이 되지만, 값은 그렇지 않아서 <code class=\"language-text\">undefined</code>라는 값을 반환하는 것이다.</p>\n<p>당연히, 함수의 경우도 표현식으로 작성한다면 <code class=\"language-text\">undefined</code>라는 값을 반환한다.</p>\n<h2 id=\"예외\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8\" aria-label=\"예외 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Cannot access 'b' before initialization</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Cannot access 'c' before initialization</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>값이 존재하지 않다가 아니라 변수나 상수가 형성되기 이전이라 접근할 수 없다는 에러가 발생한다.</p>\n<p>좀더 <code class=\"language-text\">const</code>와 <code class=\"language-text\">let</code>의 엄격한 특징이 이 분야에서도 나타나는것 같다.</p>","frontmatter":{"title":"Hoisting, 호이스팅","date":"July 13, 2020"}}},"pageContext":{"slug":"/Study/Think/hoisting/","previous":{"fields":{"slug":"/Study/Think/scope/"},"frontmatter":{"title":"Scope, 영역","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/Closure/"},"frontmatter":{"title":"Closure, 클로저","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}