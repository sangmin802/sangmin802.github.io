{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/eventloop/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"2da69e61-3854-5b1e-91a0-98398448a361","excerpt":"이전에 간단하게 접해봤던 에 관련되어서 테스트를 해보던 중, 잘못알고 있었거나 부족했던 점이 있어 추가적으로 정리해보려고 한다. Event Loop 자바스크립트언어는 하나의 작업영역을 가지고있는 로서, 형식의 자료구조를 갖고 있다. 각각의 작업들은 에 차곡차곡 쌓여가며, 선입 후출의 방식으로 일이 진행된다. 그러다보니 A 작업이 시작된다면 B 작업은 중간에 끼어들 수 없는 형식이다. Run-to-completion…","html":"<p>이전에 간단하게 접해봤던 <code class=\"language-text\">event loop</code>에 관련되어서 테스트를 해보던 중, 잘못알고 있었거나 부족했던 점이 있어 추가적으로 정리해보려고 한다.</p>\n<h2 id=\"event-loop\" style=\"position:relative;\"><a href=\"#event-loop\" aria-label=\"event loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Loop</h2>\n<p>자바스크립트언어는 하나의 작업영역을 가지고있는 <code class=\"language-text\">single thread</code>로서, <code class=\"language-text\">stack</code>형식의 자료구조를 갖고 있다.</p>\n<p>각각의 작업들은 <code class=\"language-text\">stack</code>에 차곡차곡 쌓여가며, 선입 후출의 방식으로 일이 진행된다.</p>\n<p>그러다보니 A 작업이 시작된다면 B 작업은 중간에 끼어들 수 없는 형식이다.</p>\n<blockquote>\n<p>Run-to-completion 이라고 함. 내 생각에는, 이러한 방식이 동기 적인 프로그래밍이 아닐까 싶음</p>\n</blockquote>\n<p>일반적인 함수와 같은 작업영역의 경우 크게 문제되지 않겠지만, 시간이 오래걸리는 작업의 경우 사용자에게 부정적인 경험을 줄 수 있다.</p>\n<blockquote>\n<p>일반적인 경우는, 이전의 <code class=\"language-text\">event loop</code> 포스트에서 다뤘으니 패스</p>\n</blockquote>\n<h3 id=\"web-api\" style=\"position:relative;\"><a href=\"#web-api\" aria-label=\"web api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web API</h3>\n<p><code class=\"language-text\">Web API</code>에는 <code class=\"language-text\">setTimeout</code>이나, <code class=\"language-text\">Promise</code>등이 포함되는 브라우저에서 제공하는 <code class=\"language-text\">API</code>를 의미한다.</p>\n<p>중요한것은, <code class=\"language-text\">setTimeout</code>이나, <code class=\"language-text\">Promise</code>, 각각의 이벤트에 바인딩되는 콜백함수들이다.</p>\n<h3 id=\"que\" style=\"position:relative;\"><a href=\"#que\" aria-label=\"que permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Que</h3>\n<p><code class=\"language-text\">Web API</code>의 비동기함수들은 자신의 콜백함수들을 종류에 따라, 각각의 <code class=\"language-text\">Que</code> 자료구조에 담기게 된다.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">MicroTasks</code> : <code class=\"language-text\">Promise</code>객체를 통한 콜백함수들이 담기는 곳</p>\n<blockquote>\n<p><code class=\"language-text\">.then/catch/finally</code> 메소드들의 콜백함수는 <code class=\"language-text\">Promise</code>가 즉시실행함수로 실행되었다 하더라도, <code class=\"language-text\">MicroTasks</code>로 넘어감</p>\n</blockquote>\n</li>\n<li><code class=\"language-text\">Tasks</code> : <code class=\"language-text\">UI</code>이벤트 혹은 <code class=\"language-text\">setTimeout</code>의 콜백함수들이 담기는 곳.</li>\n</ol>\n<p><code class=\"language-text\">Promise</code>가 관리하는 비동기작업들은, 현재 <code class=\"language-text\">stack</code>에서 진행중인 작업이 완료되자마자 실행되어야 하기 때문에 <code class=\"language-text\">Microtasks</code>가 <code class=\"language-text\">Tasks</code>보다 높은 우선순위에 있다고 한다.</p>\n<p>현재의 <code class=\"language-text\">stack</code>이 마지막 작업을 수행 완료 하였을 때 를 가정해본다면,</p>\n<ol>\n<li><code class=\"language-text\">Event Loop</code>는 <code class=\"language-text\">MicroTasks</code>의 상황을 확인함</li>\n<li><code class=\"language-text\">MicroTasks</code>에 쌓여있는 작업이 있다면, 선입선출의 방식으로 가져감</li>\n<li><code class=\"language-text\">MicroTasks</code>에 쌓여있는 작업이 없다면, <code class=\"language-text\">Tasks</code>에서 선입선출의 방식으로 가져감</li>\n</ol>\n<h3 id=\"예제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">microTaskDone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">MicroTask done</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">taskDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Task done'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Start Done'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>microTaskDone<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">taskDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main done'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 결과</span>\nStart Done\nmain done\nMicroTask done\nTask done</code></pre></div>\n<ol>\n<li><code class=\"language-text\">start</code> 스택이 쌓임</li>\n<li><code class=\"language-text\">Promise.resolve().then()</code>에서 <code class=\"language-text\">resolve</code>가 바로실행되는것 처럼 보여도, <code class=\"language-text\">resolve</code>되었을 때 이후의 <code class=\"language-text\">.then</code>의 콜백함수는 바로실행되는것이 아닌 마이크로태스크에 저장됨</li>\n<li><code class=\"language-text\">setTimeout</code>은 <code class=\"language-text\">Web API</code> 비동기 영역으로, 이후의 콜백함수는 <code class=\"language-text\">Tasks</code>에 저장된 다음, 해당 스택은 사라짐</li>\n<li><code class=\"language-text\">done</code> 스택이 쌓이고, <code class=\"language-text\">Start Done</code> 작업을 완료하고 해당 스택은 사라짐</li>\n<li><code class=\"language-text\">start</code> 스택이 사라지고, <code class=\"language-text\">main done</code> 작업을 완료함</li>\n<li><code class=\"language-text\">Stack</code>이 마지막 작업을 완료함을 감지한 <code class=\"language-text\">Event Loop</code>는 <code class=\"language-text\">MicroTasks</code>를 확인하고, <code class=\"language-text\">microTaskDone</code> 작업이 존재하여 <code class=\"language-text\">Stack</code>으로 작업을 올림.</li>\n<li><code class=\"language-text\">MicroTask done</code>작업을 완료하고, 해당 스택은 사라짐.</li>\n<li><code class=\"language-text\">Event Loop</code>는 다시한번 <code class=\"language-text\">Stack</code>이 마지막 작업이 완료됨을 감지하고 <code class=\"language-text\">MicroTasks</code>를 확인하지만, 아무런 작업도 존재하지 않아 <code class=\"language-text\">Tasks</code>의 첫번째 작업을 <code class=\"language-text\">Stack</code>으로 올림</li>\n<li><code class=\"language-text\">Task done</code> 작업을 완료하고 해당 스택은 사라짐.</li>\n</ol>\n<p>마이크로태스크와 매크로태스크에서 핵심은 <strong>스택이 비어있을 때를 기준</strong>으로 마이크로태스크가 먼저 처리되는 점.</p>\n<p>자주 사용하는 <code class=\"language-text\">fetch</code>와 같이 서버에 통신을 요청하는것은 브라우저 구조에서의 통신에서 작업을 수행하고, 자바스크립트 실행기의 큐에 넘기는것이 아닐까?</p>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<p><a href=\"https://engineering.linecorp.com/ko/blog/dont-block-the-event-loop/\">Line Engineering</a></p>","frontmatter":{"title":"Event Loop","date":"March 25, 2021"}}},"pageContext":{"slug":"/Study/Think/eventloop/","previous":{"fields":{"slug":"/Study/Think/event flow/"},"frontmatter":{"title":"Event Phase에 대한 오해 feat. capturing, bubbling","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/function pg & react hook/"},"frontmatter":{"title":"Functional Programming (===) or (!==) Function Component ?","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}