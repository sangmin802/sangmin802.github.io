{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/abortController/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"39d92c12-d7f3-559c-94dd-119c76253a11","excerpt":"…","html":"<p><code class=\"language-text\">throttling</code>이나 <code class=\"language-text\">debouncing</code>과 같이 이벤트 등이 무수히 중첩되는것으 방지하여 성능을 개선하는 기능들이 있다.</p>\n<p>하지만, 이러한 것들은 사실 <code class=\"language-text\">fetch</code>와 같은 <code class=\"language-text\">api</code>들이 실행되는것 자체를 막는 개념인것 같다.</p>\n<p>사실 위의 두 개념이 아니더라도, 별도의 로딩 레이아웃등을 통하여 사용자가 이벤트 자체를 실행시키지 못하도록 할 수도 있긴하다.</p>\n<p>하지만, <code class=\"language-text\">fetch api</code>가 이미 진행된 상태라면 어떻게 중첩되는것을 막을 수 있을까 라는 고민을 하게 되었다.</p>\n<p><code class=\"language-text\">Redux Saga</code>를 사용한다면 <code class=\"language-text\">takeLatest api</code>를 통해 이전의 요청은 무시하고 가장 최근의 요청만 수행할 수 있도록 설정할 수 있다.</p>\n<h2 id=\"abortcontroller\" style=\"position:relative;\"><a href=\"#abortcontroller\" aria-label=\"abortcontroller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AbortController</h2>\n<p>자바스크립트에서 기본적으로 제공하는 생성자이다. 해당 생성자를 통해 만들어지는 인터페이스를 활용하여 <code class=\"language-text\">request</code>의 옵션에 생성된 <code class=\"language-text\">signal</code> 인터페이스를 전달하게 된다면, <code class=\"language-text\">abort</code> 메소드로 <code class=\"language-text\">signal</code> 인터페이스를 갖고 있는 <code class=\"language-text\">fetch api</code>는 종료시킬 수 있는 기능을 갖고 있는것 같다.</p>\n<blockquote>\n<p>자세한 내용은 MDN 참조</p>\n</blockquote>\n<h2 id=\"예제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h2>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fetch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Fetch<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">fetch</code>를 실행시키는 버튼이 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> $fetch <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.fetch'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> signal <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n$fetch<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  controller<span class=\"token operator\">?.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  signal <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">.</span>signal\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'주소는 비공개'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    signal<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">fetch api</code>가 실행이 되면, 이전의 <code class=\"language-text\">fetch</code>는 중단시키도록 함. 초기에는 저장된 인터페이스가 존재하지 않아, 아무런 변화가 없다.</p>\n<p>중단 시킨 다음, 새로운 <code class=\"language-text\">AbortController</code> 인터페이스를 생성하고, 기억하도록 저장을 해 놓은 다음, <code class=\"language-text\">request</code> 옵션값으로 전달을 함.</p>\n<blockquote>\n<p>이를 <code class=\"language-text\">A</code> 라고 하겠음</p>\n</blockquote>\n<p>만약, <code class=\"language-text\">A</code>가 완료되기 전 다시 한번 클릭된다면, 저장되었던 인터페이스를 통해 <code class=\"language-text\">A</code>를 중단시키고 새로운 인터페이스를통해 <code class=\"language-text\">B</code>를 실행시킴</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/04/22/1.PNG?raw=true\" alt=\"abortcontroller\">\n</div>\n<p>두번 빠르게 클릭했을 때, 처음에는 <code class=\"language-text\">catch</code> 구문에서 <code class=\"language-text\">abort</code> 되었다는 에러를 확인할 수 있고, 두번째는 정상적으로 진행됨을 알 수 있다.</p>\n<blockquote>\n<p><code class=\"language-text\">json</code>이 아니라 <code class=\"language-text\">text</code>로 받아야하는 주소였기 때문에, 위처럼 나온것임 원래는 잘 나옴</p>\n</blockquote>\n<p>기존의 방법으로 사용자의 이벤트를 사전에 막아서 성능상에 문제가 발생하는것을 막을 수 있지만, 이런 방법도 있음을 알 수 있었다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/API/AbortController\">AbortController - MDN</a></li>\n</ul>","frontmatter":{"title":"AbortController","date":"April 21, 2021"}}},"pageContext":{"slug":"/Study/Think/abortController/","previous":{"fields":{"slug":"/Diary/2021-dev-matching/"},"frontmatter":{"title":"2021 Dev-Matching: 웹 프론트엔드 개발자(상반기) 후기","category":"Diary","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/component composition/"},"frontmatter":{"title":"Component Composition","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}