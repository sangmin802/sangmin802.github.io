{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/loa-hands3/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"9fa88906-d24d-568d-9a9b-f0d785c147b2","excerpt":"…","html":"<p>이번에 테스트코드를 배우게 되면서, 기존 프로젝트인 <code class=\"language-text\">loa-hands</code>에도 테스트코드를 적용해보려고 했다.</p>\n<p>또한, 이전에 지적받았던 사항 또한 수정해보려고 한다.</p>\n<blockquote>\n<p><code class=\"language-text\">sass</code>와 <code class=\"language-text\">styled-components</code>를 같이쓰는것은 성능상 좋지 않습니다.</p>\n</blockquote>\n<p>그간, 고민을 한 끝에 <code class=\"language-text\">CSS-in-JS</code> 방식을 사용하려고 한다.</p>\n<ol>\n<li>컴포넌트를 최소단위의 부품으로 사용하고자 하는 최신 프레임워크를 생각해보았을 때, 해당 방식이 더 컨셉을 해치지 않는다고 판단함.</li>\n<li>속성이 변경되면서 새롭게 렌더링을 하는 <code class=\"language-text\">React</code>를 보았을 때, 스타일 또한 변경되는 속성에 따라 쉽게 변경할 수 있다는점이 매력있음.</li>\n<li>클래스명에대한 부담이 없음.</li>\n<li><code class=\"language-text\">styled-components</code>또한, <code class=\"language-text\">scss</code>의 기능들을 사용할 수 있음.</li>\n<li><code class=\"language-text\">themeProvider</code>를 통해, 공통적으로 사용하는 스타일이나 ,동적 스타일을 하나의 <code class=\"language-text\">theme</code>속성으로 관리하여 사용할 수 있음.</li>\n</ol>\n<h2 id=\"🥞-스타일-규칙\" style=\"position:relative;\"><a href=\"#%F0%9F%A5%9E-%EC%8A%A4%ED%83%80%EC%9D%BC-%EA%B7%9C%EC%B9%99\" aria-label=\"🥞 스타일 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥞 스타일 규칙</h2>\n<ol>\n<li>\n<p>해당 컴포넌트의 위치를 조정하는 스타일은 상위컴포넌트에서만 정해줄 수 있도록 할 것이다.</p>\n<blockquote>\n<p><code class=\"language-text\">border</code>, <code class=\"language-text\">padding</code>등과 같이 컨텐츠 내부의 스타일은 제외</p>\n</blockquote>\n<ul>\n<li>해당 컴포넌트를 다시 사용하였을 때, 이전의 <code class=\"language-text\">margin</code>과 같은 외부에 영향을 주는 스타일이 없도록 하기 위해서</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">style</code> 파일 내에 <code class=\"language-text\">styled-components</code> 모듈을 받아와 생성한것을 본 파일에서 끌어다 사용한다.</p>\n<ul>\n<li>해당 컴포넌트 내에서 공통적인 스타일을 사용하는 부분이 있다면, 속성으로 <code class=\"language-text\">type</code>을 받아와 추가적인 스타일은 객체에서 <code class=\"language-text\">css</code> 모듈로 생성된 값들을 끌어온다.</li>\n<li>프로젝트 내에서 공통적으로 사용하는 속성이나 속성을 계산하는 메소드는 <code class=\"language-text\">themProvider</code>로 제공하도록 한다.</li>\n</ul>\n</li>\n</ol>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/06/09/1.PNG?raw=true\" alt=\"1\">\n</div>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/06/09/2.PNG?raw=true\" alt=\"2\">\n</div>\n<ol start=\"3\">\n<li><code class=\"language-text\">globalStyle</code>을 만들었었는데, <code class=\"language-text\">font-family</code>과 관련된 속성에 있어서, 컴포넌트가 렌더링 될 때마다 계속해서 <code class=\"language-text\">url</code>을 받아오는것 때문에 깜빡임?이 있었다. 이러한 점 때문에, 별도로 받아와야 하는 <code class=\"language-text\">font-family</code>와 같은 경우는 그냥 일반 스타일시트를 통해 받아오도록 하였다.</li>\n</ol>\n<h2 id=\"🧇-최소단위의-컴포넌트\" style=\"position:relative;\"><a href=\"#%F0%9F%A7%87-%EC%B5%9C%EC%86%8C%EB%8B%A8%EC%9C%84%EC%9D%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"🧇 최소단위의 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧇 최소단위의 컴포넌트</h2>\n<p>이것 또한 고민을 했왔었는데, <code class=\"language-text\">Text</code>, <code class=\"language-text\">Input</code>, <code class=\"language-text\">Button</code>과 같은 최소단위의 컴포넌트를 만들어 사용하도록 했다. 당연히 해당 컴포넌트도 기본적인 스타일만 갖고있을 뿐, 위치와 관련된 속성들은 상위에서 할당된다.</p>\n<h3 id=\"-속성전달에대한-고민\" style=\"position:relative;\"><a href=\"#-%EC%86%8D%EC%84%B1%EC%A0%84%EB%8B%AC%EC%97%90%EB%8C%80%ED%95%9C-%EA%B3%A0%EB%AF%BC\" aria-label=\" 속성전달에대한 고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧀 속성전달에대한 고민</h3>\n<p>이러한 경우, 해당 컴포넌트에 많은 명칭의 속성들이 전달될 수 있다. 이러할 경우를 위해, 해당 <code class=\"language-text\">Element</code>가 기본적으로 갖고있는 속성들을 확장시킨 새로운 <code class=\"language-text\">interface</code>를 만들어주었다.</p>\n<p>사용자 이벤트나, <code class=\"language-text\">Input</code>의 경우 <code class=\"language-text\">type</code>, <code class=\"language-text\">placeholder</code>와 같은 기본속성들도 따로 지정해줄 필요없이 자연스럽게 전달될 수 있다.</p>\n<p>커스텀한 속성들만 추가로 기입해주면 된다.</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/06/09/3.PNG?raw=true\" alt=\"3\">\n</div>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/06/09/4.PNG?raw=true\" alt=\"4\">\n</div>\n<h2 id=\"-이후-작업\" style=\"position:relative;\"><a href=\"#-%EC%9D%B4%ED%9B%84-%EC%9E%91%EC%97%85\" aria-label=\" 이후 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍗 이후 작업</h2>\n<p>스타일 및, 컴포넌트 구조에 있어서는 어느정도 완료되었다. 이후, 각각의 컴포넌트의 테스트코드 작성을 할 생각이다.</p>\n<h3 id=\"-테스트코드-의문\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%9D%98%EB%AC%B8\" aria-label=\" 테스트코드 의문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍖 테스트코드 의문</h3>\n<p>실은 이전에 몇몇 컴포넌트의 테스트코드를 작성했었다. 그러던중 의문이 생겼는데,</p>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/06/09/5.PNG?raw=true\" alt=\"5\">\n</div>\n<p>받아온 속성에 대해서 <code class=\"language-text\">UI</code>와 관련된 어떠한 로직을 통해 새로운 값을 렌더링한다면, 테스트할 가치가 있겠지만 있는 그대로 렌더링하는 경우에는 굳이 테스트를 할 필요가 있나 라는 의문이 든다.</p>\n<p>어쩌면 이러한 컴포넌트가 잘 렌더링 되는지를 확인하기 위해서는 <code class=\"language-text\">StoryBook</code>을 사용해야되는게 아닐까..?</p>\n<h2 id=\"🥩-결론\" style=\"position:relative;\"><a href=\"#%F0%9F%A5%A9-%EA%B2%B0%EB%A1%A0\" aria-label=\"🥩 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥩 결론</h2>\n<p>지금까지 한 작업, 및 앞으로 계획중인 작업을 본다면 점점 보이는게 있다.</p>\n<p><code class=\"language-text\">Atomic Pattern</code>과 유사하게 컴포넌트가 디자인되는 느낌이다.</p>","frontmatter":{"title":"컴포넌트 구조, 스타일 기법에 대한 고민 feat loa-hands","date":"June 09, 2021"}}},"pageContext":{"slug":"/Study/Think/loa-hands3/","previous":{"fields":{"slug":"/Study/TestCode/jest && react-test-library/"},"frontmatter":{"title":"Jest, React-Testing-Library","category":"Study","draft":false,"tag":"TestCode"}},"next":{"fields":{"slug":"/Study/TestCode/loa-hands4/"},"frontmatter":{"title":"컴포넌트 테스트코드","category":"Study","draft":false,"tag":"TestCode"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}