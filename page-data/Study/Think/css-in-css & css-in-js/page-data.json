{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/css-in-css & css-in-js/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"79bfcf92-c02e-5fb2-9acb-960129213fa4","excerpt":"어제 A…","html":"<p>어제 A 기업의 인터뷰를 진행중 코드리뷰를 하면서 한가지 예상못했던 문제점을 지적받았다.</p>\n<blockquote>\n<p><code class=\"language-text\">styled-component</code>와 <code class=\"language-text\">sass</code>를 함께 사용하면 성능 저하를 유발할 수 있습니다.</p>\n</blockquote>\n<p><code class=\"language-text\">background-image</code>를 스타일시트에서 적용하거나, 동적 변수에 인한 스타일 변화가 있을 때에는 <code class=\"language-text\">CSS-in-JS</code> 방식인 <code class=\"language-text\">styled-component</code>를 사용하고, 그 외의 기본이 되는 스타일 들은 모두 <code class=\"language-text\">CSS-in-CSS</code>방식을 통해 두가지를 함께 사용해왔다.</p>\n<blockquote>\n<p>이 방법이 성능 저하를 유발할 수 있는 문제였다니..</p>\n</blockquote>\n<p>이런 문제를 지적받고, 열심히 구글링을 해 본 결과, 직접적인 답변은 없었지만 어느정도 이유를 예측할 수 있는 글을 발견하였다.</p>\n<p><code class=\"language-text\">styled-component</code>와 <code class=\"language-text\">sass</code> 모두 더 나은 스타일링을 위해 기본 프로젝트에 새롭게 받아야 하는 모듈들이다. 똑같은 작업을 하기 위해 두가지 각기 다른 모듈을 받는다는것 자체가 불필요한 소비 이므로 하나를 사용할 때 보다는 성능저하를 유발할 수 있다는게 맞는것 같다.</p>\n<blockquote>\n<p>즉, 클라이언트가 초기 접속할 때 불필요한 라이브러리로 더 많은 번들링 시간을 갖게된다는것 같음</p>\n</blockquote>\n<p>그때 질문 이후, 면접관님이</p>\n<blockquote>\n<p>만약, 둘중 하나만 선택한다면 어떤것을 선택하시겠나요?</p>\n</blockquote>\n<p>라는 질문을 하셨지만, 각각의 장점이 너무 명확해서 대답을 못하였다.. 정말 못고르겠다고..</p>\n<p>따라서 선택을 하는데 도움이 되도록 <code class=\"language-text\">CSS-in-JS</code>의 장단점을 알아보려고 한다.</p>\n<h2 id=\"css-in-js\" style=\"position:relative;\"><a href=\"#css-in-js\" aria-label=\"css in js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS-in-JS</h2>\n<p>가장 많이 사용되고있는 <code class=\"language-text\">styled-components</code>의 기반이 되는 기법이다.</p>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ol>\n<li><code class=\"language-text\">build time</code> 때 고유한 값으로 <code class=\"language-text\">class</code> 명이 자동으로 지정된다.</li>\n<li>스타일이 해당 컴포넌트 단위에서 형성되기 때문에, <code class=\"language-text\">css</code> 파일간 의존성이 사라진다.</li>\n<li>동적인 속성에 따른 스타일변경이 용이하다.</li>\n<li>컴포넌트 내부에 작성되는 스타일이기 때문에, 사용하는 모듈의 사라지지않는 한 해당 파일 하나로 충분히 재활용이 가능하다.</li>\n<li>컴포넌트별로 구분되어 있기 때문에, 스타일에대한 유지보수가 용이하다.</li>\n</ol>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ol>\n<li>아무래도 새로운 모듈을 받아서 사용하는것이기 때문에, 번들 사이즈가 커져서 비교적 늦는다고 한다.</li>\n<li>기존 <code class=\"language-text\">CSS-in-CSS</code>의 경우 번들링된 하나의 스타일파일을 파싱한 뒤, 사용하는것이라 단 한번만 진행되지만, <code class=\"language-text\">styled-components</code>의 경우 각각의 컴포넌트가 형성될 때마다 <code class=\"language-text\">CSS</code> 코드를 읽어서 파싱하기 때문에 비교적 늦어진다고 한다.</li>\n<li><code class=\"language-text\">class</code>명이 자동으로 생성이 되면서 빌드 또는 렌더링간 캐시 문제가 발생할 수 있다고 한다.</li>\n<li>컴포넌트 내부에 스타일이 있다는 점에서 재활용성이 뛰어난건 사실있지만, 포괄적이고 로직이 내부에 포함되어있기 때문에 디버깅이 좀 더 어렵다.</li>\n</ol>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p><code class=\"language-text\">CSS-in-JS</code>를 통해 편리하고, 참신한 방법으르 스타일링을 하는 개발자도 있고, <code class=\"language-text\">CSS-in-CSS</code>의 기본방식을 통해 안정성과 보편적인 특성을 선호하는 개발자도 있는것 같았다. 두가지중 한가지를 선택하기보단 상황에 맞게 잘 사용하는것이 좋아보인다.</p>\n<h2 id=\"이후의-질문\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%9B%84%EC%9D%98-%EC%A7%88%EB%AC%B8\" aria-label=\"이후의 질문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이후의 질문</h2>\n<p>특징을 알아보기위해 첫 질문만 예시를 들었지만, 사실 뒤에 꼬리질문이 있었다.</p>\n<blockquote>\n<p>만약 <code class=\"language-text\">sass</code>만을 사용하게 된다면, <code class=\"language-text\">background-image</code>와 같은 경우는 어떻게 처리할건가요?</p>\n</blockquote>\n<ul>\n<li>서버에 등록된 상대경로(<code class=\"language-text\">git</code>)를 통해 지정한다.</li>\n<li>\n<p>인라인 스타일을 통해 <code class=\"language-text\">img</code> 태그의 <code class=\"language-text\">src</code>와 유사하게 <code class=\"language-text\">process.env.PUBLIC_URL</code>+<code class=\"language-text\">public</code> 디렉토리에 접근하여 이미지를 사용한다.</p>\n<blockquote>\n<p>아래 방법이 가장 많이 추천되는 방법인듯 함..</p>\n</blockquote>\n</li>\n</ul>\n<p>스타일시트에서는 <code class=\"language-text\">public</code> 디렉토리에 접근을 할 수가 없는데, 그 이유로는 <code class=\"language-text\">webpack</code> 자체가 <code class=\"language-text\">src</code>를 기점으로 작동되기 떄문일듯 하다.</p>\n<p>실제로, <code class=\"language-text\">eject</code>를 해보았을 때 <code class=\"language-text\">src/index.js</code>가 시작의 기점이되도록 설정이 되어있었고, 스타일시트에서 <code class=\"language-text\">background-image</code> 속성의 경로가 <code class=\"language-text\">src</code> 외부로 넘어가게 되는 순간 기준을 넘어갔다는 에러가 출력되었다.</p>\n<p>이런점 때문에, <code class=\"language-text\">styled-components</code>를 같이 사용했었음..</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://blog.logrocket.com/moving-from-scss-to-styled-components-advantages-and-caveats/\">styled-components? SCSS?</a></li>\n<li><a href=\"https://blueshw.github.io/2020/09/14/why-css-in-css/\">CSS-in-JS의 장점 및 단점</a></li>\n</ul>","frontmatter":{"title":"CSS-in-CSS, CSS-in-JS","date":"April 28, 2021"}}},"pageContext":{"slug":"/Study/Think/css-in-css & css-in-js/","previous":{"fields":{"slug":"/Study/Think/component composition/"},"frontmatter":{"title":"Component Composition","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/var vs let tdz/"},"frontmatter":{"title":"var vs let의 차이와 기준이 되는 TDZ","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}