{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/directory destructure/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"0352698f-e2c9-51ca-872a-cd1b0a31469e","excerpt":"로 개발을 시작하면 기본적인 디렉토리들을 먼저 생성해주고있다.   : 컴포넌트 관리  : 훅 관리  : 상수값 관리  : header, footer등의 공통적인 UI를 보유한 하나의 컴포넌트(대체로 App을 여기서 관리했음)  : 페이지 관리 처음에는 하나의 컴포넌트로 시작을 하더라도 많은 이유로 컴포넌트를 분리해내게 된다. 재사용되는 UI를 컴포넌트로 분리하자 와 같은 을 독립적으로 수행시키고자 하는 경우, 컴포넌트를 분리하자 응집도를 위해 하나의 목표를 하는 로직, UI…","html":"<p><code class=\"language-text\">React</code>로 개발을 시작하면 기본적인 디렉토리들을 먼저 생성해주고있다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">src</code></p>\n<ul>\n<li><code class=\"language-text\">components</code> : 컴포넌트 관리</li>\n<li><code class=\"language-text\">hooks</code> : 훅 관리</li>\n<li><code class=\"language-text\">constants</code> : 상수값 관리</li>\n<li><code class=\"language-text\">layout</code> : header, footer등의 공통적인 UI를 보유한 하나의 컴포넌트(대체로 App을 여기서 관리했음)</li>\n<li><code class=\"language-text\">pages</code> : 페이지 관리</li>\n</ul>\n</li>\n</ul>\n<p>처음에는 하나의 컴포넌트로 시작을 하더라도 많은 이유로 컴포넌트를 분리해내게 된다.</p>\n<ol>\n<li>재사용되는 UI를 컴포넌트로 분리하자</li>\n<li><code class=\"language-text\">useEffect</code>와 같은 <code class=\"language-text\">lifeCycle</code>을 독립적으로 수행시키고자 하는 경우, 컴포넌트를 분리하자</li>\n<li>응집도를 위해 하나의 목표를 하는 로직, UI를 하나의 컴포넌트로 분리하고, 적절한 컴포넌트 네이밍으로 용도를 알 수 있도록 추상화 하자.</li>\n<li>그냥, 너무 컴포넌트가 복잡하니깐 잘게 나누자?</li>\n</ol>\n<p>이렇게 여러 이유로 인해 생성된 컴포넌트들이 모두 하나의 <code class=\"language-text\">components</code>디렉토리에 위치하게 되었다.</p>\n<p>어느순간 <code class=\"language-text\">components</code>디렉토리를 보니 뭔가 잘못되었다는 생각을 하게 되었다.</p>\n<h2 id=\"다양한-목적으로-추상화된-컴포넌트\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%96%91%ED%95%9C-%EB%AA%A9%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%B6%94%EC%83%81%ED%99%94%EB%90%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"다양한 목적으로 추상화된 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다양한 목적으로 추상화된 컴포넌트</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SectionContainerProps</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SectionContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  children<span class=\"token punctuation\">,</span>\n  title<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>props\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PropsWithChildren<span class=\"token operator\">&lt;</span>SectionContainerProps<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>Section <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>Section<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>SectionContainer<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">title</code>과, <code class=\"language-text\">children</code>을 받아와 하나의 <code class=\"language-text\">section</code>을 구성해주는 컴포넌트이다.</p>\n<p>생성되는 컴포넌트의 위치값, 크기 등은 유연하게 설정될 수 있도록 상위에서 생성된 스타일을 <code class=\"language-text\">...props</code>로 받아와 사용한다.</p>\n<p><code class=\"language-text\">title</code> 또한, 상황에 따라 다른 스타일을 가질 수 있기 때문에, 외부에서 받아오도록 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> BasicInfoLabel <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>SectionContainer<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  align-items: center;\n  height: 30px;\n  overflow: hidden;\n  margin-top: 0.5rem;\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>위와 같이, 해당 컴포넌트를 사용하는 외부 컴포넌트에 결정권을 넘겨주었다.</p>\n<p>따라서, 실제로 유연한 컴포넌트가 결정하는 것은, 정렬여부와 같이 여러곳에서 중복되어 사용되는 스타일만을 결정해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ListProps</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  item<span class=\"token operator\">:</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ReactElement<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span> MemoExoticComponent<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ReactElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  dispatcher<span class=\"token operator\">?</span><span class=\"token operator\">:</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> item<span class=\"token operator\">:</span> Item<span class=\"token punctuation\">,</span> dispatcher<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ListProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>List <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Item data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>id <span class=\"token operator\">??</span> index<span class=\"token punctuation\">}</span> dispatcher<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dispatcher<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>List<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">React</code>에서 자식 엘리먼트들을 생성하는 방법인 <code class=\"language-text\">.map</code>이 특별한 이유가 없다면 비슷한 구조로 생성되는것 같아서, 재사용가능한 컴포넌트로 분리했다.</p>\n<ul>\n<li><code class=\"language-text\">Item</code> : 생성되는 엘리먼트들을 지칭</li>\n<li><code class=\"language-text\">data</code> : 생성되는 엘리먼들에 전달될 속성인 <code class=\"language-text\">data</code></li>\n<li><code class=\"language-text\">dispatcher</code> : 생성되는 엘리먼트 내부에서 호출될 <code class=\"language-text\">dispatcher</code>. 있을수도, 없을수도 있기에 <code class=\"language-text\">nullable</code>한 속성이다.</li>\n</ul>\n<p>이 3가지 혹은, 2가지 핵심적인 속성들만을 외부에서 파악할 수 있고, 구현하는데 필요한 세부적인 로직들은 내부로 숨겨서 하나의 <code class=\"language-text\">List</code> 컴포넌트로 추상화 하였다.</p>\n<p>위의 <code class=\"language-text\">SectionContainer</code>와 <code class=\"language-text\">List</code> 컴포넌트 두가지 모두, 범용성 있는 네이밍과, 여러가지 중요한 요소들을 외부에서부터 결정될 수 있도록 하여, 최대한 유연한 컴포넌트가 될 수 있도록 추상화햐였다.</p>\n<p>이런 컴포넌트들 사이에 몇몇 이질감있는 컴포넌트들이 존재했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">FetchUserInfoProps</span> <span class=\"token punctuation\">{</span>\n  match<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FetchUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  match<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> FetchUserInfoProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>userKey<span class=\"token punctuation\">,</span> userCollectionKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'userInfo'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'userCollection'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n  <span class=\"token function\">useCancelQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>userCollectionKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ErrorBoundary errorFallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ErrorFallback<span class=\"token punctuation\">}</span> keys<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Dialog rerender<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>userKey<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>UserInfo userKey<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>userKey<span class=\"token punctuation\">}</span> userCollectionKey<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>userCollectionKey<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Dialog<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ErrorBoundary<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> FetchUserInfo</code></pre></div>\n<p><code class=\"language-text\">UserInfo</code>는 <code class=\"language-text\">React Router</code>의 <code class=\"language-text\">pages</code>로서 하나의 도메인으로 판단되어 <code class=\"language-text\">pages/userInfo</code> 디렉토리에 위치하고 있다.</p>\n<p>외부 데이터를 받아오는 비동기 로직을 <code class=\"language-text\">React-Query</code>를 통해 구현하였는데, <code class=\"language-text\">React-Query</code>와 관련된 에러핸들리이나, 캔슬링 등은 <code class=\"language-text\">UserInfo</code>내부에서 <code class=\"language-text\">userData</code>를 <code class=\"language-text\">UI</code>로 표현하는것과는 전혀 관계가 없기 때문에, 별도의 컴포넌트로 분리를 해주었다.</p>\n<blockquote>\n<p><code class=\"language-text\">React-Query</code>의 에러 핸들링을 위해 외부에서 <code class=\"language-text\">ErrorBoundary</code>를 사용해줘야 하기도 함.</p>\n</blockquote>\n<p>그 외, <code class=\"language-text\">Dialog</code>같이 <code class=\"language-text\">viewPort</code> 고정이나, <code class=\"language-text\">dialog</code>상태값, <code class=\"language-text\">UI</code>등을 관리하는 컴포넌트의 영향권 내부에 위치하도록 되어있다.</p>\n<h2 id=\"잡동사니가된-components-디렉토리\" style=\"position:relative;\"><a href=\"#%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88%EA%B0%80%EB%90%9C-components-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC\" aria-label=\"잡동사니가된 components 디렉토리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>잡동사니가된 components 디렉토리</h2>\n<p>위와 같이 생성된 컴포넌트들이 <code class=\"language-text\">components</code>디렉토리에 저장되면서 점점 이상해지기 시작했다.</p>\n<p>재사용가능하고 유연한 컴포넌트들만 있을것이라고 생각했던 디렉토리에 특정 <code class=\"language-text\">pages</code>만을 위한 컴포넌트들이 자리잡기 시작했고, 빠르게 혼잡해지기 시작했다.</p>\n<p>정말 필요한 컴포넌트들을 빠르게 찾는것이 어려워졌다.</p>\n<p>또한, 특정 <code class=\"language-text\">pages</code>에서 분리된 컴포넌트들을 찾기 위해 다른 <code class=\"language-text\">pages</code>들에서 사용되는 컴포넌트, 재사용가능한 컴포넌트들에서 찾아야하는것이 문제가되기 시작했다.</p>\n<h2 id=\"컴포넌트의-용도에-따라-재배치하기\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%9A%A9%EB%8F%84%EC%97%90-%EB%94%B0%EB%9D%BC-%EC%9E%AC%EB%B0%B0%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"컴포넌트의 용도에 따라 재배치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트의 용도에 따라 재배치하기</h2>\n<p>이전에는 그냥 컴포넌트라는 이유, 용도만으로 <code class=\"language-text\">components</code>디렉토리에 저장하였지만, 다른 방법이 필요하다.</p>\n<ol>\n<li>특정 <code class=\"language-text\">pages</code>에서만 사용되는 분리된 컴포넌트는 그 하위에서 바로관리하자.</li>\n<li>모든 <code class=\"language-text\">pages</code>, 모든 컴포넌트에서 재사용 가능할 수 있도록 유연하게 설계된 컴포넌트들만 <code class=\"language-text\">components</code>디렉토리에서 관리하자.</li>\n</ol>\n<p>최종적으로 <code class=\"language-text\">components</code> 디렉토리에 남게 된 컴포넌트들이다.</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/11/04/1.PNG?raw=true\" alt=\"components\">\n</div>\n<p>그 외, <code class=\"language-text\">pages</code>와 강력하게 연결되어있는 컴포넌트들은 아래와 같이 관리해주기로 했다.</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/11/04/2.PNG?raw=true\" alt=\"components\">\n</div>\n<h2 id=\"컴포넌트를-분리하는-약속\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EB%8A%94-%EC%95%BD%EC%86%8D\" aria-label=\"컴포넌트를 분리하는 약속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트를 분리하는 약속</h2>\n<p>컴포넌트를 관리하는 디렉토리를 확실하게 구분하게 되면서, 컴포넌트의 용도, 목적에 대해 확실히 할 필요가 있어졌다.</p>\n<ol>\n<li>\n<p>재사용 가능하도록 설계할 컴포넌트의 경우에는, 최소한의 고유한 코드를 제외하고 변동될 가능성이 높은 요소들은 외부에서 정해주어서 유연한 상태를 유지하도록 한다.</p>\n<ul>\n<li>재사용 가능한 컴포넌트에서는 <code class=\"language-text\">globalStyle</code>에 접근조차 할 수 없도록 하였다.</li>\n<li>비즈니스로직과는 전혀 관계가 없도록 하였고, 해당 파일 내부에서 특별한 모듈을 사용하는 경우도 제거하였다.</li>\n</ul>\n</li>\n<li>\n<p>단순하게 <code class=\"language-text\">UI</code>가 길어진다는 이유로 컴포넌트를 분리하여 불필요한 속성 전달, 파일 이동등을 강요하는 상황을 만들지 말자.</p>\n<blockquote>\n<p><code class=\"language-text\">UI</code>의 상태값을 관리하는 로직을 <code class=\"language-text\">hook</code>등을 통해 추상화 하는것을 먼저 고려해보자</p>\n</blockquote>\n</li>\n</ol>\n<p>컴포넌트를 목적에 따라 추상화 하는 내용은 아래의 링크에서 너무 잘 설명해주셔서 많은 도움이 되었다.</p>\n<ul>\n<li><a href=\"https://jbee.io/web/components-should-be-flexible/\">jbee - 변경에 유연한 컴포넌트</a></li>\n</ul>\n<h2 id=\"고민\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EB%AF%BC\" aria-label=\"고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고민</h2>\n<h3 id=\"추상화-단계의-통일\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94-%EB%8B%A8%EA%B3%84%EC%9D%98-%ED%86%B5%EC%9D%BC\" aria-label=\"추상화 단계의 통일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화 단계의 통일</h3>\n<p>이전에, 하나의 컴포넌트 내부에서 추상화단계를 통일해주는것이 좋다는 글을 보았고, 정리를 했었다.</p>\n<p>그렇다면, <code class=\"language-text\">tab menu</code>와 같이 중간단계의 추상화를 갖게되는 로직을 별도로 분리하는것이 좋을까?</p>\n<p><code class=\"language-text\">tab menu</code>와 같이 특정 상태값에 따라 다른 <code class=\"language-text\">UI</code>를 보여주는 로직을 별도의 컴포넌트로 분리해서 관리하는 방법도 고려해볼 수 있을것 같다.</p>\n<blockquote>\n<p>해당 컴포넌트를 만들어보긴 했는데, 실제로 사용하는데 있어서는 조금 고민이 된다..</p>\n</blockquote>\n<h3 id=\"추상화와-유연한-컴포넌트\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94%EC%99%80-%EC%9C%A0%EC%97%B0%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"추상화와 유연한 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화와 유연한 컴포넌트</h3>\n<p>디테일한 로직, 구현과정은 숨기고 핵심적인 요소들만 외부에 표현하여 마치 선언형의 프로그래밍을 하도록 도와주는 추상화 작업의 결과물이 절대적으로 모두 재사용 가능하다는것은 아닐것 같다는 생각이 든다.</p>\n<p>그렇다면 정말, 정말로 문뜩 든 생각이지만 반복적으로 사용되는 코드들을 분리하여 하나의 핵심적인 네이밍으로 여러곳에서 재활용할 수 있도록 유연한 컴포넌트로 분리해 만드는것은 추상화 작업과 동일선상이 아니라, 추상화 작업 중 하나의 방법 아닐까..?</p>\n<p>당연히 정답이 아닌 오로지 개인적인 생각일 뿐이다..</p>","frontmatter":{"title":"⚛ 컴포넌트의 역할과 디렉토리 구조","date":"November 04, 2021"}}},"pageContext":{"slug":"/Study/Think/directory destructure/","previous":{"fields":{"slug":"/Study/Think/state batch update/"},"frontmatter":{"title":"⚛ React state batch updating 이슈","category":"Study","draft":false,"tag":"Think"}},"next":null}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}