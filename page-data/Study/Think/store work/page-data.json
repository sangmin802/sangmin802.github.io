{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/store work/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"a0e3f66d-0c4e-500b-8347-3eb9a9bd5ed3","excerpt":"…","html":"<p>얼마전, 일방적인 응답만 가능한 <code class=\"language-text\">Http</code>와 다르게 서버에서 능동적으로 클라이언트에게 응답할 수 있는 <code class=\"language-text\">WebSocket</code>을 알게되었었다.</p>\n<p>그리고, <code class=\"language-text\">Node.js</code>기반으로 된 <code class=\"language-text\">socket.io</code>를 사용하여 채팅앱을 만들어보았다.</p>\n<h2 id=\"-구성\" style=\"position:relative;\"><a href=\"#-%EA%B5%AC%EC%84%B1\" aria-label=\" 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍏 구성</h2>\n<h3 id=\"로그인\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8\" aria-label=\"로그인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인</h3>\n<ul>\n<li>\n<p>로그인에 있어서는 저장되지 않기 때문에, 종료 시 모든 정보를 제거할 필요가 있었다</p>\n<blockquote>\n<p>추후 이 기능에서 발생했던 문제가 이 후기의 중점이다.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"귓속말\" style=\"position:relative;\"><a href=\"#%EA%B7%93%EC%86%8D%EB%A7%90\" aria-label=\"귓속말 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>귓속말</h3>\n<ul>\n<li>보라색으로 표시</li>\n<li>해당 글 혹은, 유저 클릭 시 귓속말 사용 가능</li>\n<li>확인하지 않은 귓속말의 경우 유저 옆에 숫자로 카운팅 기능</li>\n</ul>\n<h3 id=\"전체채팅\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4%EC%B1%84%ED%8C%85\" aria-label=\"전체채팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체채팅</h3>\n<ul>\n<li>방 입장시에는 전체채팅 이벤트 감지 off</li>\n</ul>\n<h3 id=\"채팅-방\" style=\"position:relative;\"><a href=\"#%EC%B1%84%ED%8C%85-%EB%B0%A9\" aria-label=\"채팅 방 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>채팅 방</h3>\n<ul>\n<li>해당 방에 <code class=\"language-text\">join</code> 된 <code class=\"language-text\">Socket instance</code> 만 메시지 발신 수신 가능</li>\n<li>카카오톡과 유사한 방식</li>\n<li>방 나가기 시 해당 방에대한 <code class=\"language-text\">leave</code></li>\n<li>로비로 이동 시, <code class=\"language-text\">join</code>된 상태 유지</li>\n<li><code class=\"language-text\">join</code>된 상태로 로비에 위치해 있다면, 해당 채팅 방에 새로운 메시지가 입력 될 때 우측에 숫자로 카운팅 기능</li>\n<li>퇴장 시 혼자있는 방이라면 해당 방 삭제</li>\n</ul>\n<h3 id=\"로그아웃\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83\" aria-label=\"로그아웃 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그아웃</h3>\n<ul>\n<li><code class=\"language-text\">app</code> 컴포넌트 언마운트 시 모든 <code class=\"language-text\">socket</code> 이벤트 종료</li>\n<li>다른 유저에게 종료 알림</li>\n</ul>\n<p>자세한 기능 체크리스트는 해당 깃 리포지토리의 Readme에서 확인 가능하다.</p>\n<ul>\n<li><a href=\"https://github.com/sangmin802/web-chat\">Web-Chat Readme</a></li>\n</ul>\n<p>아무래도 별도의 서버가 필요했기 때문에, <code class=\"language-text\">heroku</code>의 무료 서버를 사용했다.</p>\n<h2 id=\"-문제-발생\" style=\"position:relative;\"><a href=\"#-%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D\" aria-label=\" 문제 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍎 문제 발생</h2>\n<p>전반적인 진행 과정에서는 큰 문제가 없었다.</p>\n<p>하지만, 특정 유저가 종료하는 시점에 아래의 조건에 해당될 경우 예상하지 않은 에러가 발생했다.</p>\n<ol>\n<li>종료한 유저만 <code class=\"language-text\">join</code>되어있는 여러개의 방이 있는상태에서 방을 일괄 제거할 때.</li>\n</ol>\n<p>서버에서 <code class=\"language-text\">disconnect</code> 바로 전에 실행되어 미들웨어와 비슷한 역할을 하는 <code class=\"language-text\">disconnecting</code> 에서 위 조건의 방들을 모두 지워주도록 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 접속 종료 미들웨어</span>\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disconnecting'</span><span class=\"token punctuation\">,</span> reason <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> joinedRooms <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>socket<span class=\"token punctuation\">.</span>rooms<span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 가입되어있는 방들에게 leaveRoom</span>\n  joinedRooms<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>roomID <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>userID <span class=\"token operator\">===</span> roomID<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token function\">leaveRoom</span><span class=\"token punctuation\">(</span>roomID<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  socket<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user disconnected'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    userID<span class=\"token operator\">:</span> socket<span class=\"token punctuation\">.</span>userID<span class=\"token punctuation\">,</span>\n    userName<span class=\"token operator\">:</span> socket<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  userStore<span class=\"token punctuation\">.</span><span class=\"token function\">removeUser</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>userID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">leaveRoom</span><span class=\"token punctuation\">(</span>roomID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">leave</span><span class=\"token punctuation\">(</span>roomID<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> usersID <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> webChat<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">(</span>roomID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">allSockets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> usersID<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> userName<span class=\"token punctuation\">,</span> userID <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> userStore<span class=\"token punctuation\">.</span><span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> userName<span class=\"token punctuation\">,</span> userID <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 해당 방들에 퇴장 알림</span>\n  webChat\n    <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>roomID<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leave room'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> users<span class=\"token punctuation\">,</span> userName<span class=\"token operator\">:</span> socket<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">,</span> roomID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 만약 혼자있는 방이라면 제거</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>usersID<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">deleteRoom</span><span class=\"token punctuation\">(</span>roomID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">deleteRoom</span><span class=\"token punctuation\">(</span>roomID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  roomStore<span class=\"token punctuation\">.</span><span class=\"token function\">removeRoom</span><span class=\"token punctuation\">(</span>roomID<span class=\"token punctuation\">)</span>\n  webChat<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delete room'</span><span class=\"token punctuation\">,</span> roomID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그 과정에서 이벤트가 여러번 중첩되면 클라이언트에서 해당 상태값이 반영되기 전에 빠르게 요청이 중첩되어 작업이 누락되는 경우가 있었다.</p>\n<blockquote>\n<p>다른 유저들에게는 제거된 방이 존재하는 상태</p>\n</blockquote>\n<p>서버에서 일괄 처리하고 제거된 상태값을 전달해주거나, 복수의 방일 경우 일괄 클라이언트에게 보내서 처리를 하는등</p>\n<p>이 문제를 돌려서 해결하는 방법은 여러가지가 있었을 것이다.</p>\n<p>하지만, 이렇게 실시간으로 커뮤니케이션 하는 과정에 있어서 위처럼 빠르게 작업이 중첩되는 상황은 언제든지 존재할 것 같다고 생각하여 현재 문제를 직접 해결해보고자 했다.</p>\n<h2 id=\"-클로져를-활용한-작업-저장\" style=\"position:relative;\"><a href=\"#-%ED%81%B4%EB%A1%9C%EC%A0%B8%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%9E%91%EC%97%85-%EC%A0%80%EC%9E%A5\" aria-label=\" 클로져를 활용한 작업 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍐 클로져를 활용한 작업 저장</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// debounce class</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Debounce</span> <span class=\"token punctuation\">{</span>\n  timer<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n  newState<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n  setState<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n  arr<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  time<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> setState<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newState <span class=\"token operator\">=</span> state\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setState <span class=\"token operator\">=</span> setState\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time <span class=\"token operator\">=</span> t\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>work <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newState<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">debounceAct</span><span class=\"token punctuation\">(</span>work<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'새로운 작업이 추가되었습니다.'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// debounce instance</span>\n<span class=\"token keyword\">const</span> roomsDebounce <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Debounce</span><span class=\"token punctuation\">(</span>rooms<span class=\"token punctuation\">,</span> setRooms<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  rooms<span class=\"token punctuation\">,</span>\n  setRooms<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>클래스명은 <code class=\"language-text\">Debounce</code>라고 지정하였지만, 사실 <code class=\"language-text\">Debounce</code>와 조금은 다른 방식이다.</p>\n<h3 id=\"-기존\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EC%A1%B4\" aria-label=\" 기존 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍊 기존</h3>\n<p>특정 시간 내에 실행된 최신의 작업만을 실행</p>\n<h3 id=\"-변경\" style=\"position:relative;\"><a href=\"#-%EB%B3%80%EA%B2%BD\" aria-label=\" 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍋 변경</h3>\n<p>특정 시간 내에 실행된 최신의 작업을 작업영역에 추가하여 이후에 진행</p>\n<p>키포인트는 새로운 작업을 저장하여 이후에 동일한 상태값에 일괄적으로 진행을 해준다는 점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 실제 사용 work 하나</span>\n<span class=\"token keyword\">const</span> onRoomCreated <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>room<span class=\"token operator\">:</span> IRoom<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    roomsDebounce<span class=\"token punctuation\">.</span><span class=\"token function\">debounceAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>room<span class=\"token punctuation\">.</span>creater <span class=\"token operator\">===</span> socket<span class=\"token punctuation\">.</span>userID<span class=\"token punctuation\">)</span> <span class=\"token function\">joinRoom</span><span class=\"token punctuation\">(</span>room<span class=\"token punctuation\">.</span>roomID<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> newRooms <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>roomsDebounce<span class=\"token punctuation\">.</span>newState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>room<span class=\"token punctuation\">.</span>roomID<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> room <span class=\"token punctuation\">}</span>\n      roomsDebounce<span class=\"token punctuation\">.</span>newState <span class=\"token operator\">=</span> newRooms\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>roomsDebounce<span class=\"token punctuation\">,</span> joinRoom<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>누적된 작업들이 모두 처리되도록 실행이 되면 클로저로 기억하고 있는 변수를 순차적으로 수정한 다음, 일괄 <code class=\"language-text\">setState</code>로 상태값을 변경하도록 하였다.</p>\n<p>이후, 변경된 상태값을 감지하여 <code class=\"language-text\">Debounce</code> 인스턴스를 다시생성하는것이다.</p>\n<h2 id=\"-예상되는-문제\" style=\"position:relative;\"><a href=\"#-%EC%98%88%EC%83%81%EB%90%98%EB%8A%94-%EB%AC%B8%EC%A0%9C\" aria-label=\" 예상되는 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍌 예상되는 문제</h2>\n<p>아직 테스트중에 발생하지는 않고있지만, 혹시나 이런문제도 생길수 있지 않나 생각해본다.</p>\n<p>누적된 작업을 처리하는 아주 짧은 시간에 새로운 작업이 또 들어옴\n아직 상태값이 완전히 변경되지 않은 상태에서 또 작업이 쌓이게 됨\n상태값이 변경되면서 새로운 인스턴스를 생성하여 쌓이 작업들이 초기화되거나 혹은, 구형의 상태값을 사용하여 작업을 함</p>\n<h3 id=\"-예상-해결\" style=\"position:relative;\"><a href=\"#-%EC%98%88%EC%83%81-%ED%95%B4%EA%B2%B0\" aria-label=\" 예상 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍇 예상 해결</h3>\n<p>반영 x</p>\n<ol>\n<li>\n<p>상태값 할당을 인스턴스 생성단계가 아닌, 생성된 인스턴스에 상태값이 변경될 때 마다 최신화하도록 함. 방법은 인스턴스 내부 함수를 통해 진행. 이 내부함수에는 상태값을 최신화하는 구문과, 상태값이 최신화 되었다는 <code class=\"language-text\">boolean</code> 속성을 <code class=\"language-text\">true</code>로 변경함.</p>\n<blockquote>\n<p>인스턴스 자체는 재생성되는 경우가 없게되므로, 누적되는 작업배열이 초기화되지 않음.</p>\n</blockquote>\n</li>\n<li>여러 요청들로 작업들은 누적되지만, 만약 <code class=\"language-text\">boolean</code>속성이 <code class=\"language-text\">false</code>라면 <code class=\"language-text\">setTimeout</code>을 실행시키지 않고, 작업만 누적시킴.</li>\n<li>작업들이 진행되면 <code class=\"language-text\">boolean</code>은 <code class=\"language-text\">false</code>로 변경</li>\n<li>이전의 work배열에 담긴 작업들이 완료되고, <code class=\"language-text\">setState</code>를 통해 상태값이 변경되면 내부함수가 최신화 된 상태값을 받아오고, <code class=\"language-text\">boolean</code>속성을 <code class=\"language-text\">true</code>로 변경하고, 아무것도 실행시키지 않는 빈 작업으로 인스턴스를 깨워서 <code class=\"language-text\">setTimeout</code>이 실행되도록 함.</li>\n</ol>\n<h2 id=\"-결론\" style=\"position:relative;\"><a href=\"#-%EA%B2%B0%EB%A1%A0\" aria-label=\" 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍓 결론</h2>\n<p>아마 내가 해결한 방법은 가장 효율적인 해결방안이 아닐 수 있다.</p>\n<p>하지만, 특정 문제에 대해 회피하지 않고 직접 해결해보려고 고민해본것은 좋은 경험이였던것 같다.</p>","frontmatter":{"title":"채팅 앱 프로젝트 후기 - 문제 발생과 해결과정","date":"May 31, 2021"}}},"pageContext":{"slug":"/Study/Think/store work/","previous":{"fields":{"slug":"/Study/CS/socket/"},"frontmatter":{"title":"Web Socket, Socket.io","category":"Study","draft":false,"tag":"CS"}},"next":null}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}