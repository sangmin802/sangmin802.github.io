{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/Redux-Saga/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"8ac2b9b5-d0c7-5e93-b877-bf6943ae1260","excerpt":"Redux-Thunk -> Redux-Saga…","html":"<h2 id=\"redux-thunk---redux-saga\" style=\"position:relative;\"><a href=\"#redux-thunk---redux-saga\" aria-label=\"redux thunk   redux saga permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux-Thunk -> Redux-Saga</h2>\n<p>기존 <code class=\"language-text\">Redux</code>에서 비동기 작업을 수행할 때, <code class=\"language-text\">Redux-Thunk</code>를 사용해왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserData_Thunk</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  name <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> \n  history <span class=\"token operator\">:</span> _History<span class=\"token punctuation\">.</span>History\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n    dispatch\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> </span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadingToggle</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">:</span> UserInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUserData</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> </span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUserData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      history<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/userInfo/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadingToggle</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      history<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>내부에서 비동기 작업을 수행할 수 있으며, 다른 <code class=\"language-text\">Actions</code>들을 호출 할 수 있다는 점에 매력을 느꼈다.</p>\n<p>하지만, 위처럼 단순하게 이러한 문제만 해결하기 위해서는 <code class=\"language-text\">Redux-Thunk</code>가 접근성도 좋고, 편하게 사용할 수 있지만 다른 여러가지 상황에 대처하는데에는 <code class=\"language-text\">Redux-Saga</code>가 더 유연하다고 하여 한번 공부하고 바꿔보기로 했다.</p>\n<p><code class=\"language-text\">Redux-Thunk</code>보다는 상대적으로 높은 러닝커브를 갖고있다고하는데, 그중 이유가 최신 <code class=\"language-text\">ES</code>시리즈인 제너레이터함수를 사용한다는 점이였다.</p>\n<p>이전에, <code class=\"language-text\">iterable</code>한 객체를 만들기 위해 <code class=\"language-text\">Generator</code> 함수를 접해봤던지라 해당 정의를 이해하는데에는 큰 어려움이 없었다.</p>\n<p>전체적인 흐름을 보자면,</p>\n<h3 id=\"호출\" style=\"position:relative;\"><a href=\"#%ED%98%B8%EC%B6%9C\" aria-label=\"호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호출</h3>\n<ul>\n<li><code class=\"language-text\">Action</code>을 호출할 때, 별도의 <code class=\"language-text\">type</code>과 각종 변수들을 담고있는 객체를 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 검색 컴포넌트</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> history<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">getUserData_Saga_Async</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// actions.ts</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GET_USER_DATA_SAGA</span> <span class=\"token operator\">=</span> <span class=\"token string\">'GET_USER_DATA_SAGA'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserData_Saga_Async</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  name<span class=\"token punctuation\">,</span> \n  history\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">GET_USER_DATA_SAGA</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> history<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"saga-감시-연결\" style=\"position:relative;\"><a href=\"#saga-%EA%B0%90%EC%8B%9C-%EC%97%B0%EA%B2%B0\" aria-label=\"saga 감시 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Saga 감시? 연결?</h3>\n<ul>\n<li>\n<p>특정 <code class=\"language-text\">type</code>이 호출될 때, 실행되는 <code class=\"language-text\">Saga</code> 메소드들을 맵핑해준다.</p>\n<blockquote>\n<p>공식문서를 보니, 감시한다는 느낌으로 설명이 되어있더라.</p>\n</blockquote>\n</li>\n<li><code class=\"language-text\">takeLatest</code>, <code class=\"language-text\">takeEvery</code> 라는 메소드들이 있는데, 아래에서 의미를 다루겠다.</li>\n<li>첫번째 인자는 감시하는 타입이고, 두번째 인자는 감시하고있는 타입이 호출될 때, 실행되는 메소드이다.</li>\n<li><code class=\"language-text\">put</code> : <code class=\"language-text\">Redux-Thunk</code>에서의 <code class=\"language-text\">dispatch</code>와 유사하게 다른 <code class=\"language-text\">Action</code>들을 호출한다.</li>\n<li><code class=\"language-text\">call</code> : 비동기 메소드들을 실행시켜준다. 제너레이터 메소드는 <code class=\"language-text\">async</code> <code class=\"language-text\">await</code> 문법이 적용되지 않기 때문에, 해당 메소드를 이용해야한다. 또한, 두번째 인자로 필요한 변수들을 보낼 수 있는데, 하나가 아닐 경우 객체형식으로 보내야 하더라.</li>\n<li><code class=\"language-text\">select</code> : 연결되어있는 <code class=\"language-text\">store</code>의 상태를 확인할 수 있다. <code class=\"language-text\">useSelector</code>와 매우 흡사하다.</li>\n<li><code class=\"language-text\">all</code> : 배열 안의 모든 사가들을 동시에 실행시켜준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// actions.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">getUserData_Saga</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> </span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadingToggle</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// const store = yield select(state => state);</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>getUserData<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUserData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      history<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/userInfo/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadingToggle</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      history<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">watchSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_USER_DATA_SAGA</span><span class=\"token punctuation\">,</span> getUserData_Saga<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">rootSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">watchSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// store.ts</span>\n<span class=\"token keyword\">import</span> createSagaMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> reducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>rootSaga<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./actions'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sagaMiddelware <span class=\"token operator\">=</span> <span class=\"token function\">createSagaMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>ReduxThunk<span class=\"token punctuation\">,</span> sagaMiddelware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 생성된 Saga들을 감시하는 제너레이터? 객체를 실행시켜준다.</span>\nsagaMiddelware<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>rootSaga<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"takelatest\" style=\"position:relative;\"><a href=\"#takelatest\" aria-label=\"takelatest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>takeLatest</h3>\n<p>제너레이터 함수 내부에서 가장 마지막으로 호출되는것만 실행시켜 <code class=\"language-text\">yield</code>한다(<code class=\"language-text\">return</code>처럼 반환한다 생각하면 된다.)</p>\n<p>자연스럽게 이전의 호출들은 모두 무시된다.</p>\n<p>공문이나, 다른 블로그들의 설명들로는 이해가 되지않아 예시를 직접 만들어보니 이런 의미인듯 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 호출 컴포넌트</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">test</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">takeLatestTest_Saga_Async</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">takeLatestTest_Saga_Async</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// actions.ts</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TAKE_LATEST_TEST</span> <span class=\"token operator\">=</span> <span class=\"token string\">'TAKE_LATEST_TEST'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TAKE_LATEST_TEST_CALLER</span> <span class=\"token operator\">=</span> <span class=\"token string\">'TAKE_LATEST_TEST_CALLER'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">delay</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">takeLatestTest</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span>val<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">type</span> <span class=\"token operator\">:</span> <span class=\"token constant\">TAKE_LATEST_TEST_CALLER</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">watchSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TAKE_LATEST_TEST</span><span class=\"token punctuation\">,</span> takeLatestTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// reducer.ts</span>\n<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'TAKE_LATEST_TEST_CALLER'</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'takeLatest'</span> <span class=\"token operator\">+</span> action<span class=\"token punctuation\">.</span>val<span class=\"token operator\">+</span><span class=\"token string\">'번째 실행'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// 콘솔</span>\n<span class=\"token comment\">// takeLatest2번째 실행</span></code></pre></div>\n<p>동일한 <code class=\"language-text\">Action</code>을 두번 호출하고 두가지 모두 비동기작업이지만, 작업의 <code class=\"language-text\">delay</code>시간이 다르다.</p>\n<p>사실상 두개의 제너레이터는 비슷하게 생성이되지만, 첫번째 제너레이터가 1초뒤에 완료되더라도 2초뒤에 완료되는 두번째 제너레이터가 존재하기 때문에, 첫번째 제너레이터는 무시되었다.</p>\n<h3 id=\"takeevery\" style=\"position:relative;\"><a href=\"#takeevery\" aria-label=\"takeevery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>takeEvery</h3>\n<p>예제는 위와 동일하지만, 메소드만 <code class=\"language-text\">takeEvery</code>로 변경을 한다면 콘솔값은 <code class=\"language-text\">takeLatest1번째 실행</code> 이후 <code class=\"language-text\">takeLatest2번째 실행</code> 모두 나오게 된다.</p>","frontmatter":{"title":"Redux-Saga","date":"February 09, 2021"}}},"pageContext":{"slug":"/Study/Think/Redux-Saga/","previous":{"fields":{"slug":"/Diary/gatsby/"},"frontmatter":{"title":"블로그 이사다!","category":"Diary","draft":false,"tag":null}},"next":null}},"staticQueryHashes":["3128451518","3665928227"]}