{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/2020-07-10-Executed Context_v1_2/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin Blog","author":"SangMin","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"185fa3df-d032-5549-8a40-fdcad1879b95","excerpt":"참조 : https://poiemaweb.com/js-execution-context 실행 컨텍스트의 생성과정 설명을 위한 코드 전역객체 생성 시작 전 전역객체가 생성되며, 이 객체에는 어떠한 곳에서도 접근할 수 있다.(Global객체인듯 함) 이 초기의 전역객체에는 Math, String, Array등의 windows의 기본객체와 BOM, DOM등이 설정되어 있다. 전역객체 생성 이후, 전역코드 진입 시 GEC 생성후 실행컨텍스트 스택에 쌓임. 해당 GEC…","html":"<blockquote>\n<p>참조 : <a href=\"https://poiemaweb.com/js-execution-context\">https://poiemaweb.com/js-execution-context</a></p>\n</blockquote>\n<h2 id=\"실행-컨텍스트의-생성과정\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%83%9D%EC%84%B1%EA%B3%BC%EC%A0%95\" aria-label=\"실행 컨텍스트의 생성과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트의 생성과정</h2>\n<h3 id=\"설명을-위한-코드\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EB%AA%85%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\"설명을 위한 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설명을 위한 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> immuVar <span class=\"token operator\">=</span> <span class=\"token string\">'immuVar'</span> <span class=\"token comment\">// const, let은 GO, closure가아니라 script라는 새로운곳에 추가됨.</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">declareFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token string\">'yyy'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token string\">'zzz'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>immuVar<span class=\"token operator\">+</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">+</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [[Scopes]] 로 GO, outer의 변수(클로저)를 참조할 수 있음.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">declareFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수 선언식'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">ExpFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수 표현식'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>전역객체 생성</li>\n<li>시작 전 전역객체가 생성되며, 이 객체에는 어떠한 곳에서도 접근할 수 있다.(Global객체인듯 함)</li>\n<li>이 초기의 전역객체에는 Math, String, Array등의 windows의 기본객체와 BOM, DOM등이 설정되어 있다.</li>\n<li>전역객체 생성 이후, 전역코드 진입 시 GEC 생성후 실행컨텍스트 스택에 쌓임.</li>\n<li>해당 GEC의 스코프체인 생성</li>\n<li>시작할 때 생성된 전역객체가 GEC의 스코프체인 리스트에 추가됨.</li>\n<li>해당 GEC의 (Variable Instantiation)변수 객체화 실행</li>\n<li>VI는, VO에 프로퍼티와 값을 추가하는것을 의미한다.</li>\n<li>\n<p>VI 순서(위의 코드 기준)</p>\n<ol>\n<li>(Function Code의 경우에만) 매개변수가 VO의 프로퍼티로, 인수가 값으로 설정된다. 전역이면 아님</li>\n<li>\n<p>대상 코드 내의 함수선언을 대상으로 함수명이 VO의 프로퍼티로, 생성된 함수 객체가 값으로 설정된다.</p>\n<ul>\n<li>이때 생성된 함수객체를 <code class=\"language-text\">console.dir(outer)</code> 혹은 <code class=\"language-text\">console.dir(inner)</code> 를 조회하였을 때, <code class=\"language-text\">[[Scopes]]</code>프로퍼티를 갖게되는데, 자신의 실행환경(Lexical Scope)과 자신을 포함하는 외부함수의 환경, 전역객체를 가리킨다. 자신을 포함하는 외부함수의 실행컨텍스트가 소멸하여도 <code class=\"language-text\">[[Scopes]]</code>프로퍼티를 유지하고있는데, 이것을 <b style=\"color : tomato\">클로저</b>라고한다.</li>\n<li>\n<p>이로서 알 수 있는것. <code class=\"language-text\">[[Scopes]]</code>프로퍼티는, 해당 범위 내에서 참조할 수 있는 스코프체인 리스트를 말하는것 같다.<b style=\"color : tomato\">클로저</b></p>\n<ul>\n<li>outer를 조회하였을 때, <code class=\"language-text\">[[Scopes]]</code>의 값으로, GO와 다른 const, let등의 변수를 조회할 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>대상 코드 내의 변수 선언을 대상으로 변수명이 VO의 프로퍼티로, <code class=\"language-text\">undefined</code>가 값으로 설정된다.</p>\n<ul>\n<li>중요한점! <code class=\"language-text\">var</code>로 선언되었을 경우만 <code class=\"language-text\">undefined</code>의 값을 갖고있으며, const나 let으로 선언되었을 경우 어떠한 값도 갖고있지않는다.</li>\n<li>x 선언 이전에 <code class=\"language-text\">console</code>로 조회할 때, <code class=\"language-text\">var</code>이면 <code class=\"language-text\">undefined</code>, <code class=\"language-text\">const</code> or<code class=\"language-text\">let</code>이면 <code class=\"language-text\">reference error</code></li>\n<li>이렇듯, <code class=\"language-text\">var</code>의 경우 선언 이전에 조회할 수 있는데 이것을 <b style=\"color : tomato\">호이스팅</b>이라고 한다.</li>\n</ul>\n</li>\n<li>위의 과정이 끝나면, <code class=\"language-text\">window</code>에 GO의 내용(전역함수 및 전역변수)가 추가되어있는걸 볼 수 있다.</li>\n</ol>\n</li>\n<li>this value 결정</li>\n<li>기본적으로 this는 전역객체를 가리키고 있지만, 함수 호출 패턴에 의해 this에 할당되는 값이 결정된다. 당연히, 전역코드의 경우 this 는 전역객체인 GO(<code class=\"language-text\">window</code> + 생성한 전역변수, 함수)이다.  </li>\n</ol>\n<h2 id=\"후기--솔직히-어려웠다\" style=\"position:relative;\"><a href=\"#%ED%9B%84%EA%B8%B0--%EC%86%94%EC%A7%81%ED%9E%88-%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8B%A4\" aria-label=\"후기  솔직히 어려웠다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>후기 😬 솔직히 어려웠다.</h2>\n<p>추가적으로 이해를 위해 구글링 중, 더 쉽게 설명된 링크가 있어 복습 겸 다시 정리해보았다!</p>","frontmatter":{"title":"실행컨텍스트2(Executed Context)","date":"July 08, 2020"}}},"pageContext":{"slug":"/Study/Think/2020-07-10-Executed Context_v1_2/","previous":{"fields":{"slug":"/Study/Think/2020-07-08-CustomEvent/"},"frontmatter":{"title":"CustomEvent","category":"Study","draft":false}},"next":{"fields":{"slug":"/Study/Think/2020-07-10-Executed Context_v2/"},"frontmatter":{"title":"실행컨텍스트(Executed Context) 더 쉽게!","category":"Study","draft":false}}}},"staticQueryHashes":[]}