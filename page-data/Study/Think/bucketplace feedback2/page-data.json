{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/bucketplace feedback2/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"4f99b0cd-c304-5ea8-a5f3-1af39f9b7877","excerpt":"InfiniteScroll은 재활용 할 수 없도록 구현되어 있습니다. 각종 , ,  등들을 모두 기능별로 나누고 하나의 함수는 단 하나의 기능만 사용하게 하여 재사용할 수 있도록 했다고 생각했지만, 해당 이벤트를 담당하는 훅은 그렇지 않았던것 같다. 코드 내용을 공개하는것이 불가능하기 떄문에 대충 보면 실행되는 이벤트 선언 이벤트를 부여하고 조건에 따라 제거하는 훅 스크롤 이벤트 에 따른  특정 변수값의 을 막고 풀고를 통해 해왔는데, 에서 해당 api…","html":"<h2 id=\"infinitescroll은-재활용-할-수-없도록-구현되어-있습니다\" style=\"position:relative;\"><a href=\"#infinitescroll%EC%9D%80-%EC%9E%AC%ED%99%9C%EC%9A%A9-%ED%95%A0-%EC%88%98-%EC%97%86%EB%8F%84%EB%A1%9D-%EA%B5%AC%ED%98%84%EB%90%98%EC%96%B4-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"infinitescroll은 재활용 할 수 없도록 구현되어 있습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>InfiniteScroll은 재활용 할 수 없도록 구현되어 있습니다.</h2>\n<p>각종 <code class=\"language-text\">Hook</code>, <code class=\"language-text\">Event</code>, <code class=\"language-text\">Component</code> 등들을 모두 기능별로 나누고 하나의 함수는 단 하나의 기능만 사용하게 하여 재사용할 수 있도록 했다고 생각했지만, 해당 이벤트를 담당하는 훅은 그렇지 않았던것 같다.</p>\n<p>코드 내용을 공개하는것이 불가능하기 떄문에 대충 보면</p>\n<ul>\n<li>실행되는 이벤트 선언</li>\n<li>이벤트를 부여하고 조건에 따라 제거하는 훅</li>\n<li>\n<p>스크롤 이벤트 에 따른 <code class=\"language-text\">throttling</code></p>\n<blockquote>\n<p>특정 변수값의 <code class=\"language-text\">boolean</code>을 막고 풀고를 통해 해왔는데, <code class=\"language-text\">lodash</code>에서 해당 api를 제공한다고 함..</p>\n</blockquote>\n</li>\n</ul>\n<p>생각해보면 해당 훅에서 필요한것은 두번째 것 뿐이다.</p>\n<p>진행되는 이벤트는 변수를 통해서 받아야 다양한곳에서 재활용 가능하며, 데이터패칭을 막는 <code class=\"language-text\">throttling</code>또한, 이 컴포넌트에서만 사용되므로 빼는것이 좋을듯 하다.</p>\n<h2 id=\"사진-컴포넌트-키에-index를-사용하고-있습니다-index-보다는-사진-아이디를-사용하는-것이-더-나은-방법입니다\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A7%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%82%A4%EC%97%90-index%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B3%A0-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4-index-%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%82%AC%EC%A7%84-%EC%95%84%EC%9D%B4%EB%94%94%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EB%8D%94-%EB%82%98%EC%9D%80-%EB%B0%A9%EB%B2%95%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"사진 컴포넌트 키에 index를 사용하고 있습니다 index 보다는 사진 아이디를 사용하는 것이 더 나은 방법입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사진 컴포넌트 키에 index를 사용하고 있습니다. Index 보다는 사진 아이디를 사용하는 것이 더 나은 방법입니다.</h2>\n<p><code class=\"language-text\">React</code>로 컴포넌트를 반복적으로 생성할 때, <code class=\"language-text\">key</code>라는 속성을 꼭 지정해주어야 한다.</p>\n<p>나는 지금까지 이 속성에 그냥 <code class=\"language-text\">.map</code> api에서 순차적으로 제공하는 <code class=\"language-text\">index</code>를 부여해왔는데, 해당 값 에대한 고유한 값을 부여하는것이 좋다고 한다.</p>\n<blockquote>\n<p>뭐 이름이라던지, 아이디라던지..</p>\n</blockquote>\n<h2 id=\"시맨틱-마크업으로-작성되어-있지-않습니다\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EB%A7%A8%ED%8B%B1-%EB%A7%88%ED%81%AC%EC%97%85%EC%9C%BC%EB%A1%9C-%EC%9E%91%EC%84%B1%EB%90%98%EC%96%B4-%EC%9E%88%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"시맨틱 마크업으로 작성되어 있지 않습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시맨틱 마크업으로 작성되어 있지 않습니다.</h2>\n<p>시맨틱 마크업을 전혀 사용하지 않고 있었다. 사실상 <code class=\"language-text\">div</code>와 다를게 없다는 이유로 그냥 안써왔는데, 멀리서 봤을 때 가독성이 좋고, 해당 컴포넌트가 대략적으로 어떤 역할을 하는지 한번에 알 수 있기 때문에 꼭 사용해야하는것 같다.</p>\n<blockquote>\n<p>앞으로 시맨틱 태그를 필수적으로 사용해야 할 듯..</p>\n</blockquote>","frontmatter":{"title":"버킷플레이스 피드백 분석2, 3, 5","date":"March 08, 2021"}}},"pageContext":{"slug":"/Study/Think/bucketplace feedback2/","previous":{"fields":{"slug":"/Study/Think/bucketplace feedback1/"},"frontmatter":{"title":"버킷플레이스 피드백 분석1 - Coding Convention","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/bucketplace feedback3/"},"frontmatter":{"title":"버킷플레이스 피드백 분석4, 6","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}