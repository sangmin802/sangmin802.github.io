{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/refactoring/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"utterances":"sangmin802/sangmin802.github.io"}}},"markdownRemark":{"id":"40029e9c-c7a4-570e-a086-2a88f1713d4c","excerpt":"Refactoring Class101 과제 피드백 이후, 제출했던 과제를 피드백에 따라 하나하나 수정해보았다. 코드의 가독성 문제 조건문 내부에 조건문이 더 있는것은, 매우 가독성이 떨어지는 프로그래밍이라고 한다. 들여쓰기가 많을수록 지저분한 코드라고 함.. 따라서, 조기에 을 시켜서 조건문을 탈출하는것이 좋다고 한다. 조기에 을 시키기 때문에, 조건문의 위치가 매우 중요! 삼항연산자를 자주쓰는편인데, 안쓰는게 좋다고 함.. 매우충격 기능에 따라서, 컴포넌트를 좀 더 나눌 수 있었다.…","html":"<h1 id=\"refactoring\" style=\"position:relative;\"><a href=\"#refactoring\" aria-label=\"refactoring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refactoring</h1>\n<ul>\n<li>Class101 과제 피드백 이후, 제출했던 과제를 피드백에 따라 하나하나 수정해보았다.</li>\n</ul>\n<h2 id=\"코드의-가독성-문제\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%9D%98-%EA%B0%80%EB%8F%85%EC%84%B1-%EB%AC%B8%EC%A0%9C\" aria-label=\"코드의 가독성 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드의 가독성 문제</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 변경 전</span>\n<span class=\"token comment\">// 원래 이런코드는 아니였는데, 좀 더 확연한 차이를 보기 위해 살짝 수정했다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">calcDiscount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">price<span class=\"token punctuation\">,</span> coupon</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> totalPrice <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'rate'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      totalPrice <span class=\"token operator\">=</span> price <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">.</span>discountRate<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'amount'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      totalPrice <span class=\"token operator\">=</span> price <span class=\"token operator\">-</span> coupon<span class=\"token punctuation\">.</span>discountAmount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    totalPrice <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> totalPrice<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 변경 후</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">calcDiscount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">price<span class=\"token punctuation\">,</span> coupon</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>coupon<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'rate'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> price <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">.</span>discountRate<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'amount'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> price <span class=\"token operator\">-</span> coupon<span class=\"token punctuation\">.</span>discountAmount<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>조건문 내부에 조건문이 더 있는것은, 매우 가독성이 떨어지는 프로그래밍이라고 한다.</li>\n<li>들여쓰기가 많을수록 지저분한 코드라고 함..</li>\n<li>따라서, 조기에 <code class=\"language-text\">return</code>을 시켜서 조건문을 탈출하는것이 좋다고 한다.</li>\n<li>조기에 <code class=\"language-text\">return</code>을 시키기 때문에, 조건문의 위치가 매우 중요!</li>\n<li>삼항연산자를 자주쓰는편인데, 안쓰는게 좋다고 함.. 매우충격</li>\n</ul>\n<h2 id=\"기능에-따라서-컴포넌트를-좀-더-나눌-수-있었다\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5%EC%97%90-%EB%94%B0%EB%9D%BC%EC%84%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EC%A2%80-%EB%8D%94-%EB%82%98%EB%88%8C-%EC%88%98-%EC%9E%88%EC%97%88%EB%8B%A4\" aria-label=\"기능에 따라서 컴포넌트를 좀 더 나눌 수 있었다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기능에 따라서, 컴포넌트를 좀 더 나눌 수 있었다.</h2>\n<ul>\n<li>3번문제와 연결되는것 같아, 3번에서 이야기해보자</li>\n</ul>\n<h2 id=\"컴포넌트의-역할과-책임에-대해-좀-더-고려해보기\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%97%AD%ED%95%A0%EA%B3%BC-%EC%B1%85%EC%9E%84%EC%97%90-%EB%8C%80%ED%95%B4-%EC%A2%80-%EB%8D%94-%EA%B3%A0%EB%A0%A4%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"컴포넌트의 역할과 책임에 대해 좀 더 고려해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트의 역할과 책임에 대해 좀 더 고려해보기.</h2>\n<ul>\n<li>뷰와 비즈니스 로직이 혼재되어있어, 추후에 기능 변경등으로 인한 보수가 매우 어렵다.</li>\n<li>이전까지는 내가 <code class=\"language-text\">Redux</code>를 사용함에 있어, 나는 단순히 <code class=\"language-text\">Flux</code>디자인패턴을 사용한다고 생각했다. 하지만 이번에 정말 나의 잘못된 생각이라는것을 느끼게되었다..</li>\n</ul>\n<h3 id=\"컨테이너-컴포넌트\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"컨테이너 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 컴포넌트</h3>\n<ul>\n<li>사용하는 상태값을 조회하거나, 상태값에 변화를 주는 디스패쳐를 관리하는 컴포넌트이다. 즉, <b style=\"color : toamto;\">비즈니스 로직</b>과 관련된 것을 관리하는 컴포넌트라 볼 수 있다.</li>\n<li><code class=\"language-text\">JSX</code>는 사실상 거의 없는 수준이다.</li>\n</ul>\n<h3 id=\"프리젠테이셔널-컴포넌트\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A6%AC%EC%A0%A0%ED%85%8C%EC%9D%B4%EC%85%94%EB%84%90-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"프리젠테이셔널 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프리젠테이셔널 컴포넌트</h3>\n<ul>\n<li>컨테이너 컴포넌트에서 만든 디스패쳐와 상태값들을 속성값으로 받아, 단순이 <b style=\"color : toamto;\">뷰</b>화면만 그려주는 컴포넌트이다.</li>\n<li>상태값에 직접 조회하는것이 아닌, 부모에게서부터 속성값으로 받기 때문에, 어디에서든 재활용이 가능하다.</li>\n<li>프리젠테이셔널 컴포넌트는, 프리젠테이셔널 컴포넌트와 컨테이너 컴포넌트 둘다 가지고 있을 수 있다고 한다.</li>\n<li>상태값에 조회할수 없을뿐이지, UI를 구성하는 메소드들은 사용이 가능하다.</li>\n</ul>\n<blockquote>\n<p>React Hook으로, UI와 관련되었을 경우 자신만의 상태값을 가지고 있을수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 컨테이너 컴포넌트 HomeContainer.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">HomeContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>hotItems<span class=\"token punctuation\">,</span> cart<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">SetHotItmes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> insertCart <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">insertCart</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> deleteCart <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">deleteCart</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Home \n            hotItems<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hotItems<span class=\"token punctuation\">}</span> \n            cart<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>cart<span class=\"token punctuation\">}</span>\n            insertCart<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>insertCart<span class=\"token punctuation\">}</span>\n            deleteCart<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>deleteCart<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SetHotItmes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> \n    <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">data</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>productItems<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> cart<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">data</span> <span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">cart</span> <span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>cart\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// App에서도 같은 부분이므로 하나로 합칠필요 있음.</span>\n      <span class=\"token keyword\">const</span> leftString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>cart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> rightString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span>cart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftString <span class=\"token operator\">!==</span> rightString<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> hotItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>productItems<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>hotItems<span class=\"token punctuation\">,</span> cart<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 홈은 app에게 상속받는 props값이 없기 때문에, 이후에는 app으로 인한 렌더링이 필요 없음</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>HomeContainer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 프리젠테이셔널 컴포넌트 Home.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>hotItems<span class=\"token punctuation\">,</span> insertCart<span class=\"token punctuation\">,</span> deleteCart<span class=\"token punctuation\">,</span> cart<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"home routeComp\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"section\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"sectionTitle\"</span><span class=\"token operator\">></span>인기강의 <span class=\"token constant\">TOP3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"hotItems sectionContent\"</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>\n            hotItems<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n                <span class=\"token operator\">&lt;</span>ProductsItem \n                  data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span> \n                  id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n                  key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token operator\">+</span>index<span class=\"token punctuation\">}</span>\n                  cart<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>cart<span class=\"token punctuation\">}</span>\n                  insertCart<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>insertCart<span class=\"token punctuation\">}</span>\n                  deleteCart<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>deleteCart<span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Home<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>생각해보네 예전에 Class로 컴포넌트를 만들 때, connect로 리덕스를 사용했었는데, 그때 그 역할이 컨테이너컴포넌트화하는거였다.</li>\n</ul>\n<h3 id=\"의문\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EB%AC%B8\" aria-label=\"의문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의문</h3>\n<ul>\n<li>사실, 컨테이너 컴포넌트나 프리젠테이셔널 컴포넌트로 분리하여 사용하는것은, Hook이 개발되기 전, 함수형 컴포넌트가 단순히 뷰 화면만 보여주던 때에 사용했다고 한다..\n<blockquote>\n<p>현재, React Hook이 개발되고 나서도 위처럼 나누는지 아니면, 하나의 파일안에서 커스텀 훅으로 분리하여 관리하는지는 잘 모르겠다..</p>\n</blockquote>\n</li>\n<li>만약에, 속성값을 자식에게 건내주는것이 너무 여러번 있다면..?\n<blockquote>\n<p>중간에 컨테이너 컴포넌트를 하나 추가해야겠지..? 프리젠테이셔널 컴포넌트는 상태값에 조회를 할 수 없고, 그렇다고 하나하나 일일이 넘겨주는건.. Redux Hook을 사용하는 의미가 없으니깐..</p>\n</blockquote>\n</li>\n<li>프리젠테이셔널 컴포넌트에 있는 다른컴포넌트의 경우, 그냥 import를 해도 되는걸까 아니면, 그것또한 속성값으로 전달받아야하나..?\n<blockquote>\n<p>비즈니스 로직을 구분하는것이 주된 목표이기 때문에, 프리젠테이셔널 컴포넌트에서 import하는것은 크게 상관없을 듯 하다.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"렌더링-최적화-측면의-문제\" style=\"position:relative;\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B5%9C%EC%A0%81%ED%99%94-%EC%B8%A1%EB%A9%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C\" aria-label=\"렌더링 최적화 측면의 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링 최적화 측면의 문제</h2>\n<ul>\n<li>인라인 함수를 작성하거나, memoization이 되지 않아 비효율적이다.\n<blockquote>\n<p>여기서 인라인함수는, <code class=\"language-text\">.map</code>등으로 컴포넌트를 반복생성할 때, 동일한 함수가 지속적으로 생성되는것을 찝어주신것 같다.</p>\n</blockquote>\n</li>\n<li>useCallback을 사용하여, 반복적으로 생성되는 자식컴포넌트에게 메소드를 전달할 때에는 메소드가 캐싱되도록 한다.\n<blockquote>\n<p>사용할 때, 영향을 받는 값이 있다면, 두번째 인자인 배열에 해당 값을 넣어 변경시 새롭게 생성되도록 한다.</p>\n</blockquote>\n</li>\n<li>memo를 사용하여 하위컴포넌트의 불필요한 렌더링 제거.\n<blockquote>\n<p>상위컴포넌트가 렌더링되었을 때, 관련이없는 하위컴포넌트도 렌더링이 된다. 첫번째 인자와 두번째 인자를 비교하여, 렌더링이 필요할 때만 false를 반환하도록 한다.</p>\n</blockquote>\n</li>\n<li>Redux Hook에서 shallowEqual만 사용하면, 참조타입을 비교할 때 항상 false가 나오기 때문에, 작은 규모라면 문자열로 변경하거나 특정값을 비교하도록 하고, 큰 규모라면 lodash를 사요하도록 하자.</li>\n</ul>\n<h2 id=\"더-알아보는중\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94%EC%A4%91\" aria-label=\"더 알아보는중 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 알아보는중</h2>\n<ul>\n<li>아직도 고민중이고 확실하지 않은 부분이 많아서 계속 알아보는 중이다..</li>\n<li>아 그리고, 최근에 어떤 영상에서 리팩토링과 관련된 좋은 책을 추천해줬다. 현업에서 사수개발자들이 자주 추천해주는 책이라고 하는데, 나는 혼자서하니.. 흑흑 유튜브의 도움을 참 많이받는다..</li>\n</ul>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://ahnheejong.name/articles/package-structure-with-the-principal-of-locality-in-mind/\">효율적인 디렉토리 구조</a></li>\n<li><a href=\"https://www.aladin.co.kr/shop/wproduct.aspx?start=short&#x26;ItemId=236186172\">리팩토링 개정판(자바스크립트 버전)</a></li>\n</ul>","frontmatter":{"title":"Refactoring과 CleanCode","date":"November 30, 2020"}}},"pageContext":{"slug":"/Study/Think/refactoring/","previous":{"fields":{"slug":"/Study/Think/git/"},"frontmatter":{"title":"오리지널 깃","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/DataStructure/dataStructures_05/"},"frontmatter":{"title":"자료구조 Data Structures Graphs","category":"Study","draft":false,"tag":"Data Structures"}}}},"staticQueryHashes":["1162990174","1854831582","2054357557","3128451518"],"slicesMap":{}}