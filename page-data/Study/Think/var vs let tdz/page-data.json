{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/var vs let tdz/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"7c070a76-1698-50e6-ae6b-51ea32a67142","excerpt":"과 에서 추가된 와 의 큰 차이는 이후에 동일한 로 재선언이 가능하냐 불가능하냐 엄격함의 차이였다. 는 사실 값 또한 변경될 수 없다는점에 상수 에 가까워 변수인 와는 정말 다르다고 볼 수 있다. 하지만 기능적으로 보았을 때, 과 는 동일한 변수선언으로서 위의 차이를 제외하곤 비슷하다고 생각했는데, 그렇지 않았다. 유효범위(scope)의 차이 선언 당시 변수나 상수가 자리잡는 범위인 는 해당 변수가 인지 인지에 따라 다르게 잡힌다. function-scoped…","html":"<p><code class=\"language-text\">var</code>과 <code class=\"language-text\">es2015</code>에서 추가된 <code class=\"language-text\">const</code>와 <code class=\"language-text\">let</code>의 큰 차이는 이후에 동일한 <code class=\"language-text\">key</code>로 재선언이 가능하냐 불가능하냐 엄격함의 차이였다.</p>\n<p><code class=\"language-text\">const</code>는 사실 값 또한 변경될 수 없다는점에 상수 에 가까워 변수인 <code class=\"language-text\">var</code>와는 정말 다르다고 볼 수 있다.</p>\n<p>하지만 기능적으로 보았을 때, <code class=\"language-text\">let</code>과 <code class=\"language-text\">var</code>는 동일한 변수선언으로서 위의 차이를 제외하곤 비슷하다고 생각했는데, 그렇지 않았다.</p>\n<h2 id=\"유효범위scope의-차이\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84scope%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"유효범위scope의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유효범위(scope)의 차이</h2>\n<p>선언 당시 변수나 상수가 자리잡는 범위인 <code class=\"language-text\">scope</code>는 해당 변수가 <code class=\"language-text\">var</code>인지 <code class=\"language-text\">let</code>인지에 따라 다르게 잡힌다.</p>\n<h3 id=\"function-scoped\" style=\"position:relative;\"><a href=\"#function-scoped\" aria-label=\"function scoped permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function-scoped</h3>\n<p>기존의 <code class=\"language-text\">var</code>의 유효범위는 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: i is not defined</span></code></pre></div>\n<p>함수가 선언될 때, 자신을 갖고있는 함수가 곧 유효범위가 된다. 당연히 <code class=\"language-text\">hoisting</code>을 통해 해당 함수의 최상단으로 먼저 선언되고 이후에 값을 할당받는다.</p>\n<p>자신의 유효범위인 함수 외부에서 호출을 하자, 해당 변수는 정의되지 않았다는 에러가 발생한다.</p>\n<h3 id=\"block-scoped\" style=\"position:relative;\"><a href=\"#block-scoped\" aria-label=\"block scoped permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>block-scoped</h3>\n<p><code class=\"language-text\">let</code>의 유효범위는 <code class=\"language-text\">{}</code> 블록이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'c'</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// c</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0,1,2,3,4</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: i is not defined</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">var</code>와 다르게 좀더 작은 <code class=\"language-text\">{}</code> 블록단위의 유효범위를 갖고있기 때문에, <code class=\"language-text\">for loop</code>와 같은 경우 내부에서만 해당 변수를 조회할 수 있으며, 한 단계의 블록만 넘어가더라도 정의되지 않았다는 에러가 발생한다.</p>\n<blockquote>\n<p>부모 함수에 있는 <code class=\"language-text\">let</code> 변수의 경우, 해당 함수 블록이 유효범위이기 때문에, 자식 함수에서는 접근 가능하다. <code class=\"language-text\">ex) closure</code></p>\n</blockquote>\n<h3 id=\"hoisting\" style=\"position:relative;\"><a href=\"#hoisting\" aria-label=\"hoisting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hoisting</h3>\n<p><code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>의 <code class=\"language-text\">hoisting</code>은 기존의 <code class=\"language-text\">var</code>과도 차이가 있다.</p>\n<p><code class=\"language-text\">var</code>의 경우 이전의 <code class=\"language-text\">hoisting</code>을 다뤘던 포스트에서처럼 함수영역 내부 최상단에서 선언부분만 먼저 <code class=\"language-text\">hoisting</code> 되고, 이후에 값을 할당 받고 이전에 호출할 시 <code class=\"language-text\">undefined</code>라는 값을 보였었다.</p>\n<p>즉, 선언은 되었지만 값은 존재하지 않는 상태이다.</p>\n<p>하지만, <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>는 초기화되지 않았다는 에러가 바로 발생했었는데, 이러한 점으로 이 둘은 <code class=\"language-text\">hoisting</code>이 작동되지 않는다 라는 말도 있지만, 사실 그렇지 않고 이 <strong>초기화</strong> 라는 문구에 차이가 있다.</p>\n<h2 id=\"tdz---temporal-dead-zone\" style=\"position:relative;\"><a href=\"#tdz---temporal-dead-zone\" aria-label=\"tdz   temporal dead zone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDZ - Temporal Dead Zone</h2>\n<p><code class=\"language-text\">TDZ</code>란, 변수 함수 등의 <strong>선언 단계</strong>부터 <strong>초기화 단계</strong> 사이의 사각지대라고 한다.\n컨텍스트(전역 or 함수)가 생성되면서 변수 함수 등은 각각의 <code class=\"language-text\">TDZ</code> 순서에 따라 변수객체에 담긴다.</p>\n<p>함수나 변수 등이 컨텍스트의 변수 객체에 담기는 데에는 3가지 단계가 존재한다.</p>\n<ol>\n<li>\n<p>선언 단계 : 변수를 실행 컨텍스트의 변수 객체에 등록하는 단계로, 이후에 스코프는 해당 변수 객체를 참조한다.</p>\n<blockquote>\n<p><code class=\"language-text\">var a = 1</code> => <code class=\"language-text\">{a}</code></p>\n</blockquote>\n</li>\n<li>\n<p>초기화 단계 : 변수 객체에 담긴 변수에 필요한 메모리를 만드는 단계로, 이 단계에서 할당된 메모리에 <code class=\"language-text\">undefined</code>를 통해 먼저 초기화시킨다.</p>\n<blockquote>\n<p><code class=\"language-text\">var a = 1</code> => <code class=\"language-text\">{a : undefined}</code></p>\n</blockquote>\n</li>\n<li>할당 단계 : <code class=\"language-text\">undefined</code>로 초기화된 변수의 메모리에 사용자가 지정했던 값을 할당하는 단계이다.</li>\n</ol>\n<h3 id=\"var\" style=\"position:relative;\"><a href=\"#var\" aria-label=\"var permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>var</h3>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/04/30/1.jpg\" alt=\"1\">\n</div>\n<p><code class=\"language-text\">var</code> 변수가 선언되기 전에 조회를 하였을 때 <code class=\"language-text\">hoisting</code>으로 인하여 <code class=\"language-text\">undefined</code> 라는 결과값을 반환한다.</p>\n<p>이러했던 이유는, <code class=\"language-text\">var</code>의 경우 <code class=\"language-text\">hoisting</code>을 하면서 선언 단계와 초기화 단계가 동시에 일어나기 때문이다.</p>\n<h3 id=\"let-const\" style=\"position:relative;\"><a href=\"#let-const\" aria-label=\"let const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let, const</h3>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/04/30/2.jpg\" alt=\"2\">\n</div>\n<p><code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>의 경우 <code class=\"language-text\">var</code>과 다르게 좀 더 엄격하게 3가지 단계를 모두 거쳐서 변수가 선언되게 되는데 이러한 차이때문에 다른 결과를 보이는 것이다.</p>\n<p><code class=\"language-text\">let</code> 변수 이전에 조회를 하였을 때, 선언 단계는 진행이 되었지만 초기화 단계에서 메모리 할당이 되지 않아</p>\n<blockquote>\n<p><code class=\"language-text\">Cannot access &#39;let 변수 or const 상수&#39; before initialization</code></p>\n</blockquote>\n<p>라는 에러가 발생하는 것이다.</p>","frontmatter":{"title":"var vs let의 차이와 기준이 되는 TDZ","date":"April 30, 2021"}}},"pageContext":{"slug":"/Study/Think/var vs let tdz/","previous":{"fields":{"slug":"/Study/Think/css-in-css & css-in-js/"},"frontmatter":{"title":"CSS-in-CSS, CSS-in-JS","category":"Study","draft":false,"tag":"Think"}},"next":null}},"staticQueryHashes":["3128451518","3665928227","479399088"]}