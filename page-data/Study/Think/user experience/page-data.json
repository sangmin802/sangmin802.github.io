{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/user experience/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"f51b6cf6-0480-5caf-b46f-9ac44bcf425c","excerpt":"개인 프로젝트를 배포할 때, 대부분 를,기반이라면 을 사용해서 배포를 하였다. 또한 서버가 필요할 때에는 를 사용해오고 있었다. 무료의 노예 아무래도 무료로 배포할 수 있는 서버리스 방식이기 때문에 를 통해 직접 배포를 하는것 보다는 좀 많이 성능의 차이가 있는것 같긴 하다. 시간이라던지 .. 로 배포된 서버는 아무래도 람다식이라서 타임또한 존재하는것 같았다. 비동기 pending…","html":"<p>개인 프로젝트를 배포할 때, 대부분 <code class=\"language-text\">gh-pages</code>를,<code class=\"language-text\">SSR</code>기반이라면 <code class=\"language-text\">vercel</code>을 사용해서 배포를 하였다.</p>\n<p>또한 서버가 필요할 때에는 <code class=\"language-text\">heroku</code>를 사용해오고 있었다.</p>\n<blockquote>\n<p>무료의 노예</p>\n</blockquote>\n<p>아무래도 무료로 배포할 수 있는 서버리스 방식이기 때문에 <code class=\"language-text\">AWS</code>를 통해 직접 배포를 하는것 보다는 좀 많이 성능의 차이가 있는것 같긴 하다.</p>\n<blockquote>\n<p>시간이라던지 ..</p>\n</blockquote>\n<p><code class=\"language-text\">heroku</code>로 배포된 서버는 아무래도 람다식이라서 <code class=\"language-text\">freeze</code>타임또한 존재하는것 같았다.</p>\n<h2 id=\"비동기-pending-시간\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-pending-%EC%8B%9C%EA%B0%84\" aria-label=\"비동기 pending 시간 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 pending 시간</h2>\n<p>위와 같은 상황으로 인해 시간이 더 걸린다는점 + 외부 <code class=\"language-text\">api</code>로부터 정보를 받아와야 하는 경우이기 때문에, <code class=\"language-text\">cors origin</code>에러로 인한 <code class=\"language-text\">proxy</code>서버를 거쳐야 한다는 점 + 기본 작업시간</p>\n<p>어마어마하다..</p>\n<p>심지어는, <code class=\"language-text\">async</code> <code class=\"language-text\">await</code>을 통해 동기식으로 일을 처리하는 과정에서 처음 비동기 작업을 통한 결과값이 있어야만 다음 비동기작업이 진행될 수 있는 경우도 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> data2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchSomething2</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></code></pre></div>\n<p>대략 이런느낌?</p>\n<p><code class=\"language-text\">freeze</code> 시간을 고려하여 계산해보았을 때, 첫 비동기작업이 완료되기까지의 시간은 <code class=\"language-text\">3초</code>였다.</p>\n<blockquote>\n<p>사실 <code class=\"language-text\">3초</code>도 매우 긴시간..</p>\n</blockquote>\n<p>게다가 다음 비동기작업의 평균 완료시간은 <code class=\"language-text\">2초</code>였다</p>\n<p>두번째 비동기작업으로 얻어오는 결과값이 화면을 렌더링하는데 필수적인 값이라면, 어쩔수 없는 시간이겠지만 그렇지 않은상황이였다.</p>\n<h2 id=\"사용자에게-우선순위가-낮은-렌더링을-위한-비동기작업\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90%EC%97%90%EA%B2%8C-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84%EA%B0%80-%EB%82%AE%EC%9D%80-%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%9E%91%EC%97%85\" aria-label=\"사용자에게 우선순위가 낮은 렌더링을 위한 비동기작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용자에게 우선순위가 낮은 렌더링을 위한 비동기작업</h2>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/08/06/1.PNG?raw=true\" alt=\"abortcontroller\">\n</div>\n<p>위의 화면을 구성하는 요소들 대부분은 하나의 비동기작업으로 모두 처리되지만, 유일하게 <code class=\"language-text\">수집형포인트</code>에 대한 항목을 렌더링 하기 위해서는 첫 비동기작업의 결과값을 <code class=\"language-text\">query</code>변수로 하여 새롭게 비동기 요청을 해야 했다.</p>\n<p>하지만, 굳이 저 작업을 함께 해야 하는 생각이 들었다.</p>\n<ol>\n<li>수집형 포인트의 항목은 처음에 바로 보여야 하는것이 아닌, 사용자의 이벤트로 해당 항목이 활성화 되어야 화면에 보여짐</li>\n<li>레이아웃에서 필수 항목이 아닌 선택적인 항목으로 사용자는 해당 데이터를 확인하지 않을 수 있음</li>\n</ol>\n<h3 id=\"렌더링-이후-비동기-요청으로-변경\" style=\"position:relative;\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%9D%B4%ED%9B%84-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9A%94%EC%B2%AD%EC%9C%BC%EB%A1%9C-%EB%B3%80%EA%B2%BD\" aria-label=\"렌더링 이후 비동기 요청으로 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링 이후, 비동기 요청으로 변경</h3>\n<p>화면에 필수적으로 보여야 하는 첫 렌더링이 완료된다면, 화면을 그리고 사용자가 컨텐츠를 확인하는 동안 <code class=\"language-text\">수집형포인트</code>에 대한 비동기작업을 실행하기로 하였다.</p>\n<p>이후, 비동기 작업이 완료되었다면, 데이터를 받고 화면을 그린다.</p>\n<p>이미 <code class=\"language-text\">AsyncBoundary</code>와 <code class=\"language-text\">React-Query</code>를 통한 비동기작업 로직들을 컴포넌트로 관리하고 있었기 때문에, 추가하는것 자체는 어려움이 없었다.</p>\n<p>또한, 당연하게도 <code class=\"language-text\">수집형포인트</code>를 얻어오기 위한 비동기작업이 진행중인 상태에 새로운 유저 검색을 하게 된다면, 진행중인 작업은 <code class=\"language-text\">cancel</code>되도록 하기로 했다.</p>\n<blockquote>\n<p>이전, <code class=\"language-text\">Event</code>, <code class=\"language-text\">Calendar</code>에 대한 <code class=\"language-text\">abort</code> 작업에 이어서</p>\n</blockquote>\n<h3 id=\"suspense로-인한-cancel-방식-변경\" style=\"position:relative;\"><a href=\"#suspense%EB%A1%9C-%EC%9D%B8%ED%95%9C-cancel-%EB%B0%A9%EC%8B%9D-%EB%B3%80%EA%B2%BD\" aria-label=\"suspense로 인한 cancel 방식 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Suspense로 인한 cancel 방식 변경</h3>\n<p>사실, <code class=\"language-text\">Suspense</code>를 사용하게 되면서 이전에 진행중인 <code class=\"language-text\">fetch</code>를 <code class=\"language-text\">cancel</code>하는 방식또한 개조해서 사용하였다.</p>\n<p>원래대로라면, <code class=\"language-text\">useQuery</code>가 <code class=\"language-text\">loading</code>, <code class=\"language-text\">error</code>등의 상태를 포함한 인스턴스에 <code class=\"language-text\">cancel</code> 메소드를 포함하여 <code class=\"language-text\">return</code> 할 때 <code class=\"language-text\">queryClient.cancelQueries</code>를 통해 <code class=\"language-text\">cancel</code>을 호출하여 <code class=\"language-text\">abort</code>시키는 것이 공식문서에서 제안된 방법이였다.</p>\n<p>하지만 <code class=\"language-text\">Suspense</code>모드의 특성상 성공할 경우에만 <code class=\"language-text\">return</code>을 하기 때문에 중간에는 어떠한 방법으로도 <code class=\"language-text\">cancel</code>을 호출할 수 없었다.</p>\n<p>따라서, <code class=\"language-text\">queryCancel</code>, <code class=\"language-text\">abort</code>를 분리하여 별도로 실행시켜주었었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useCancelQuery</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">queryKey</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      queryKey<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// key의 query 중단</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">isFetching</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">cancelQueries</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// key에 대한 캐싱된 값 초기화</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryData</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">resetQueries</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exact</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>queryClient<span class=\"token punctuation\">,</span> queryKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">업데이트</code> 되거나, <code class=\"language-text\">언마운트</code> 될 때캐싱된 <code class=\"language-text\">key</code>에 대한 <code class=\"language-text\">fetching</code> 중단및 저장된 <code class=\"language-text\">undefined</code>값을 초기화 해주는 <code class=\"language-text\">hook</code>이다.</p>\n<p>이것을 통해 <code class=\"language-text\">query</code>의 작업을 막을수는 있지만 호출된 비동기작업을 막을수는 없기 때문에</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getUserData <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>UserInfo<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cancel<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//...</span></code></pre></div>\n<p>위와 같은 방식으로 중단을 시켜주었었다.</p>\n<blockquote>\n<p><code class=\"language-text\">axios</code> 사용으로 <code class=\"language-text\">cancelToken</code>을 이용함</p>\n</blockquote>\n<h2 id=\"비동기-작업-분리를-통한-사용자-경험-향상\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EB%B6%84%EB%A6%AC%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%82%AC%EC%9A%A9%EC%9E%90-%EA%B2%BD%ED%97%98-%ED%96%A5%EC%83%81\" aria-label=\"비동기 작업 분리를 통한 사용자 경험 향상 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 작업 분리를 통한 사용자 경험 향상</h2>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/08/06/4.png?raw=true\" alt=\"abortcontroller\">\n</div>\n<p>기존, 유저를 검색하고 <code class=\"language-text\">suspense</code>기간을 지나 화면을 보게되는데 까지의 걸리는 시간이다.</p>\n<p>첫 <code class=\"language-text\">유저정보</code>를 받는 비동기작업 + <code class=\"language-text\">수집형포인트</code>를 이어서 받는 비동기작업 모두 합쳐서 <code class=\"language-text\">3초</code>정도의 시간이 지나야 렌더링이 된다.</p>\n<blockquote>\n<p>진짜 시간 미쳤다.</p>\n</blockquote>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/08/06/5.png?raw=true\" alt=\"abortcontroller\">\n</div>\n<p><code class=\"language-text\">수집형포인트</code>에 대한 비동기 작업을 첫 <code class=\"language-text\">유저정보</code>화면이 렌더링 된 이후에 진행되도록 한 결과물이다.</p>\n<p><code class=\"language-text\">2초</code> 정도의 시간이 소요 되었다.</p>\n<blockquote>\n<p>회색부분은 <code class=\"language-text\">수집형포인트</code> 비동기 작업이 진행중에 <code class=\"language-text\">cancel</code>된 상태</p>\n</blockquote>\n<p>사용자가 <code class=\"language-text\">suspense</code>기간을 지나 첫 렌더링 화면을 접하게 되는데 <code class=\"language-text\">1초</code> 정도의 시간이 줄게되었다.</p>\n<p>적어보이는 수치같지만, 사용자에게 있어 <code class=\"language-text\">1초</code>는 매우 긴시간이니 의미있는 개선작업이 아니였나 싶다.</p>","frontmatter":{"title":"⚛ 비동기 작업 분리를 통한 사용자 경험 향상 및 Suspense에 대한 고민","date":"August 06, 2021"}}},"pageContext":{"slug":"/Study/Think/user experience/","previous":{"fields":{"slug":"/Study/Think/abort fetch/"},"frontmatter":{"title":"⚛ React-Query cancel과 Fetch cancel(feat debounce)","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/git flow/"},"frontmatter":{"title":"🌿git flow 브랜치 전략을 사용하여 안전하게 프로젝트 관리해보기","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}