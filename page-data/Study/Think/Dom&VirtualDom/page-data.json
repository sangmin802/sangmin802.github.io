{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/Dom&VirtualDom/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"e43e6523-4479-58e9-8291-1263270e8251","excerpt":"🤔 의문 이전 으로 간단한 로스트아크 유저검색 앱을 만든 뒤, 취미? 개념으로 를 써서 조금 더 규모있게 웹 앱을 만들고 있다. 물론.. 공식적으로 제공되는 API가 아니라 완성된 DOM을 하나하나 뜯어서 정보를 추출하고 있기때문에 시간은 좀 걸리더라 ㅎㅎ; 그래도 재미는 있으니 다행 구글링 중 와 관련이 깊다는 이라는 용어를 보았는데, 를 사용하는데도 해당 용어가 낯설어서 알아보기로 했다. DOM 기본적으로 우리는 View 화면을 구성할 때, HTML Elements…","html":"<h3 id=\"-의문\" style=\"position:relative;\"><a href=\"#-%EC%9D%98%EB%AC%B8\" aria-label=\" 의문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 의문</h3>\n<p>이전 <code class=\"language-text\">Kotlin</code>으로 간단한 로스트아크 유저검색 앱을 만든 뒤, 취미? 개념으로 <code class=\"language-text\">React</code>를 써서 조금 더 규모있게 웹 앱을 만들고 있다. 물론.. 공식적으로 제공되는 API가 아니라 완성된 DOM을 하나하나 뜯어서 정보를 추출하고 있기때문에 시간은 좀 걸리더라 ㅎㅎ; 그래도 재미는 있으니 다행</p>\n<p>구글링 중 <code class=\"language-text\">React</code>와 관련이 깊다는 <code class=\"language-text\">Virtual DOM</code>이라는 용어를 보았는데, <code class=\"language-text\">React</code>를 사용하는데도 해당 용어가 낯설어서 알아보기로 했다.</p>\n<h3 id=\"dom\" style=\"position:relative;\"><a href=\"#dom\" aria-label=\"dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM</h3>\n<p>기본적으로 우리는 View 화면을 구성할 때, HTML Elements등을 활용하여 구조를 짜면 브라우저가 그것을 읽고 렌더링을 하게된다.</p>\n<br>\n<br>\n이후 우리는\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'안녕'</span> <span class=\"token comment\">// 첫번째 렌더링</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'tomato'</span> <span class=\"token comment\">// 두번째 렌더링</span></code></pre></div>\n<p>이런식으로 사용자가 어떠한 요청을 하였을 때, <code class=\"language-text\">DOM</code>에 직접적으로 변화를 줘 왔다.</p>\n<br>\n<br>\n그런데 만약에..\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'안녕'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'tomato'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'안녕하'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'안녕하세'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>이렇게 100개의 변경이 있다고하면 <code class=\"language-text\">DOM</code>은 몇번 렌더링이 되는걸까..?</p>\n<h3 id=\"virtual-dom\" style=\"position:relative;\"><a href=\"#virtual-dom\" aria-label=\"virtual dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtual DOM</h3>\n<p><code class=\"language-text\">Virtual DOM</code>이란 <code class=\"language-text\">DOM</code>을 추상화한 가상의 객체를 메모리에 만들어놓는것이다.</p>\n<p>위처럼 사용자에 의해 변경사항이 있다면 <code class=\"language-text\">DOM</code>에 직접수정하는것이 아니라 중간단계로 <code class=\"language-text\">Virtual DOM</code>을 수정하고, <code class=\"language-text\">Virtual DOM</code>에서 기존의 값과 변경된 값을 감지하여 필요한 부분만 변경을 시킨다.</p>\n<p>이 때, <code class=\"language-text\">React</code>는 업데이트를 할 때, 노드간의 속성 비교 등으로 구분을 하는데, <code class=\"language-text\">map</code>과 같은 메소드로 비슷한 구조의 노드가 여러개 생성될 경우 고유한 값을 <code class=\"language-text\">key</code>로 하여 구분짓는다.</p>\n<p>생성되는 <code class=\"language-text\">DOM</code>노드들의 변화가 없이 정적이라면 <code class=\"language-text\">map</code>에서 제공하는 <code class=\"language-text\">index</code>를 사용해도 무방하지만, 변화가 있는 경우에는 <code class=\"language-text\">id</code>같은 고유한 값을 사용해주어야 한다.</p>\n<blockquote>\n<p>예제를 살펴보니, <code class=\"language-text\">input text</code>와 같은 노드들의 <code class=\"language-text\">index</code>가 바뀌니 입력한 값들은 이동되지 않고 아래로 누락되는? 에러가 발생했음</p>\n</blockquote>\n<p>어쩄든, <code class=\"language-text\">Virtual DOM</code>은 <code class=\"language-text\">SPA</code> 특성상 <code class=\"language-text\">DOM</code>에 렌더링이 지속적으로 자주 발생하는점에 대해 <code class=\"language-text\">reflow</code>가 여러번, 많이, 모든 노드에 발생하는 성능상의 문제를 개선하기 위해, 필요한부분만, 변화를 모아서 일괄처리해주어 성능개선에 도움을 준다고 한다.</p>\n<h3 id=\"영상\" style=\"position:relative;\"><a href=\"#%EC%98%81%EC%83%81\" aria-label=\"영상 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영상</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=muc2ZF0QIO4\">VirtualDOM and React</a></li>\n<li><a href=\"https://velopert.com/3236\">why virtual dom</a></li>\n<li><a href=\"https://programmingwithmosh.com/react/react-virtual-dom-explained/\">react virtual dom</a></li>\n</ul>","frontmatter":{"title":"DOM 과 Virtual Dom","date":"October 21, 2020"}}},"pageContext":{"slug":"/Study/Think/Dom&VirtualDom/","previous":{"fields":{"slug":"/Study/Android/lostarkHands/"},"frontmatter":{"title":"Kotlin LostArk Hands","category":"Study","draft":false,"tag":"Android"}},"next":{"fields":{"slug":"/Study/Think/loa-hands/"},"frontmatter":{"title":"React Loa-Hands","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}