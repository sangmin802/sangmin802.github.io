{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/react18/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"ab22b3ae-2f07-526a-ae46-74235bebfb76","excerpt":"React1…","html":"<h2 id=\"react18-등장\" style=\"position:relative;\"><a href=\"#react18-%EB%93%B1%EC%9E%A5\" aria-label=\"react18 등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React18 등장</h2>\n<p>현재 개인 토이프로젝트도 <code class=\"language-text\">Susepnse</code> 기능을 사용하고 있다. 해당 기능은 사실 <code class=\"language-text\">React18</code> 버전 출시 이전에 실험용으로 제공되는 기능으로 표시되어 있었다.</p>\n<blockquote>\n<p>근데 개인적으로 사용하는데에 큰 문제는 없었음</p>\n</blockquote>\n<p>그리고 얼마전 <code class=\"language-text\">React18</code>버전이 <code class=\"language-text\">동시성</code>이라는 키워드와 함께 정식적으로 릴리즈되었다.</p>\n<p>그것에 대해 알아보고, 기록하고자 한다.</p>\n<blockquote>\n<p>충분시 수정될 여지가 많은 기록</p>\n</blockquote>\n<h2 id=\"동시성\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1\" aria-label=\"동시성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성</h2>\n<p>대략적으로 이해한 바로는 화면을 그리기 위해 데이터를 받아오는 등의 작업을 수행할 때 사용자는 일시적으로 사용자가 작업을 수행할 수 없지만, 그러한 작업 중에도 사용자의 작업을 동시에 수행하고, 즉시 응답할 수 있어야 사용자에게 좋은 경험을 제공해준다.</p>\n<blockquote>\n<p>비동기랑 뭐가 다르지 라는 생각도 든다..</p>\n</blockquote>\n<p><code class=\"language-text\">React</code> 공식문서에서의 표현이 있다.</p>\n<ol>\n<li>CPU 바운드 업데이트(예를 들어 DOM 노드 만들기 및 컴포넌트 코드 실행)의 경우 Concurrency는 더욱 긴급한 업데이트가 이미 시작한 렌더링을 “중단” 할 수 있음을 의미합니다.</li>\n<li>IO 바운드 업데이트(예를 들어 네트워크에서 코드나 데이터를 가져오는 것)의 경우 Concurrency는 모든 데이터가 도달하기 전에 React가 메모리에서 렌더링을 시작할 수 있으며 빈 로딩 state표시를 무시할 수 있음을 의미합니다.</li>\n<li><a href=\"https://programming119.tistory.com/242\">동시성에 대한 글</a></li>\n</ol>\n<h2 id=\"신규기능\" style=\"position:relative;\"><a href=\"#%EC%8B%A0%EA%B7%9C%EA%B8%B0%EB%8A%A5\" aria-label=\"신규기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>신규기능</h2>\n<h3 id=\"usetransition---전환\" style=\"position:relative;\"><a href=\"#usetransition---%EC%A0%84%ED%99%98\" aria-label=\"usetransition   전환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useTransition - 전환</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isDelay<span class=\"token punctuation\">,</span> setTransition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 단일로 사용 시</span>\n<span class=\"token comment\">// 다만 isDelay라는 지연중인 상태를 따로 제공하지 않음. 공식문서에서는 useTransition 권장</span>\n<span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">setTransition</code>으로 감싼 ★상태 업데이트★는 비교적 긴급하지 않은 이벤트로 전환시켜준다.</p>\n<p>만약 사용자의 <code class=\"language-text\">input</code> 이벤트가 호출이 되고 그 값을 저장하는 <code class=\"language-text\">setState</code>가 있다고 가정 <code class=\"language-text\">setState</code>를 위의 <code class=\"language-text\">hook</code>으로 전환시켜주면 사용자의 <code class=\"language-text\">input</code> 이벤트가 계속 진행중일 때에는 <code class=\"language-text\">setState</code>가 중단된다는것 같음.</p>\n<p>다른 페이지로 이동하거나, 특정 컴포넌트를 렌더링하는데 데이터가 준비되자 않았을 경우 로딩스피너를 통해 사용자에게 준비중을 알림.</p>\n<p>이것이 최선의 방법이라고 생각하여 사용해왔지만 때로는 이전의 데이터를 보여주는것이 더 바람직한 경우가 있음</p>\n<blockquote>\n<p>테이블 리스트를 보여주고 페이지네이션으로 이동하는 등</p>\n</blockquote>\n<p>이 때 <code class=\"language-text\">useTransition</code>을 사용하여 새로운 데이터를 불러오는 로직 자체를 긴급하지 않음으로 설정하여 이전의 <code class=\"language-text\">ui</code>를 유지시킬 수 있음.\n한가지 궁금한점은, 비동기를 효율적으로 관리하기 위해 사용되는 <code class=\"language-text\">React-Query</code>에는 이전의 데이터를 유지할 수 있는 기능과 <code class=\"language-text\">isFetching</code>으로 기존의 <code class=\"language-text\">ui</code>는 유지하고 최신의 데이터를 받아오는 중임을 상태를 알려주는데, 이와 <code class=\"language-text\">useTransition</code>이 어떤 차이가 있을지 궁금</p>\n<blockquote>\n<p>아예 데이터가 존재하지 않아서 보여줄 <code class=\"language-text\">ui</code>가 없을 때에는 <code class=\"language-text\">Suspense.fallback</code>으로 로딩스피너를, 이전의 <code class=\"language-text\">ui</code>가 존재한다면 그것을 유지하는</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=Kd0d-9RQHSw\">전환을 사용하여 ui 작업을 동시에</a></li>\n</ul>\n<h3 id=\"usedeferredvalue---외부에서-관리하는-상태에-대한-전환\" style=\"position:relative;\"><a href=\"#usedeferredvalue---%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EC%83%81%ED%83%9C%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%84%ED%99%98\" aria-label=\"usedeferredvalue   외부에서 관리하는 상태에 대한 전환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useDeferredValue - 외부에서 관리하는 상태에 대한 전환</h3>\n<p><code class=\"language-text\">redux</code>같은 다른 라이브러리나 <code class=\"language-text\">props</code>로 전달받은 상태에 전환을 부여하고자 할 때는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> 전환상태 <span class=\"token operator\">=</span> <span class=\"token function\">useDeferredValue</span><span class=\"token punctuation\">(</span>상태<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위처럼 사용할 수 있음. 이 또한 <code class=\"language-text\">isDelay</code>가 제공되는것 같지는 않음</p>\n<h3 id=\"usetransition-전환-훅-느낌\" style=\"position:relative;\"><a href=\"#usetransition-%EC%A0%84%ED%99%98-%ED%9B%85-%EB%8A%90%EB%82%8C\" aria-label=\"usetransition 전환 훅 느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useTransition 전환 훅 느낌</h3>\n<p>10000개의 리스트를 검색값에 대한 filter를 통해 렌더링을 진행할 때 123을 쳤다가 블락잡아서 한번에 지웠을 경우를 생각</p>\n<p>그러면 10000개의 리스트를 다시 계산하느라 렌더링이 중단되고 사용자가 지웠다는 행위도 반영되지 않았다가 리스트 계산이 종료되면 지웠다는 행위가 ui에 반영되고, 리스트도 같이 반영됨</p>\n<p>만약, 전환기능을 사용했다면 123을 블락잡아서 지웠을 때 바로 지워진 ui가 반영되고 10000개의 리스트가 계산되어 따로따로 ui에 반영됨</p>\n<p>마치 두개가 서로 다른 스레드에서 계산되고 ui에 반영되는것처럼 보여짐</p>\n<blockquote>\n<p>동시성이 한번에 이해되는 결과</p>\n</blockquote>\n<p>그런데, <code class=\"language-text\">useEffect</code>로 관리하는것도 따로 구현을 해보았는데 그거랑 결과가 유사하게 보이기는 함</p>\n<p>아마 <code class=\"language-text\">useEffect</code>와 리스트를 갱신하는 <code class=\"language-text\">setState</code> 둘다 비동기라서 ui 렌더링 이후에 작동되어서 그런게 아닐까 싶음</p>\n<p>결과는 유사하게 보이긴 하는데 <code class=\"language-text\">useEffect</code>가 <code class=\"language-text\">ui</code>를 그리는것과 로직을 수행하는것이 동시에 수행되는것은 아니라서 <code class=\"language-text\">useTransition</code>의 <code class=\"language-text\">ui</code>를 동시에 그린다라는것은 뭔가 차이가 있을것 같긴 함.</p>\n<blockquote>\n<p>중간에 <code class=\"language-text\">isDealy</code>를 통해 <code class=\"language-text\">ui</code>를 추가할 수 있는것은 위처럼 10000개의 무거운 작업을 수행하는 메인스레드와 별개로 수행되는것 처럼</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=lDukIAymutM\">10000개의 리스트와 전환</a></li>\n</ul>\n<h3 id=\"suspense\" style=\"position:relative;\"><a href=\"#suspense\" aria-label=\"suspense permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Suspense</h3>\n<p>컴포넌트 중단을 통해 준비되지 않은 컴포넌트가 마운트되고 언마운트 되는 렌더링 비용을 줄일 수 있음</p>\n<ul>\n<li><a href=\"https://github.com/reactjs/rfcs/blob/main/text/0213-suspense-in-react-18.md#behavior-change-committed-trees-are-always-consistent\">깃 suspense를 사용한 로딩처리에 대한 변경점</a></li>\n</ul>\n<h2 id=\"별도\" style=\"position:relative;\"><a href=\"#%EB%B3%84%EB%8F%84\" aria-label=\"별도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>별도</h2>\n<h3 id=\"reac18-typescript\" style=\"position:relative;\"><a href=\"#reac18-typescript\" aria-label=\"reac18 typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reac18-TypeScript</h3>\n<p><code class=\"language-text\">React</code>의 버전이 18로 올라가면서, 이에 타입스크립트도 변화가 생겼음.</p>\n<p>대부분은 큰 문제가 없지만, 조금 수정이 필요했던것이 <code class=\"language-text\">React.FC</code>에 내부적으로 처리를 해주고 있던 <code class=\"language-text\">PropsWithChildren</code> 제너릭 타입이 사라졌다.</p>\n<p><code class=\"language-text\">React.FC</code>타입을 지정해주면 자연스럽게 사용할 수 있었던 <code class=\"language-text\">children</code>속성이 이제는 에러를 반환한다.</p>\n<blockquote>\n<p><code class=\"language-text\">children</code>속성을 사용할 경우 직접 타입을 명시해주는것이 더 올바르다고 생각하는 것 같다. - 그런것 같기도</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/46691\">React18 타입 이슈</a></li>\n<li><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/commit/55dc209ceb6dbcd59c4c68cc8dfb77faadd9de12#diff-32cfd8cb197872bcba371f5018185d2e75fa540b52cda2dd7d8ac12dcc021299L500\">React18 타입 변경 커밋</a></li>\n</ul>\n<p>위와 같은 방식으로 제공되는 모듈이 있었는데, <code class=\"language-text\">React-Query</code></p>\n<p><code class=\"language-text\">React18</code>의 타입을 맞추면 <code class=\"language-text\">QueryProvider</code>에서 <code class=\"language-text\">children</code> 속성의 에러가 반환되었었다.</p>\n<p><code class=\"language-text\">React-Query</code> 또한 내부적으로 이전의 <code class=\"language-text\">React.FC</code>를 사용하고 있었고, 그것의 <code class=\"language-text\">PropsWithChildren</code>에 의존하고 있던것!</p>\n<p><code class=\"language-text\">v3</code>에서 바로 수정되었다</p>\n<ul>\n<li><a href=\"https://github.com/tannerlinsley/react-query/pull/3520/files\">수정사항이 담긴 커밋</a></li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://ko.reactjs.org/docs/concurrent-mode-intro.html\">공식문서 동시성</a></li>\n<li><a href=\"https://reactjs.org/docs/react-dom-client.html#createroot\">공식문서 변경사항</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usetransition\">공식문서 useTransition</a></li>\n</ul>","frontmatter":{"title":"React 18 준비하기","date":"May 07, 2022"}}},"pageContext":{"slug":"/Study/Think/react18/","previous":{"fields":{"slug":"/Study/Think/mouse and click issue/"},"frontmatter":{"title":"🖱 동일 요소의 클릭이벤트, 마우스이벤트 이슈","category":"Study","draft":false,"tag":"Think"}},"next":null}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}