{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/git/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"4db895ad-054c-5c07-9cbd-d3df41cc764e","excerpt":"깃 버전관리시스템 깃을 꾸준히 사용해오고있지만, 처음부터 GUI인 깃허브데스크탑을 사용하여 터미널을 활용하는 오리지널은 잘 모른다.. 또한, 터미널을 사용하지 않고 GUI를 사용할 경우, 편리하지만 실제로 어떻게 작동하는지를 잘 모르며 기능사용에 있어 한정적이기 떄문에 터미널을 사용하는 오리지널 버전을 공부해보기로했다. 시작하기 pc에 기본적으로 내장되어있는 터미널을 사용해도 되지만, 더 편리한 기능을 제공하는 터미널을 사용하고싶다면 맥 : iTerm2 윈도우 : Cmder…","html":"<h1 id=\"깃\" style=\"position:relative;\"><a href=\"#%EA%B9%83\" aria-label=\"깃 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깃</h1>\n<ul>\n<li>버전관리시스템 깃을 꾸준히 사용해오고있지만, 처음부터 GUI인 깃허브데스크탑을 사용하여 터미널을 활용하는 오리지널은 잘 모른다..</li>\n<li>또한, 터미널을 사용하지 않고 GUI를 사용할 경우, 편리하지만 실제로 어떻게 작동하는지를 잘 모르며 기능사용에 있어 한정적이기 떄문에 터미널을 사용하는 오리지널 버전을 공부해보기로했다.</li>\n</ul>\n<h2 id=\"시작하기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기</h2>\n<ul>\n<li>\n<p>pc에 기본적으로 내장되어있는 터미널을 사용해도 되지만, 더 편리한 기능을 제공하는 터미널을 사용하고싶다면</p>\n<ul>\n<li>맥 : iTerm2</li>\n<li>윈도우 : Cmder (깃이 기본적으로 설치되어있음)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"기본설정\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EC%84%A4%EC%A0%95\" aria-label=\"기본설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본설정</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">git config ~~</code> 커맨드로 현재 깃의 설정을 할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">git config --list</code> : 리스트로 확인</li>\n<li><code class=\"language-text\">git config --global -e</code> : 파일로 확인</li>\n<li><code class=\"language-text\">git config --global user.name</code> : 유저명 설정</li>\n<li><code class=\"language-text\">git config --global user.email</code> : 유저이메일 설정</li>\n<li><code class=\"language-text\">git config --global core.autocrlf</code> : 운영체제마다 에디터에서 줄바꿈을 할 때, 삽입되는 문자열이 다른데(\\r, \\n), 이러한 차이점때문에 하나의 리포지토리를 다양한 운영체제로 사용할 때 에러가 생길 수 있다. 이것을 통일화시켜주는 명령어다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"깃-생성과-제거\" style=\"position:relative;\"><a href=\"#%EA%B9%83-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%A0%9C%EA%B1%B0\" aria-label=\"깃 생성과 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깃 생성과 제거</h2>\n<ul>\n<li><code class=\"language-text\">mkdir git</code> : 만들 프로젝트 내부에 깃 폴더를 만든다.</li>\n<li><code class=\"language-text\">git init</code> : 깃을 설치해준다. 깃에 관련된 모든 정보들이 담기는 폴더이다.</li>\n<li><code class=\"language-text\">rm -rf .git</code> : 깃을 삭제하여, 깃 기능을 제거한다.</li>\n</ul>\n<h2 id=\"깃의-workflow\" style=\"position:relative;\"><a href=\"#%EA%B9%83%EC%9D%98-workflow\" aria-label=\"깃의 workflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깃의 WorkFlow</h2>\n<ul>\n<li>깃 히스토리는 로컬에만 저장되기 때문에, Github라는 서버에 push 명령어를 통해 업로드 가능하며, pull로 다운받을 수 있다.</li>\n</ul>\n<h3 id=\"working-directory\" style=\"position:relative;\"><a href=\"#working-directory\" aria-label=\"working directory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working directory</h3>\n<ul>\n<li><code class=\"language-text\">git status</code> : 현재 진행중인 작업을 표시해준다.</li>\n<li>\n<p>현재 작업중인 영역</p>\n<ul>\n<li><code class=\"language-text\">git add 파일명</code> : Staging area로 넘긴다</li>\n<li><code class=\"language-text\">echo 파일명 > .gitignore</code> : 깃에 저장하고싶지 않은 파일 혹은 폴더</li>\n<li>\n<p><code class=\"language-text\">git diff</code> : 현재 변경된 파일의 내용을 보여준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">diff <span class=\"token operator\">--</span>git a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">.</span>txt b<span class=\"token operator\">/</span>b<span class=\"token punctuation\">.</span>txt\nindex 12a8798<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>ec9d6e4 <span class=\"token number\">100644</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span> a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">.</span>txt\n<span class=\"token operator\">++</span><span class=\"token operator\">+</span> b<span class=\"token operator\">/</span>b<span class=\"token punctuation\">.</span>txt\n<span class=\"token comment\">// 이전버전(Staging area에 있거나, 푸시된) b 파일과, 현재버전의 b 파일을 비교</span>\n<span class=\"token operator\">...</span> <span class=\"token comment\">// 변경된 사항 나옴</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">tracked</code> : 깃이 정보를 알고있는 파일</p>\n<ul>\n<li><code class=\"language-text\">modified</code> : 수정이 된 파일 (해당 파일만 Staging area로 넘겨질 수 있다.)</li>\n<li><code class=\"language-text\">unmodified</code> : 수정이 되지 않은 파일</li>\n</ul>\n</li>\n<li><code class=\"language-text\">untracked</code> : 깃이 정보를 모르고있는 파일</li>\n<li>처음 파일이 만들어지면 모두 <code class=\"language-text\">untracked</code> 파일이다</li>\n<li>한번 Staging area로 <code class=\"language-text\">add</code>된 파일은, <code class=\"language-text\">tracked</code>파일이 되서, 이후 수정사항이 생기면 <code class=\"language-text\">modified</code>가 된다.</li>\n</ul>\n<h3 id=\"staging-area\" style=\"position:relative;\"><a href=\"#staging-area\" aria-label=\"staging area permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Staging area</h3>\n<ul>\n<li>\n<p>어느정도 작업하다가, 버전 히스토리에 저장할 준비가 되어있는 파일을 옮기는 영역</p>\n<ul>\n<li><code class=\"language-text\">git rm --cached 파일</code> : Staging area에 있는 파일을 다시 Working directory로 이동시킬 수 있다.</li>\n<li><code class=\"language-text\">git commit</code> : Git directory로 이동시킨다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"git-directory\" style=\"position:relative;\"><a href=\"#git-directory\" aria-label=\"git directory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git directory</h3>\n<ul>\n<li>버전별로 히스토리를 가지고있는 영역</li>\n<li>\n<p>commit을 통해, Staging area -> Git directory로 옮길수 있다.</p>\n<ul>\n<li>해당 commit에는 작성자, 메시지, 날짜, 시간, 버전등이 포함되어있다.</li>\n</ul>\n</li>\n<li>checkout기능을 통해, 언제든지 특정 버전을 작업중인 영역으로 가져올 수 있다.</li>\n<li><code class=\"language-text\">git log</code> : commit된 정보를 볼 수 있다.</li>\n<li>\n<p><code class=\"language-text\">commit</code>은 부품별로 하는게 좋으며, 같은 내용만 담아야한다</p>\n<blockquote>\n<p>이전에, 협업할 때 여러기능 수정한것을 한번에 커밋했었는데, 정말 큰 문제가 있었다 ㅎㅎ</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h1>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=Z9dvM7qgN9s\">드림코딩 by엘리 깃, 깃허브 제대로 배우기</a></li>\n<li>전체적인 흐름을 정리한 것으로, 더 많은 팁은 영상을 통해 확인할 수 있다!</li>\n</ul>","frontmatter":{"title":"오리지널 깃","date":"November 30, 2020"}}},"pageContext":{"slug":"/Study/Think/git/","previous":{"fields":{"slug":"/Study/DataStructure/dataStructures_04/"},"frontmatter":{"title":"자료구조 Data Structures Stack","category":"Study","draft":false,"tag":"Data Structures"}},"next":{"fields":{"slug":"/Study/Think/refactoring/"},"frontmatter":{"title":"Refactoring과 CleanCode","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}