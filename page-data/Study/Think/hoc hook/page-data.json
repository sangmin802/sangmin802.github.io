{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/hoc hook/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"utterances":"sangmin802/sangmin802.github.io"}}},"markdownRemark":{"id":"f1209c37-7657-5548-b850-a5ba5620ecdb","excerpt":"…","html":"<p>이전에, 컴포넌트들의 추상화 수준에는 정답이 없지만, 동일 컴포넌트 내부에서의 추상화 수준은 통일을 시켜주는것이 좋다는 글을 보고 정리를 했었다.</p>\n<ul>\n<li><a href=\"https://sangmin802.github.io/Study/Think/abstract%20painting/\">선언적인 컴포넌트로 추상화, 그리고 수준의 통일</a></li>\n</ul>\n<p>이후, 진행해왔던 프로젝트들을 보면 어느정도 통일은 되어있지만, 비슷한 방식으로 통일됨을 방해하는 구문이 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  condition <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Component <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>많이 사용해온 방법이었다.</p>\n<p>사실, 가장 쉽게 해결하기 위해서는 <code class=\"language-text\">Component</code> 내부에서 조건에 맞지 않을 때에는 <code class=\"language-text\">return null</code> 방식으로 해주면 되긴 하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// render</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>단순하게 데이터를 받아와 렌더링을 진행하는 컴포넌트라면 크게 문제될 것이 없지만, 로직이 추가되기 시작한다면 문제가 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do Something</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// render</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>문제없어보이는 컴포넌트같지만, 에러가 발생한다.</p>\n<p><code class=\"language-text\">useEffect</code>, <code class=\"language-text\">useCallback</code>과 같은 <code class=\"language-text\">hook</code>들은 조건문 이후에 작성이 될 수 없다.</p>\n<p>즉, 조건문들은 모두 <code class=\"language-text\">hook</code>들 내부에서 별도로 진행되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token comment\">// do Something</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// render</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>결국 위와 같은 방식으로 <code class=\"language-text\">hook</code> 내부에서도 조건을 걸어 구분해줘야 한다.</p>\n<p>물론, <code class=\"language-text\">data &amp;&amp; do Something</code>이나 <code class=\"language-text\">data?.doSomething()</code> 처럼 비교적 조건문을 편리하게 작성해줄 수 있도록 <code class=\"language-text\">ES</code>시리즈가 도와주고 있긴하지만, 동일한 컴포넌트 내에 비슷한 조건문을 여러번 사용하는것이 과연 맞는 방법일까라는 고민을 하게 되었다.</p>\n<h2 id=\"hoc-custom-hook\" style=\"position:relative;\"><a href=\"#hoc-custom-hook\" aria-label=\"hoc custom hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HOC, Custom Hook</h2>\n<p>위에서 겪은 상황을 위한 방법은 아니지만, 해결할 수 있다고 생각되어 고민해보게 되었다.</p>\n<h2 id=\"custom-hook\" style=\"position:relative;\"><a href=\"#custom-hook\" aria-label=\"custom hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Hook</h2>\n<p><code class=\"language-text\">class</code>기반 컴포넌트가 아닌 함수형으로 컴포넌트를 구성할 수 있게 되었다.</p>\n<p>이를 통해, 비교적 간단하게 기능별로 추상화를 할 수 있고, 쉽게 재사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Composition<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token constant\">I</span> am Sangmin<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Component data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Composition<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Composition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// some logic</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Introduce<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>생성되는 <code class=\"language-text\">UI</code>, <code class=\"language-text\">UI</code>와 관련된 로직들을 하나의 <code class=\"language-text\">Custom Hook</code>으로 묶어서 사용을 할 수 있게 되었다.</p>\n<p>필요한 속성만을 전달하여 컴포넌트의 이름을 통해 어떠한 역할을 하는지만 알 수 있고, 실제로 수행되는 작업들은 하나로 추상화 시킬수 있다.</p>\n<p>당연히, <code class=\"language-text\">React</code>에서 권장하는 조합도 완벽히 적용 가능하다.</p>\n<p><code class=\"language-text\">UI</code>와 별개로 재사용되는 로직만을 분리하여 <code class=\"language-text\">Custom Hook</code>을 생성할 수 있다.</p>\n<p>위와 같은 상황에서 조금 아쉬운점이 있다면, 로직은 재사용되는것이 맞지만, <code class=\"language-text\">UI</code>를 구성할 때 다른 스타일을 적용하고싶다면, 스타일 관련 속성을 더 전달해줘야하는 불편함이 있다.</p>\n<p>속성이 추가된다는것은 점점 결속력이 짖어짐을 의미하기 때문에, 첫 목적이였던 재사용 가능함의 의미가 조금 퇴색될 수 있을것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useInterval</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time<span class=\"token punctuation\">,</span> work</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> startInterval<span class=\"token punctuation\">,</span> endInterval <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">interval</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">,</span> work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    work<span class=\"token punctuation\">,</span>\n    time<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">startInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">endInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>startInterval<span class=\"token punctuation\">,</span> endInterval<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약, <code class=\"language-text\">timer</code>과 같은 작업을 수행하기 위해 여러 컴포넌트에서 <code class=\"language-text\">interval</code>기능을 사용해야 한다면, 위와 같은 방식으로 <code class=\"language-text\">Custom Hook</code>을 생성하여 재사용할 수 있을것 같다.</p>\n<blockquote>\n<p>단순 이해를 위해 급히 작성한 코드라서 안될수도 있다..</p>\n</blockquote>\n<p><code class=\"language-text\">Custom Hook</code>은 <code class=\"language-text\">UI render</code>를 제외한 오로지 상태값만을 계산하는 기능만을 추상화하는것도 가능하다.</p>\n<p>어쩌면, <code class=\"language-text\">UI</code>를 구성하는 <code class=\"language-text\">hook</code>과 비즈니스 로직을 통해 상태값을 계산하는 <code class=\"language-text\">hook</code>을 별도로 관리하는것이 더 좋을것 같기도 하다.</p>\n<blockquote>\n<p>역할에 따른 분리를 통한 이점은 +</p>\n</blockquote>\n<h2 id=\"hoc---고차-컴포넌트\" style=\"position:relative;\"><a href=\"#hoc---%EA%B3%A0%EC%B0%A8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"hoc   고차 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HOC - 고차 컴포넌트</h2>\n<p>이전, <code class=\"language-text\">class</code>기반의 컴포넌트로 <code class=\"language-text\">React</code>를 개발할 때 비슷한 로직이 여러군데에 사용될 때 권장되는 방법이였다고 한다.</p>\n<p>새로운 <code class=\"language-text\">api</code>같은것이 아닌, 단순한 개발 기법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Component</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do Something</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">Wrapper</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Wrapper</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Wrapper</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">Component</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// recycle logic</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Wrapper</code>함수는 인자로 전달받은 컴포넌트를 새로운 환경에서 다시 생성될 수 있도록 반환하는 함수를 생성한다.</p>\n<blockquote>\n<p>약간 데코레이터 함수와 비슷한 역할을 하는 것 같다.</p>\n</blockquote>\n<p><code class=\"language-text\">Component</code>를 실제로 사용하는 부모 컴포넌트에서는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">WrappedComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// recycle logic</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 컴포넌트를 사용하는것이 아닐까 생각된다.</p>\n<blockquote>\n<p>이제보니, 클로저의 특징도 이용되는것 같다…</p>\n</blockquote>\n<h2 id=\"문제-해결\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0\" aria-label=\"문제 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 해결</h2>\n<p>다시 처음으로 돌아와서</p>\n<p>문제를 해결하는데에 <code class=\"language-text\">Custom Hook</code>은 적합해보이지 않는다.\n로직만을 관리하는 <code class=\"language-text\">Custom Hook</code>에서는 <code class=\"language-text\">UI</code>렌더링을 막을 수 없기 때문이다.</p>\n<h3 id=\"custom-hook으로-해결\" style=\"position:relative;\"><a href=\"#custom-hook%EC%9C%BC%EB%A1%9C-%ED%95%B4%EA%B2%B0\" aria-label=\"custom hook으로 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Hook으로 해결</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>ConditionalRender\n  render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dialog <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n  Component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Dialog<span class=\"token punctuation\">}</span>\n  dialog<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dialog<span class=\"token punctuation\">}</span>\n  setDialog<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setDialog<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ConditionalRender</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>render<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>ConditionalRender<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Custom Hook</code>을 사용하여 해결할 수 있었다.</p>\n<h3 id=\"hoc\" style=\"position:relative;\"><a href=\"#hoc\" aria-label=\"hoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HOC</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Dialog render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dialog <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span> dialog<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dialog<span class=\"token punctuation\">}</span> setDialog<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setDialog<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ConditionalRender</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">Component</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  render <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ConditionalRender</code></pre></div>\n<p><code class=\"language-text\">HOC</code>방식으로도 해결은 가능했다.</p>\n<blockquote>\n<p>하지만, 두가지 모두 <code class=\"language-text\">typescript</code> 환경에서는 커스텀한 속성을 받는 다면 <code class=\"language-text\">Attribute</code>확장을 하더라도 별도로 지정해줘야 하기 때문에, 시간이 흐를수록 결속력이 짖어질것 같긴 하다..</p>\n</blockquote>\n<h2 id=\"느낌\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%8C\" aria-label=\"느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낌</h2>\n<p><code class=\"language-text\">HOC</code>는 단점이 있는데, 여러개가 중첩되어 사용될 때 간혹 속성이 겹치는 경우가 있다고 한다.</p>\n<blockquote>\n<p>또한, 그것이 어느곳에서 일어났는지 빠르게 파악하기 어렵다고 한다.</p>\n</blockquote>\n<p>따라서 대부분의 상황에서는 <code class=\"language-text\">Custom Hook</code>을 권장한다고 한다.</p>\n<p>이번 고민에서는 <code class=\"language-text\">HOC</code>가 여러번 중첩될 필요가 없었기 떄문에 강력하고 깔끔하게 해결할 수 있었다.</p>\n<p>당연한 말이겠지만, 상황에 따라 사용하는것이 좋아보인다.</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://www.robinwieruch.de/react-hooks-higher-order-components\">Why React Hooks over HOCs</a></li>\n</ul>","frontmatter":{"title":"⚛ HOC와 Custom Hook","date":"October 07, 2021"}}},"pageContext":{"slug":"/Study/Think/hoc hook/","previous":{"fields":{"slug":"/Study/Think/notification/"},"frontmatter":{"title":"🔔 Notifiaction으로 사용자에게 알림 전달","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/callstack await/"},"frontmatter":{"title":"⚛ CallStack에서 await을 만났을 때","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["1162990174","1854831582","2054357557","3128451518"],"slicesMap":{}}