{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/bucketplace feedback3/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"5e7ca0f2-93a1-596b-b986-6c48b1471125","excerpt":"action과 saga는 서로 의미가 다르므로 분리하는게 나아보입니다. 해당 문제는 6번과 함께 해결! Redux…","html":"<h2 id=\"action과-saga는-서로-의미가-다르므로-분리하는게-나아보입니다\" style=\"position:relative;\"><a href=\"#action%EA%B3%BC-saga%EB%8A%94-%EC%84%9C%EB%A1%9C-%EC%9D%98%EB%AF%B8%EA%B0%80-%EB%8B%A4%EB%A5%B4%EB%AF%80%EB%A1%9C-%EB%B6%84%EB%A6%AC%ED%95%98%EB%8A%94%EA%B2%8C-%EB%82%98%EC%95%84%EB%B3%B4%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"action과 saga는 서로 의미가 다르므로 분리하는게 나아보입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>action과 saga는 서로 의미가 다르므로 분리하는게 나아보입니다.</h2>\n<p>해당 문제는 6번과 함께 해결!</p>\n<h2 id=\"redux를-사용하였지만-책임에-대한-분리가-제대로-되어있지-않습니다\" style=\"position:relative;\"><a href=\"#redux%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%98%80%EC%A7%80%EB%A7%8C-%EC%B1%85%EC%9E%84%EC%97%90-%EB%8C%80%ED%95%9C-%EB%B6%84%EB%A6%AC%EA%B0%80-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EB%90%98%EC%96%B4%EC%9E%88%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"redux를 사용하였지만 책임에 대한 분리가 제대로 되어있지 않습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux를 사용하였지만 책임에 대한 분리가 제대로 되어있지 않습니다.</h2>\n<p>처음 피드백을 읽었을 때에, 이해가 가지 않았다.</p>\n<p>현재 <code class=\"language-text\">Redux</code>를 관리하는 디렉토리 구조가, 크게 <code class=\"language-text\">reducer</code>, <code class=\"language-text\">action(action type, action create)</code>, 미들웨어를 합쳐주는 <code class=\"language-text\">store</code> 이런 식이였다.</p>\n<p>따라서 생각해보았을 때, 위처럼 나누는것을 의미하는건 아닌것 같았다.</p>\n<p>더군다나, <code class=\"language-text\">Redux Duck</code>패턴으로 동일한 기능끼리 <code class=\"language-text\">reducer</code>, <code class=\"language-text\">action</code>을 한곳에 모아 관리하는 방식이 부상하고 있기 때문이기도 했다.</p>\n<p>여기서는, <code class=\"language-text\">Redux</code>공문을 보고 이건가 싶었던 것이,</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  state<span class=\"token operator\">:</span> IinitalState <span class=\"token operator\">=</span> initalState<span class=\"token punctuation\">,</span>\n  action<span class=\"token operator\">:</span> ActionType\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'SET_DATA'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>data\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">as</span> IPost<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>data\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'SCRAP_FILTER_TOGGLE'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        showScrapped<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>showScrapped<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'SET_SCRAPPED_DATA'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> scrappedData <span class=\"token operator\">=</span> <span class=\"token function\">filterScrappedData</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>scrappedData<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        scrappedData<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>현재 <code class=\"language-text\">reducer</code>의 모습인데, 잘 보면 모든 <code class=\"language-text\">action</code>들을 하나의 <code class=\"language-text\">reducer</code>에서 관리하고 있다.</p>\n<p>공식문서에도 그렇고, <code class=\"language-text\">reducer</code>또한 각각의 책임에 따라, 도메인에 따라 분리해서 관리하는것을 추천하고, 이후에 하나의 <code class=\"language-text\">root reducer</code>로 합치라고 나와있다.</p>\n<p><code class=\"language-text\">Redux Duck</code>패턴을 생각해보았을 때에도, 위처럼 나누는 것이 필수적이긴 하다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">SET_DATA</code> : 데이터를 갖고오는 <code class=\"language-text\">AJAX</code> 통신을 위한 과정.</p>\n<blockquote>\n<p>미들웨어로 Saga를 거쳐옴.</p>\n</blockquote>\n</li>\n<li><code class=\"language-text\">SCRAP_FILTER_TOGGLE</code> : 네비게이션이나 토글버튼과 같은 기능.</li>\n<li><code class=\"language-text\">SET_SCRAPPED_DATA</code> : 몇몇의 데이터를 저장하는 기능.</li>\n</ul>\n<p>위의 세가지 <code class=\"language-text\">action</code>들은 서로 다른 기능을 하는 <code class=\"language-text\">reducer</code>로 분리하여 각각에 요구되는 <code class=\"language-text\">action</code>도 함께 <code class=\"language-text\">ducks</code>패턴으로 관리하는것이 좋을 듯 하다.</p>\n<h2 id=\"수정-후\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A0%95-%ED%9B%84\" aria-label=\"수정 후 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수정 후</h2>\n<ol>\n<li>이것은 피드백 외의 내용인데, <code class=\"language-text\">useState</code> 훅을 사용하는 것처럼, <code class=\"language-text\">useSelector</code>, <code class=\"language-text\">useDispatch</code> 모두 하나의 폴더에서 관리하는것이 아닌, 기능별로 나눠서 훅으로 관리하도록 했다. 또한, 해당 <code class=\"language-text\">state</code>를 사용하거나 비슷한 기능인 <code class=\"language-text\">useEffect</code> 도 해당 훅 내부에서 실행시키도록 함.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Home</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> setData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">DataHooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> showScrapped<span class=\"token punctuation\">,</span> setShowScrapped <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">ScrapFilterHooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> scrappedData<span class=\"token punctuation\">,</span> selectData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">ScrappedDataHooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> scrollEvent <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ScrollFetching</span><span class=\"token punctuation\">(</span>setData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">InfiniteScroll</span><span class=\"token punctuation\">(</span>scrollEvent<span class=\"token punctuation\">,</span> showScrapped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// dataHooks</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DataHooks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> RootState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>ajaxReducer<span class=\"token punctuation\">.</span>data\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> setData <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    i <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 필요하다면 컴포넌트 언마운트시 모두 초기화</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> setData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>확실히 가독성도 좋고, 기능별로 묶여있는 느낌. 당연히, 비즈니스 로직들이 훅 디렉토리에 모여있어 관리하기도 편함</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>리덕스의 경우도, <code class=\"language-text\">middleware</code>, <code class=\"language-text\">ducks</code> 디렉토리로 나누고, <code class=\"language-text\">saga</code>를 분리, <code class=\"language-text\">action, reducer</code>는 기능별로 <code class=\"language-text\">ducks</code>로 분리하였다. 이후, <code class=\"language-text\">index</code>에서 <code class=\"language-text\">combineReducer</code>로 각각의 <code class=\"language-text\">ducks</code>에서 나오는 <code class=\"language-text\">reducer</code>들을 병합하여 관리하게 하였다.</p>\n<blockquote>\n<p>기능별로 관리하기 때문에, 수정할 때 이리저리 옮겨다닐 필요가 없어서 좋음</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"redux-toolkit\" style=\"position:relative;\"><a href=\"#redux-toolkit\" aria-label=\"redux toolkit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux Toolkit</h3>\n<p><code class=\"language-text\">Redux</code>를 사용하게 된다면 <code class=\"language-text\">reducer</code>, <code class=\"language-text\">action</code>, <code class=\"language-text\">action creator</code> 등등 생성하고 관리해야 할 것들이 많아진다.</p>\n<p>사실상 늘 비슷한 기본셋팅을 수동으로 해야하는데, 그것을 기본적으로 제공해주는 모듈을 <code class=\"language-text\">Redux</code>에서 만들었다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSlice <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span>\n\n<span class=\"token comment\">// Thunk까지만 기본지원 한다고 함..</span>\n<span class=\"token comment\">// saga</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">GET_DATA_SAGA</span> <span class=\"token operator\">=</span> <span class=\"token string\">'GET_DATA_SAGA'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span>\n\n<span class=\"token comment\">// saga creator</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getData</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">GET_DATA_SAGA</span><span class=\"token punctuation\">,</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 리듀셔, 액션, 액션크리에이터 묶음</span>\n<span class=\"token keyword\">const</span> ajaxSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'ajax'</span><span class=\"token punctuation\">,</span>\n  initialState<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  reducers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">setData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>data\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>data\n\n      state<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 디스패쳐 호출을 위한 액션</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> setData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ajaxSlice<span class=\"token punctuation\">.</span>actions\n<span class=\"token comment\">// 콤바인을 위한 리듀서 내보내기</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ajaxReducer <span class=\"token operator\">=</span> ajaxSlice<span class=\"token punctuation\">.</span>reducer</code></pre></div>\n<p><code class=\"language-text\">switch</code>, <code class=\"language-text\">case</code> 구문을 사용하지 않아서 확실히 보기도 편하고 액션을 자동으로 생성해주기때문에, 기본작업이 확실히 줄어든 느낌!</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://ko.redux.js.org/recipes/structuring-reducers/structuring-reducers\">Redux reducer</a></li>\n<li><a href=\"https://ridicorp.com/story/how-to-use-redux-in-ridi/\">리디의 Redux 관리</a></li>\n</ul>","frontmatter":{"title":"버킷플레이스 피드백 분석4, 6","date":"March 09, 2021"}}},"pageContext":{"slug":"/Study/Think/bucketplace feedback3/","previous":{"fields":{"slug":"/Study/Think/bucketplace feedback1/"},"frontmatter":{"title":"버킷플레이스 피드백 분석1","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/intersectionObserver/"},"frontmatter":{"title":"IntersectionObserver","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}