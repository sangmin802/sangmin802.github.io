{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/abort fetch/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"e170688e-4306-5aff-a8cd-dc1ca69485ce","excerpt":"…","html":"<p>웹 어플리케이션을 구현하다보면 거의 대부분 <code class=\"language-text\">Web API</code>를 사용하여 서버로 요청을 보내고, 응답을 받아온 데이터를 사용하게 된다.</p>\n<p>이 때, 서버로 요청을 보낼 때에는 특정 조건에 자동으로 실행될 수 도 있고, 사용자의 요청으로 실행될 수 도 있다.</p>\n<p>사용자의 요청으로 실행이 될 경우, 그 요청이 무수하게 중첩이 되는 상황이 생길 수 있다.</p>\n<p>예로, 검색창에 타이핑을 할 때마다 자동완성을 해오는 기능을 구현하고자 할 때,</p>\n<p><code class=\"language-text\">고기</code> 라는 검색어를 입력하게 된다면 <code class=\"language-text\">ㄱ</code>><code class=\"language-text\">고</code>><code class=\"language-text\">곡</code>><code class=\"language-text\">고기</code> 이런식으로 여러번 자동완성을 하게 된다.</p>\n<p>사실 궁금한것은 <code class=\"language-text\">고기</code> 라는 단어가 담긴 다른 단어들이 자동완성되는것을 원하는 상황인데도 그렇다.</p>\n<p>가장 마지막 요청만 실제로 서버에 전달할 수는 없을까?</p>\n<h2 id=\"그래서-사용해온-debounce\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%98%A8-debounce\" aria-label=\"그래서 사용해온 debounce permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 사용해온 debounce</h2>\n<p>사용자의 가장 마지막 요청만 수행하도록 하는 개념이 바로 <code class=\"language-text\">debounce</code>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> timer\n  <span class=\"token keyword\">function</span> <span class=\"token function\">debounceAct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> t<span class=\"token operator\">?</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> debounceAct\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">React</code>에서 <code class=\"language-text\">debounce</code>기능이 필요로 할 때마다 사용하는 함수이다.\n해당 함수로 생성되는 <code class=\"language-text\">return</code>값을 <code class=\"language-text\">useMemo</code>로 메모이제이션 하여 내부 <code class=\"language-text\">timer</code>를 클로저방식으로 접근해 사용해왔다.</p>\n<ol>\n<li><code class=\"language-text\">debounceAct</code>가 한번 실행되면서 지정된 <code class=\"language-text\">t</code> 시간 이후에 <code class=\"language-text\">cb</code> 콜백함수가 호출된다.</li>\n<li>해당 콜백함수는 클로저 변수인 <code class=\"language-text\">timer</code>에 담긴다.</li>\n<li><code class=\"language-text\">t</code> 시간 내에 <code class=\"language-text\">debounceAct</code>가 다시 실행된다면, 클로저 변수 <code class=\"language-text\">timer</code>의 <code class=\"language-text\">setTimeout</code>을 초기화하고, 새로운 <code class=\"language-text\">cb</code> 콜백함수를 <code class=\"language-text\">setTimeout</code>내부 콜백함수로 지정하여 다시 <code class=\"language-text\">timer</code>에 담는다.</li>\n<li><code class=\"language-text\">t</code> 시간 내에 <code class=\"language-text\">debounceAct</code>가 다시 실행되지 않는다면 정상적으로 <code class=\"language-text\">setTimeout</code>이 진행된다.</li>\n</ol>\n<h2 id=\"react-saga-takelatest\" style=\"position:relative;\"><a href=\"#react-saga-takelatest\" aria-label=\"react saga takelatest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React-Saga takeLatest</h2>\n<p><code class=\"language-text\">React-Saga</code>를 사용할 때에는 모듈에서 제공하는 <code class=\"language-text\">takeLatest</code>를 사용하여 위와 비슷하게 최근의 요청만 수행하도록 할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> put<span class=\"token punctuation\">,</span> takeLatest<span class=\"token punctuation\">,</span> call <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga/effects'</span>\n\n<span class=\"token comment\">// ... 로직</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">userDataSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_USER_DATA_SAGA</span><span class=\"token punctuation\">,</span> getUserData_Saga<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 가장 마지막으로 디스패치된 액션만을 처리</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"비동기작업의-중첩\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0%EC%9E%91%EC%97%85%EC%9D%98-%EC%A4%91%EC%B2%A9\" aria-label=\"비동기작업의 중첩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기작업의 중첩</h2>\n<p>비동기 작업을 작성하는데 <code class=\"language-text\">Redux-Saga</code>에서 <code class=\"language-text\">React-Query</code>방식으로 변경하게 되면서, 위와같은 <code class=\"language-text\">debounce</code>기능을 새롭게 구현해줄 필요가 있었다.</p>\n<p>물론 상황은 조금 달랐는데,</p>\n<ol>\n<li>처음 화면에서 데이터를 <code class=\"language-text\">query</code>로 받아오기 시작</li>\n<li>데이터를 다 받아오기 전, 사용자가 새로운 요청을 함</li>\n<li><code class=\"language-text\">query</code>를 포함하는 <code class=\"language-text\">page</code>가 <code class=\"language-text\">unmount</code> 됨</li>\n<li>다른 <code class=\"language-text\">page</code>에서 새로운 <code class=\"language-text\">query</code>가 실행 됨</li>\n</ol>\n<p>이 때, 첫 <code class=\"language-text\">query</code>가 취소되지 않아서 해당 데이터를 받아오는 비동기 작업이 완전히 종료되어야 사용자의 요청으로 인한 비동기작업이 실행되는 것이다.</p>\n<p>사용자의 요청이 들어왔다면 그 요청으로인 한 비동기작업이 무조건 1순위가 되어야 사용자에게 좋은 경험을 전달할 수 있기 때문에, 이러한 상황이라면 처음의 <code class=\"language-text\">query</code>는 취소될 필요가 있었다.</p>\n<h3 id=\"query-cancellation\" style=\"position:relative;\"><a href=\"#query-cancellation\" aria-label=\"query cancellation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Cancellation</h3>\n<p>방법은 간단했다.</p>\n<p><code class=\"language-text\">React-Query</code>에서도 <code class=\"language-text\">query</code>를 취소할 수 있는 방법 이있었다.</p>\n<h4 id=\"axios\" style=\"position:relative;\"><a href=\"#axios\" aria-label=\"axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>axios</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> CancelToken <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span>CancelToken\n  <span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> CancelToken<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    cancelToken<span class=\"token operator\">:</span> source<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  promise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">cancel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    source<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Query was cancelled by React Query'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> promise\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"fetch\" style=\"position:relative;\"><a href=\"#fetch\" aria-label=\"fetch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fetch</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> signal <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">.</span>signal\n\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span>\n    signal<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  promise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">cancel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> promise\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>사실 <code class=\"language-text\">axios</code>모듈을 쓰던, <code class=\"language-text\">Web API</code>의 <code class=\"language-text\">fetch</code>를 쓰던 원리는 비슷했다.</p>\n<ol>\n<li><code class=\"language-text\">query</code>를 사용하는 컴포넌트에 <code class=\"language-text\">promise</code>객체를 반환한다.</li>\n<li><code class=\"language-text\">promise</code>객체에는 <code class=\"language-text\">cancel</code>이라는 커스텀 메소드가 필요하다.</li>\n<li><code class=\"language-text\">cancel</code>커스텀 메소드에는 <code class=\"language-text\">AbortController</code>나 <code class=\"language-text\">CancelTocken</code>등으로 생성되는 인스턴스 키를 갖고있는 비동기작업을 종료하는 로직을 내재하고 있어야 한다.</li>\n<li><code class=\"language-text\">query</code>를 사용하는 컴포넌트가 언마운트 되는 등 비활성화 되는 순간, <code class=\"language-text\">promise.cancel</code>이 호출된다.</li>\n</ol>\n<p>당연히 사용자의 요청으로 취소도 가능하다.</p>\n<p>위와같은 로직은 동일하게 사용되어야 하며,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button\n    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">cancelQueries</span><span class=\"token punctuation\">(</span>queryKey<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n    Cancel\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>취소시킬 <code class=\"language-text\">query</code>의 <code class=\"language-text\">key</code>를 <code class=\"language-text\">cancelQueries</code>의 인자로 보내어 실행시킨다.</p>\n<p><code class=\"language-text\">cancelQueries</code>가 실행되면, 처음 <code class=\"language-text\">query</code>에서 반환한 <code class=\"language-text\">promise</code>객체의 <code class=\"language-text\">cancel</code>을 자동으로 호출한다고 한다.</p>\n<p>간단한데?</p>\n<h2 id=\"예상치-못한-변수\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%83%81%EC%B9%98-%EB%AA%BB%ED%95%9C-%EB%B3%80%EC%88%98\" aria-label=\"예상치 못한 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예상치 못한 변수</h2>\n<p>하지만 취소되지 않았다.</p>\n<p>정확히 말하면, <code class=\"language-text\">query</code> 자체는 <code class=\"language-text\">cancel</code>이 되는것 같았지만, 정작 중요한 <code class=\"language-text\">fetch</code>와 같은 비동기작업이 취소가 되지 않았다.</p>\n<p>왜일까?</p>\n<p><code class=\"language-text\">React-Query</code>를 사용하여 비동기 작업을 작성할 때, <code class=\"language-text\">Suspense</code>와 <code class=\"language-text\">ErrorBoundary</code>를 사용하여 오로지 데이터를 수신 성공 상태에 대해서만 고려하도록 하였다.</p>\n<p>그래서, <code class=\"language-text\">promise</code> 객체가 처음 반환되는 순간은 데이터 수신 성공된 상태이다.</p>\n<p>하지만, 위에서 반환된 <code class=\"language-text\">promise</code>객체의 <code class=\"language-text\">cancel</code> 메소드가 호출하는 순간은 그 이전인 <code class=\"language-text\">query</code>의 <code class=\"language-text\">status</code> 가 <code class=\"language-text\">loading</code>인 상태이다.</p>\n<p>즉, <code class=\"language-text\">Suspense</code> 기능을 사용한 순간, <code class=\"language-text\">promise</code>객체의 <code class=\"language-text\">cancel</code>메소드가 호출될 수 있는 방법이 없다.</p>\n<blockquote>\n<p>아마 위와 같은 이유인것 같다.</p>\n</blockquote>\n<p>따라서 다른 방법으로 처리하기로 했다.</p>\n<h3 id=\"canceltocken-생성-후-할당\" style=\"position:relative;\"><a href=\"#canceltocken-%EC%83%9D%EC%84%B1-%ED%9B%84-%ED%95%A0%EB%8B%B9\" aria-label=\"canceltocken 생성 후 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cancelTocken 생성 후 할당</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> CancelToken <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span>CancelToken\n\n<span class=\"token keyword\">let</span> cancel\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> afterAsync <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cancel<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> beforeAsync <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      url<span class=\"token operator\">:</span><span class=\"token operator\">...</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n      cancelToken<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>cancel <span class=\"token operator\">=</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>처음 <code class=\"language-text\">beforeAsync</code>가 호출되면, <code class=\"language-text\">cancel</code> 메소드를 <code class=\"language-text\">cancel</code>변수에 할당해준다.</li>\n<li>사용자의 요청으로 <code class=\"language-text\">afterAsync</code>가 호출되면, <code class=\"language-text\">cancel</code>메소드가 호출되어 <code class=\"language-text\">beforeAsync</code>가 취소된다.</li>\n</ol>\n<p>여기까지는 정석적인 비동기 취소 방식이다.</p>\n<p>하지만 이 상태로 마무리하게 된다면, <code class=\"language-text\">React-Query</code>의 캐싱기능으로 인해, 다시 처음의 <code class=\"language-text\">beforeAsync</code>가 호출될 때 해당 <code class=\"language-text\">key</code>로 저장되어는 취소된 데이터를 반환하게 되었다.</p>\n<h3 id=\"key-초기화\" style=\"position:relative;\"><a href=\"#key-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"key 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>key 초기화</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    queryKey<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> queryData <span class=\"token operator\">=</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryData</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// key의 query 중단</span>\n      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">cancelQueries</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// key에 대한 캐싱된 값 초기화</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queryData<span class=\"token punctuation\">)</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">resetQueries</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> exact<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>queryClient<span class=\"token punctuation\">,</span> queryKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">page</code>내부의 하위 <code class=\"language-text\">component</code>에서 <code class=\"language-text\">query</code>가 작동되고, 새로운 요청에는 해당 <code class=\"language-text\">page</code>가 <code class=\"language-text\">unmount</code>되기 때문에 위와 같은 방식으로 처리해주었다.</p>\n<p>여기서 중요한점은, 해당 <code class=\"language-text\">key</code>로 캐싱된 값이 없다면 그 <code class=\"language-text\">key</code>들의 값을 초기화해주는것이다.</p>\n<p>그렇게된다면, 새롭게 데이터를 받아오게 된다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://react-query.tanstack.com/guides/query-cancellation#_top\">React-Query Cancellation</a></li>\n</ul>","frontmatter":{"title":"⚛ React-Query cancel과 Fetch cancel(feat debounce)","date":"August 03, 2021"}}},"pageContext":{"slug":"/Study/Think/abort fetch/","previous":{"fields":{"slug":"/Study/Think/abstract painting/"},"frontmatter":{"title":"⚛ 선언적인 컴포넌트로 추상화, 그리고 수준의 통일","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/user experience/"},"frontmatter":{"title":"⚛ 비동기 작업 분리를 통한 사용자 경험 향상 및 Suspense에 대한 고민","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}