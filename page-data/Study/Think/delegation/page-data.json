{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/delegation/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"6c5967fd-5fad-5540-af71-7150c8c8e08c","excerpt":"에서 하위의 컴포넌트에게 상위에서 비즈니스 로직과 관련된 이벤트 핸들러를 속성으로 전달 받아, 사용했었다. 과 같이 동적으로 생성되는 컴포넌트들에게 비슷한 역할을 하는 이벤트가 여러개가 생성이 되는 것이였다. 비단 뿐만 아니라, 바닐라 자바스크립트를 사용하면서 이벤트를 할당해 줄 때에도 마찬가지의 상황이였다. useCallback…","html":"<p><code class=\"language-text\">React</code>에서 하위의 컴포넌트에게 상위에서 비즈니스 로직과 관련된 이벤트 핸들러를 속성으로 전달 받아, 사용했었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Char</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> setUserData<span class=\"token punctuation\">,</span> char <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PropsWithChildren<span class=\"token operator\">&lt;</span>IChar<span class=\"token operator\">&lt;</span>IData<span class=\"token operator\">>></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> setUserDataEvent <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setUserData</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> setUserData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>Container<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Button aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"expedition-char\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Text type<span class=\"token operator\">=</span><span class=\"token string\">\"desc\"</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>char<span class=\"token punctuation\">.</span>lv<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>char<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>Container<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">.map</code>과 같이 동적으로 생성되는 컴포넌트들에게 비슷한 역할을 하는 이벤트가 여러개가 생성이 되는 것이였다.</p>\n<p>비단 <code class=\"language-text\">React</code>뿐만 아니라, 바닐라 자바스크립트를 사용하면서 이벤트를 할당해 줄 때에도 마찬가지의 상황이였다.</p>\n<h3 id=\"usecallback을-통한-메모이제이션\" style=\"position:relative;\"><a href=\"#usecallback%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98\" aria-label=\"usecallback을 통한 메모이제이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useCallback을 통한 메모이제이션</h3>\n<p><code class=\"language-text\">React</code>에서는 <code class=\"language-text\">useCallback</code> 훅을 사용하여 의존성 배열이 변하지 않는 한 메소드를 캐싱·메모이제이션 하여 동일한 메소드가 여러번 생성되는것을 개선해주는 방법이 있다.</p>\n<p>하지만, 그렇다 하더라도 각각의 <code class=\"language-text\">dom</code>에 다른 의존성 배열을 갖고있는 이벤트들이 할당되는것은 여전하였다.</p>\n<h3 id=\"이벤트-사전작업-후속조치-의-증가\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%82%AC%EC%A0%84%EC%9E%91%EC%97%85-%ED%9B%84%EC%86%8D%EC%A1%B0%EC%B9%98-%EC%9D%98-%EC%A6%9D%EA%B0%80\" aria-label=\"이벤트 사전작업 후속조치 의 증가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 사전작업, 후속조치 의 증가</h3>\n<p>이벤트 할당의 횟수가 100번 1000번 늘어가는것 자체가 해야할 작업이 늘어난 다는 것이고, 그러한 작업 증가는 자연스럽게 성능의 저하를 유발할 수 있다고 생각했다.</p>\n<p>또한, 바닐라 자바스크립트를 혹은 <code class=\"language-text\">useEffect</code>로 <code class=\"language-text\">dom</code> 생성 이후에 이벤트를 부여를 할 때에는 대부분 의존성 배열로 인해 <code class=\"language-text\">unmount</code> 혹은 <code class=\"language-text\">update</code>되는 상황에 <code class=\"language-text\">removeEventListener</code>로 연결된 이벤트를 제거해줄 텐데, 이러한 작업또한 그만큼 늘어나는 것이였다.</p>\n<h3 id=\"속성의-전달\" style=\"position:relative;\"><a href=\"#%EC%86%8D%EC%84%B1%EC%9D%98-%EC%A0%84%EB%8B%AC\" aria-label=\"속성의 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>속성의 전달</h3>\n<p>비즈니스 로직과 관련된 이벤트의 경우, 하위 컴포넌트의 재활용성을 해치지 않기 위해 대부분 <code class=\"language-text\">page</code>와 같은 최상위 컴포넌트에서 생성하여 아래와 같은 방법으로 전달한다.</p>\n<ol>\n<li>컴포넌트 조합을 통한 직접 할당</li>\n<li><code class=\"language-text\">props</code>를 통해 하위로 전달</li>\n</ol>\n<p>1번의 방법이 권장되는 방법이고, 깔끔한 방식이긴 하지만 모든 상황에서 그렇게 처리하기에는 한계가 있다고 생각한다.</p>\n<h2 id=\"이벤트-위임---event-delegation\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84---event-delegation\" aria-label=\"이벤트 위임   event delegation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 위임 - Event delegation</h2>\n<p>위와 같은 상황에 사용할 수 있는 방법이 <strong>이벤트 위임</strong>이다.</p>\n<p><code class=\"language-text\">이벤트 버블링</code>의 개념을 생각해보면, 최 하위에서 사용자를 통해 발생하는 이벤트는 최상위인 <code class=\"language-text\">document</code>레벨 까지 거품처럼 올라간다.</p>\n<p>따라서, 상위 <code class=\"language-text\">element</code> 에서는 하위에서 호출된 이벤트, 호출이 된 하위 <code class=\"language-text\">element</code>에대해 알 수 있게 된다.</p>\n<p>그렇다면, 동적으로 생성되는 <code class=\"language-text\">dom</code>들을 감싸고 있는 하나의 상위 <code class=\"language-text\">dom</code>에만 이벤트를 부여하고, 각각의 하위 <code class=\"language-text\">dom</code>들의 고유한 속성을 조건에 따라 판단하여 이벤트를 호출하게 된다면 위에서 생겼던 고민들이 해결될 수 있는 것이다.</p>\n<h3 id=\"예제---이전\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C---%EC%9D%B4%EC%A0%84\" aria-label=\"예제   이전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 - 이전</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UserExpedition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  userData<span class=\"token punctuation\">,</span>\n  setUserData<span class=\"token punctuation\">,</span>\n  setDialog<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PropsWithChildren<span class=\"token operator\">&lt;</span>IUserExpedition<span class=\"token operator\">&lt;</span>IUserData<span class=\"token operator\">>></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    expeditionInfo<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> expeditionUserWrap <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> userData\n\n  <span class=\"token keyword\">const</span> closeHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setDialog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setDialog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>Container<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>ButtonContainer<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>closeHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>닫기<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>ButtonContainer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>expeditionUserWrap<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wrap<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>ExpeditionServer\n          key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">userExpedition</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n          wrap<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>wrap<span class=\"token punctuation\">}</span>\n          setUserData<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setUserData<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>Container<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 컴포넌트에서는 다이얼로그를 비활성화 하는 <code class=\"language-text\">setDialog</code>와, 새로운 검색을 요청하는 <code class=\"language-text\">setUserData</code>라는 비즈니스로직을 <code class=\"language-text\">props</code>로 받아와 사용한다.</p>\n<p>심지어 <code class=\"language-text\">setUserData</code>는 동적으로 생성되는 보다 더 하위 컴포넌트에서 각각의 다른 <code class=\"language-text\">user.name</code>속성에 의존하는 <code class=\"language-text\">handler</code>들을 생성하여 이벤트를 할당한다.</p>\n<p>즉 각각 다른 의존성 배열을 갖고 있는 여러개의 이벤트가 생성되고 할당이 되는 것이다.</p>\n<p>이를 <code class=\"language-text\">이벤트 위임</code>을 사용한다면 보다 효율적으로 처리할 수 있게 된다.</p>\n<h3 id=\"예제---이후\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C---%EC%9D%B4%ED%9B%84\" aria-label=\"예제   이후 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 - 이후</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UserExpedition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  userData<span class=\"token punctuation\">,</span>\n  setUserData<span class=\"token punctuation\">,</span>\n  setDialog<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PropsWithChildren<span class=\"token operator\">&lt;</span>IUserExpedition<span class=\"token operator\">&lt;</span>IUserData<span class=\"token operator\">>></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    expeditionInfo<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> expeditionUserWrap <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> userData\n\n  <span class=\"token keyword\">const</span> expeditionHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">setDialog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">setUserData</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>setDialog<span class=\"token punctuation\">,</span> setUserData<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>Container onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>expeditionHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>ButtonContainer<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Button<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Text data<span class=\"token operator\">-</span>close<span class=\"token operator\">></span>닫기<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>ButtonContainer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>expeditionUserWrap<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wrap<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>ExpeditionServer key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">userExpedition</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> wrap<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>wrap<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>Container<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>최 상위 컴포넌트에 단 하나의 이벤트를 생성하고 할당한다.</p>\n<p>이벤트를 할당받은 <code class=\"language-text\">element</code> 내부에서 사용자의 <code class=\"language-text\">click</code>이벤트가 호출이 될 때, 실제로 클릭이 된 하위 <code class=\"language-text\">element</code>들을 주어진 조건에 따라 판단을 하게 된다.</p>\n<p>두가지 종류의 <code class=\"language-text\">element</code>에 새로운 속성을 부여했다.</p>\n<ol>\n<li><code class=\"language-text\">dialog</code>를 비활성화 하는 <code class=\"language-text\">element</code> 에는 <code class=\"language-text\">data-close</code></li>\n<li>새로운 유저를 검색하는 <code class=\"language-text\">element</code>에는 <code class=\"language-text\">data-name : 유저명</code></li>\n</ol>\n<p><code class=\"language-text\">dataset</code> 속성에 따라 각기 다른 이벤트를 호출하게 된다. 물론, 유저명을 검색할 때에는 해당 속성의 값도 인자로 보낸다.</p>\n<p>이를 통해 절약된 부분이 있다.</p>\n<ol>\n<li>이벤트 속성을 여러번 전달할 필요가 없어짐</li>\n<li>이벤트 할당이 여러번 이루어지지 않게 됨</li>\n</ol>\n<h2 id=\"느낌\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%8C\" aria-label=\"느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낌</h2>\n<p>하위에 동일한 이벤트 타입을 사용하는 동적으로 생성될 <code class=\"language-text\">element</code>들이 있다면, 이벤트 위임으로 보다 더 효율적으로 이벤트를 할당해줄 수 있을것 같다.</p>\n<blockquote>\n<p>다만, 좀 많은 양의 데이터를 필요로 하는 이벤트의 경우에는 <code class=\"language-text\">dataset</code>에 모든 데이터를 지정하는것이 좋은방법인것같지는 않아서 적합한 상황에만 사용하는것이 좋아보인다.</p>\n</blockquote>","frontmatter":{"title":"⌛ Event Delegation을 통한 효율적인 이벤트 할당","date":"July 22, 2021"}}},"pageContext":{"slug":"/Study/Think/delegation/","previous":{"fields":{"slug":"/Study/Framework/next.js async/"},"frontmatter":{"title":"⚛ Next.js(SSR)에서의 Suspense, ErrorBoundary","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/this/"},"frontmatter":{"title":"🧙‍♀️ this를 제어하는 자","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}