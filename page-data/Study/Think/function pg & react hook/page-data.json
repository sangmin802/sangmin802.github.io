{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/function pg & react hook/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"dbf7999b-ed5a-59d6-9ada-071dc372e7bd","excerpt":"…","html":"<p>유튜브 구독해놓은 개발자 분께서, 함수형 프로그래밍이란 영상을 올리셨길래 보면서 겪었던? 일을 회상하며 정리해보려고 한다.</p>\n<p>이전에 모 기업 면접을 보던 중 받았던 질문이 있다.</p>\n<p>❝ 함수형 프로그래밍을 사용해보신 적 있나요? ❞</p>\n<p>조금 고민을 하였지만,</p>\n<p>❝ 아니요 ❞</p>\n<p>라고 대답을 하였다.</p>\n<p>고민을 했던 이유는 내가 <code class=\"language-text\">React</code> 에서 자주 사용하고있는 <strong>함수형 컴포넌트</strong>들이 과연 함수형 프로그래밍이 맞나 잠시 생각해보았지만, 잘 알지도 못하는 <strong>함수형 프로그래밍</strong>이 맞다고 확신하기는 아직 이르다 생각하여 대답에 부정하였다.</p>\n<h2 id=\"react-component-functional-programming\" style=\"position:relative;\"><a href=\"#react-component-functional-programming\" aria-label=\"react component functional programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Component, Functional Programming</h2>\n<p>이전까지는 <code class=\"language-text\">React</code>를 사용할 때 <code class=\"language-text\">Class</code>를 기반으로한 컴포넌트를 계속 만들어왔는데, 고유의 속성값들(데이터)와, 내부에서 사용하는 메소드를 갖고있는 구조를 보았을 때 전형적인 <strong>객체지향 프로그래밍</strong> 이라는 느낌이였다.</p>\n<p>그래서 종종, <code class=\"language-text\">React</code>에서 <code class=\"language-text\">React Hook</code>을 등장시키고, <code class=\"language-text\">function</code> 기반의 컴포넌트를 만들수 있게 되자, 이것이 <strong>함수형 프로그래밍</strong>이라는 글도 심심치않게 검색되는것 같았다.</p>\n<p>하지만, 함수형 프로그래밍의 조건을 고려해보았을 때, 모든 <code class=\"language-text\">function</code> 기반의 컴포넌트들이 그 조건에 충족되는지는 잘… 모르겠다.</p>\n<h2 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h2>\n<h3 id=\"pure-functions\" style=\"position:relative;\"><a href=\"#pure-functions\" aria-label=\"pure functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pure Functions</h3>\n<p>말 그대로 순수함수이다. 함수에 동일한 인자를 넣었을 때 동일한 결과값을 반환하는 함수이다. 개인적으로 이 조건이 가장 걸렸던것 같다.</p>\n<p>단순하게 <code class=\"language-text\">view</code>를 그려내는 컴포넌트 만큼은 받은 속성값으로만 작동되기 때문에, 어디에서든 재활용이 가능하여 함수형 프로그래밍이라고 할 수 도 있겠다는 생각은 들었다.</p>\n<p>뭐 이런애들..?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// loa-hands</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> backSrc<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> grade <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"imgWrap\"</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>backSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>img\n          className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">imgWidth contentBoxBorder gradient</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>grade<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n          src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>backSrc<span class=\"token punctuation\">}</span>\n          alt<span class=\"token operator\">=</span><span class=\"token string\">\"partImg\"</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span>src <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>img\n          className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">equipMainImg absolute imgWidth gradient</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>grade<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n          src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>src<span class=\"token punctuation\">}</span>\n          alt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>src<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">React Hook</code>을 사용하다보면, <code class=\"language-text\">useEffect</code>나 <code class=\"language-text\">useState</code>등의 각종 <code class=\"language-text\">Hook</code>들이 연결되어있는 <code class=\"language-text\">function</code>기반의 컴포넌트들이 존재한다.</p>\n<p>이러한 <code class=\"language-text\">Hook</code>들은 변수로 보내지는것이 아닌, 외부의 자원을 이용하는데 이러한점 자체가 순수 함수에 위반되는 <code class=\"language-text\">Side Effect</code>가 아닌가 싶다..</p>\n<blockquote>\n<p>사실상 여기에 쓰인 <code class=\"language-text\">new Date</code> 또한 <code class=\"language-text\">Side Effect</code></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// loa-hands</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Index</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> homeData<span class=\"token punctuation\">,</span> setHomeData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">HomeDataHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">DateOverHook</span><span class=\"token punctuation\">(</span>setHomeData<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> yoil <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>section className<span class=\"token operator\">=</span><span class=\"token string\">\"home\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>EventSection events<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>homeData<span class=\"token operator\">?.</span>events<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>CalendarSection\n        calendar<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>homeData<span class=\"token operator\">?.</span>calendar<span class=\"token punctuation\">}</span>\n        today<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>today<span class=\"token punctuation\">}</span>\n        yoil<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>yoil<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TimerSection data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dailyIsland<span class=\"token punctuation\">}</span> today<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>today<span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"오늘의 모험섬\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TimerSection\n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>fieldBoss<span class=\"token punctuation\">[</span>yoil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        today<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>today<span class=\"token punctuation\">}</span>\n        text<span class=\"token operator\">=</span><span class=\"token string\">\"오늘의 필드보스\"</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TimerSection\n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>chaosGate<span class=\"token punctuation\">[</span>yoil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        today<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>today<span class=\"token punctuation\">}</span>\n        text<span class=\"token operator\">=</span><span class=\"token string\">\"오늘의 카오스 게이트\"</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TimerSection data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>oceanCont<span class=\"token punctuation\">[</span>yoil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> today<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>today<span class=\"token punctuation\">}</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"오늘의 항해\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>section<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"stateless-immuatability\" style=\"position:relative;\"><a href=\"#stateless-immuatability\" aria-label=\"stateless immuatability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stateless, Immuatability</h3>\n<p>상태 불변성이다. 상위 컴포넌트에게서 <strong>물려 받은 / 변수로 받은</strong> 속성들은 대부분 수정되지 않는 <code class=\"language-text\">const</code>의 특징을 띄고 있기 때문에, 변경시킬수 없다.</p>\n<p>이 부분은 크게 문제될것 같지 않다.<br>\n위의 두 특징을 잘 반영하고 있는 순수함수가 <code class=\"language-text\">.map</code> 과 <code class=\"language-text\">.filter</code> 라고 한다.</p>\n<p>둘 다 받은 변수인 배열로만 작업을 하고, 새로운 배열을 반환하기 때문에 기존의 변수에는 아무런 영향을 끼치지 않기 때문이라고 한다.</p>\n<blockquote>\n<p>자주 사용하는 메소드들인데 이번 기회로 뭔가 더 호감이 간다.</p>\n</blockquote>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>함수형 프로그래밍을 이해하고, 잘 사용하기위해서는 정말 많은 이해와 시간이 필요하다고 한다.</p>\n<p>당연하게도 아직도 함수형 프로그래밍에대한 이해는 많이 부족하다.</p>\n<blockquote>\n<p>사실상 백지가 아닐까.. 라는 생각도</p>\n</blockquote>\n<p>어쨌든 느낀점은</p>\n<p><strong><code class=\"language-text\">function</code> 기반의 컴포넌트를 사용하면 함수형 프로그래밍을 할 수 있다.</strong></p>\n<p><strong>하지만</strong></p>\n<p><strong>모든 <code class=\"language-text\">function</code> 기반의 컴포넌트가 함수형 프로그래밍을 기반으로 하여 만들어졌다고 하기는 어려울것 같다.</strong></p>","frontmatter":{"title":"Functional Programming (===) or (!==) Function Component ?","date":"March 26, 2021"}}},"pageContext":{"slug":"/Study/Think/function pg & react hook/","previous":{"fields":{"slug":"/Study/Think/eventloop2/"},"frontmatter":{"title":"Event Loop 다시잡기","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/2021-dev-matching/"},"frontmatter":{"title":"2021 Dev-Matching: 웹 프론트엔드 개발자(상반기) 후기","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}