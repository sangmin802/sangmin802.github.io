{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Think/suspense/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"0dc8c982-8fa2-5f92-9e96-89fd91d45356","excerpt":"이전에 를 사용하여, 비동기 작업을 통해 얻은 데이터를 캐싱하고, 지정한 시간에 따라 최신 여부를 파악하고 업데이트하여 사용자에게 좋은 유저경험을 줄 수 있도록 프로그래밍을 하였다. 이번에는 비동기작업에 마찬가지로 자주 사용해왔던 과 같은 상태일 때의 관리를 해보려고 한다. 🍜 React Suspense…","html":"<p>이전에 <code class=\"language-text\">React-Query</code>를 사용하여, 비동기 작업을 통해 얻은 데이터를 캐싱하고, 지정한 시간에 따라 최신 여부를 파악하고 업데이트하여 사용자에게 좋은 유저경험을 줄 수 있도록 프로그래밍을 하였다.</p>\n<p>이번에는 비동기작업에 마찬가지로 자주 사용해왔던 <code class=\"language-text\">isLoading</code>과 같은 <code class=\"language-text\">Pending</code>상태일 때의 관리를 해보려고 한다.</p>\n<h2 id=\"-react-suspense\" style=\"position:relative;\"><a href=\"#-react-suspense\" aria-label=\" react suspense permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍜 React Suspense</h2>\n<p>이전에 <code class=\"language-text\">React-Query</code>의 <code class=\"language-text\">suspense</code> 속성을 통해 데이터가 받아지지 않았다면 이후 렌더링을 중지시켜주기 까지는 성공하였다. 하지만, 그 중지상태일 때의 렌더링에 대해서는 해결하지 못했었다.</p>\n<p><code class=\"language-text\">React</code>에서는 <code class=\"language-text\">Suspense</code>라는 기능을 제공하는데, 해당 기능을 사용하여 <code class=\"language-text\">기다리기</code> 라는 키워드를 갖고있는 상황에 사용을 할 수 있다.</p>\n<p>대표적으로, 비동기작업을 진행하면서 발생하는 로딩시간을 <strong>기다리면서</strong> 처리할 작업들을 대체하는 것이다.</p>\n<p>엄밀히 따지면, 특정 데이터를 사용하는 컴포넌트에 데이터가 준비되지 않았음을 알리는 역할을 수행한다.</p>\n<h3 id=\"🥘-usestate를-통한-loading\" style=\"position:relative;\"><a href=\"#%F0%9F%A5%98-usestate%EB%A5%BC-%ED%86%B5%ED%95%9C-loading\" aria-label=\"🥘 usestate를 통한 loading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥘 useState를 통한 loading</h3>\n<p>이전까지는 늘 이렇게 비동기 작업을 수행하기 이전에 <code class=\"language-text\">loading</code>이라는 상태값을 변경하여 <code class=\"language-text\">UI</code>를 띄워왔었다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fetchData <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setLoading<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"-reactsuspense를-통한-loading\" style=\"position:relative;\"><a href=\"#-reactsuspense%EB%A5%BC-%ED%86%B5%ED%95%9C-loading\" aria-label=\" reactsuspense를 통한 loading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍲 React.Suspense를 통한 loading</h3>\n<p>비동기로 작업되는 컴포넌트를 <code class=\"language-text\">Suspense</code>로 감싸고, 로딩 때 보여줄 화면을 <code class=\"language-text\">fallback</code> 속성으로 전달한다.</p>\n<p>로딩화면을 생성하기 위한 <code class=\"language-text\">useState</code>와 같은 <code class=\"language-text\">hook</code>들이 생성될 필요가 없어졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>LoadingSpinner <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Event <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suspense<span class=\"token operator\">></span></code></pre></div>\n<blockquote>\n<p>21-11-30 업데이트</p>\n</blockquote>\n<p>어떻게 가능한것일까?</p>\n<p><code class=\"language-text\">React</code>의 <code class=\"language-text\">repository</code>에 <code class=\"language-text\">Suspense</code>에 대한 세세한 로직을 찾을 수는 없었다.</p>\n<p>하지만, <code class=\"language-text\">Suspense</code>를 소개하는 항목에서 한가지 특징을 확인할 수 있는것이 <code class=\"language-text\">getDerivedStateFromError</code> 라는 생명주기이다.</p>\n<p>해당 생명주기를 갖고있는 컴포넌트 하위에서 발생한 에러를 포착하고, 다시 <code class=\"language-text\">render</code>를 호출할 수 있다.</p>\n<p>그리고 여러 테스트를 해본 결과 단 한가지의 값에는 다른 결과를 보였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> resolve <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  resolve <span class=\"token operator\">=</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  data <span class=\"token operator\">=</span> <span class=\"token string\">'success data'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> promise\n  <span class=\"token keyword\">return</span> data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Suspense\n        fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">&lt;</span>button\n            onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              resolve<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">></span>\n            resolve<span class=\"token operator\">!</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>InnerApp <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Suspense<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">InnerApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">CodeSandbox</code>에서 실행 가능</p>\n</blockquote>\n<p>임시로 작성해본 코드이긴 하지만 위처럼 하위 컴포넌트에서 <code class=\"language-text\">throw</code>와 같이 이후가 <strong>중단</strong>될 때, 값으로 <code class=\"language-text\">Promise</code>객체가 전달된다면 <code class=\"language-text\">fallback</code> 컴포넌트를 렌더링 하였다.</p>\n<p>핵심은 <code class=\"language-text\">throw</code>라는 <strong>중단</strong>과, 완료되지 않은 <code class=\"language-text\">Promise</code> 객체인것 같다.</p>\n<p>중단이 되었기 때문에 해당 컴포넌트를 렌더링하는것이 완료되지 않는 상태를 유지한다.</p>\n<p>마치, <code class=\"language-text\">resolve</code>가 아직 호출되지 않은 <code class=\"language-text\">await</code> 이후의 로직 혹은 <code class=\"language-text\">.then</code>의 콜백함수를 보는것 같다.</p>\n<p>중단이라는 의미를 더 쉽게 이해할수 있도록 보여지는것이, 위와 같이 <code class=\"language-text\">throw</code>된 컴포넌트는 <code class=\"language-text\">useEffect</code>와 같이 <code class=\"language-text\">render</code>가 완료된 이후에 호출되는 생명주기가 호출되지 않는다.</p>\n<blockquote>\n<p><code class=\"language-text\">mount</code> 되지 않는상황</p>\n</blockquote>\n<p>위와 같이 실행될 수 있는 조건은, 외부에서 데이터를 받아오는 비동기로직이 즉각적으로 <code class=\"language-text\">Promise</code> 객체를 반환하는것이 아닌 클로저를 통해 상태 변수를 갖고있는 함수가 반환되어야 하는것 같다.</p>\n<blockquote>\n<p>공식문서에도 그렇게 설명되어있음!!</p>\n</blockquote>\n<p>그리고, 그러한 일을 대신해주는것이 아래에 소개될 <code class=\"language-text\">React-Query</code>이다.</p>\n<h2 id=\"-react-query--suspense\" style=\"position:relative;\"><a href=\"#-react-query--suspense\" aria-label=\" react query  suspense permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍣 React-Query + Suspense</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  defaultOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    queries<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      retry<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      suspense<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">suspense</code>옵션이 활성화 된 <code class=\"language-text\">query</code>는 비동기 작업에서 <code class=\"language-text\">pending</code>상태일 경우 <code class=\"language-text\">React Suspense</code>에 보내진 <code class=\"language-text\">fallback</code> 컴포넌트를 화면에 띄우게된다.</p>\n<h3 id=\"-실제-사용-예시\" style=\"position:relative;\"><a href=\"#-%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\" 실제 사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍱 실제 사용 예시</h3>\n<p><code class=\"language-text\">Suspense</code>로 <code class=\"language-text\">suspense : true</code> 상태인 <code class=\"language-text\">useQuery</code>를 포함한 컴포넌트를 감싸주고, <code class=\"language-text\">fallback</code>속성으로 <code class=\"language-text\">pending</code>동안 보여질 컴포넌트를 보내준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>LoadingSpinner <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Event <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suspense<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">Event</code>컴포넌트는 <code class=\"language-text\">useQuery</code>를 통해 이벤트 데이터를 받아오게되는데, <code class=\"language-text\">query</code>의 특성상 데이터가 존재하는 경우만을 고려하기 때문에 데이터가 받아지기 전 까지는 컴포넌트가 마운트 되지 않는다.</p>\n<p>즉, 여기서 비동기작업이 <code class=\"language-text\">pending</code>상태일 때, <code class=\"language-text\">React-Query</code>를 사용하지 않았다면, <code class=\"language-text\">data</code>가 존재하지 않다는 에러가 뜨거나 로딩여부를 파악할 수 없는 비어있는 화면이 떴었을 것이다.</p>\n<p>어떻게 달라지는지 확인해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Event</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> eventData <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetchEventData'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEventData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 화면이 포커싱될 때 데이터를 자동으로 받는기능은 false</span>\n    <span class=\"token comment\">// 개인 취향..</span>\n    refetchOnWindowFocus<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>Content type<span class=\"token operator\">=</span><span class=\"token string\">\"event\"</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>eventData<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Styled<span class=\"token punctuation\">.</span>Event key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">event</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Event event<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>event<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>Event<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Styled<span class=\"token punctuation\">.</span>Content<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div style=\"text-align : center\">\n  <img src=\"/img/2021/07/07/2.gif?raw=true\" alt=\"2\">\n</div>\n<p>데이터가 <code class=\"language-text\">fetching</code>중일 때에는, <code class=\"language-text\">Suspense</code>로 보내진 <code class=\"language-text\">fallback</code> 컴포넌트인 <code class=\"language-text\">LoadingSpinner</code>가 노출되다가, <code class=\"language-text\">fetching</code>이 완료되고 <code class=\"language-text\">fresh</code>상태일 때에는, <code class=\"language-text\">Event</code>컴포넌트를 정상적으로 렌더링한다.</p>\n<h2 id=\"-에러-핸들링과-불완전함\" style=\"position:relative;\"><a href=\"#-%EC%97%90%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81%EA%B3%BC-%EB%B6%88%EC%99%84%EC%A0%84%ED%95%A8\" aria-label=\" 에러 핸들링과 불완전함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍛 에러 핸들링과 불완전함</h2>\n<p><code class=\"language-text\">React</code>의 <code class=\"language-text\">Suspense</code>와 <code class=\"language-text\">React-Query</code>를 적절히 사용하여, 데이터의 로딩 상태를 간단하게 구현해낼 수 있었다.</p>\n<p>하지만 아직 비동기 작업에서 발생하는 에러에 대한 핸들링에 대해서는 해결하지 못다.</p>\n<p>또한, <code class=\"language-text\">React</code>, <code class=\"language-text\">React-Query</code> 모두 <code class=\"language-text\">suspense</code>기능에 있어서는 아직 실험단계라서 불완전한 상태라고 한다.</p>\n<p>실제로, 적용한 프로젝트에서도 비슷한 에러가 있었는데 에러 핸들링, 그리고 발생했던 오류에 있어서는 다음에 다시 복기해보자.</p>","frontmatter":{"title":"⚛ React.Suspense를 사용하여 비동기 Pending 관리하기","date":"July 07, 2021"}}},"pageContext":{"slug":"/Study/Think/suspense/","previous":{"fields":{"slug":"/Study/Think/react-query/"},"frontmatter":{"title":"⚛ React-Query를 사용하여 효율적인 비동기 처리하기","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/error boundary/"},"frontmatter":{"title":"⚛ ErrorBoundary와 비동기 에러 핸들링","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}