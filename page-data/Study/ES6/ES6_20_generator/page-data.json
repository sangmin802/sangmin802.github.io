{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/ES6/ES6_20_generator/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"d3243b4f-935d-5173-8d3a-e3a0101dccc2","excerpt":"generator함수 의 구조를 가지고 있다. 함수 호출 시, 코드가 실행되는것이 아닌 실행을 처리하는 특별객체 를 반환하다. 으로 단 하나의 값을 반환하는것이 아닌, 로 여러개의 결과값을 원하는 시기에 반환시킬 수 있다. 는의 주요 메소드로, 호출시, 가장 가까운 yield문을 만날때까지 실행되고, 해당 값을 반환한다. 의 반환값은 의 형태이고, 는 반복종료. 일땐 에 값이 저장된다. 를 보면 알 수 있듯이, 는 를 반환하는 이다. iterator객체를 반환하는 코드를 generator…","html":"<h2 id=\"generator함수\" style=\"position:relative;\"><a href=\"#generator%ED%95%A8%EC%88%98\" aria-label=\"generator함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>generator함수</h2>\n<ol>\n<li><code class=\"language-text\">function*</code>의 구조를 가지고 있다.</li>\n<li><code class=\"language-text\">generator</code>함수 호출 시, 코드가 실행되는것이 아닌 실행을 처리하는 특별객체 <code class=\"language-text\">generator객체</code>를 반환하다.</li>\n<li><code class=\"language-text\">return</code>으로 단 하나의 값을 반환하는것이 아닌, <code class=\"language-text\">yield</code>로 여러개의 결과값을 원하는 시기에 반환시킬 수 있다.</li>\n<li><code class=\"language-text\">next()</code>는<code class=\"language-text\">generator</code>의 주요 메소드로, <code class=\"language-text\">next()</code>호출시, 가장 가까운 yield문을 만날때까지 실행되고, 해당 값을 반환한다.</li>\n<li><code class=\"language-text\">next()</code>의 반환값은 <code class=\"language-text\">{done : boolean, value : any}</code>의 형태이고, <code class=\"language-text\">done=true</code>는 반복종료. <code class=\"language-text\">done=false</code>일땐 <code class=\"language-text\">value</code>에 값이 저장된다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generateSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> generator <span class=\"token operator\">=</span> <span class=\"token function\">generateSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">generateSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\n\n<span class=\"token keyword\">const</span> firstYield <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstYield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value : 1, done : false};</span>\n<span class=\"token keyword\">const</span> secondYield <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>secondYield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value : 2, done : false};</span>\n<span class=\"token keyword\">const</span> thirdYield <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>thirdYield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value : 3, done : true};</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">next()</code>를 보면 알 수 있듯이, <code class=\"language-text\">generator</code>는 <code class=\"language-text\">iterator객체</code>를 반환하는 <code class=\"language-text\">iterable객체</code>이다.</li>\n</ul>\n<h3 id=\"iterator객체를-반환하는-코드를-generator로-짜보기\" style=\"position:relative;\"><a href=\"#iterator%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-generator%EB%A1%9C-%EC%A7%9C%EB%B3%B4%EA%B8%B0\" aria-label=\"iterator객체를 반환하는 코드를 generator로 짜보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iterator객체를 반환하는 코드를 generator로 짜보기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> range <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">from</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  to <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// == [Symbol.iterator] : *function()</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">;</span> value <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">;</span> value<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>range<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4,5]</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">Symbol.iterator</code>를 통해 반환되는 객체는, <code class=\"language-text\">next()</code> 메소드를 갖고있어야하며 정해진 구성을 갖춰야 한다.</li>\n<li><code class=\"language-text\">generator</code>를 통해 반환되는 값은, 위의 조건에 충족되기때문에 가능함.</li>\n</ol>\n<h3 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h3>\n<ul>\n<li><a href=\"https://ko.javascript.info/generators\">https://ko.javascript.info/generators</a></li>\n</ul>","frontmatter":{"title":"ES6_generator","date":"August 17, 2020"}}},"pageContext":{"slug":"/Study/ES6/ES6_20_generator/","previous":{"fields":{"slug":"/Study/ES6/ES6_19_proxy/"},"frontmatter":{"title":"ES6_Proxy","category":"Study","draft":false,"tag":"ECMA Script"}},"next":{"fields":{"slug":"/Study/ES6/ES6_21_iterable/"},"frontmatter":{"title":"ES6_iterable","category":"Study","draft":false,"tag":"ECMA Script"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}