{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/ES6/2020-07-16-ES6_01_let/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin Blog","author":"SangMin","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"a66187b1-dac8-57cd-a454-d146ba19e77b","excerpt":"let 기존 우리가 알던  변수선언과 다르게, 두번 선언될 수 없다.   은 스코프단위로 서로 다른 변수이지만, 는 함수단위이다.    &  & \n클릭해보세요. scope\n어떤 변수들에 접근할 수 있는지 정의하는 것 전역스코프 : 전역변수 지역스코프 : 함수스코프와 블록스코프가 있다. var는 함수스코프. let은 {}인 블록스코프","html":"<h2 id=\"let\" style=\"position:relative;\"><a href=\"#let\" aria-label=\"let permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let</h2>\n<ul>\n<li>\n<p>기존 우리가 알던 <code class=\"language-text\">var</code> 변수선언과 다르게, 두번 선언될 수 없다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> variable <span class=\"token operator\">=</span> <span class=\"token string\">'var 변수'</span><span class=\"token punctuation\">;</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>variable<span class=\"token punctuation\">)</span> <span class=\"token comment\">// var 변수</span>\n<span class=\"token keyword\">var</span> variable <span class=\"token operator\">=</span> <span class=\"token string\">'var 변수2'</span><span class=\"token punctuation\">;</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>variable<span class=\"token punctuation\">)</span> <span class=\"token comment\">// var 변수2</span>\n<span class=\"token comment\">// 대체된다.</span>\n\n<span class=\"token keyword\">let</span> newlet <span class=\"token operator\">=</span> <span class=\"token string\">'let 변수'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> newlet <span class=\"token operator\">=</span> <span class=\"token string\">'let 변수2'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Identifier 'newlet' has already been declared</span>\n<span class=\"token comment\">// 동일한 변수명으로 두번 선언(let ...)될 수 없다.</span>\n\n<span class=\"token comment\">// 아래의 상황은 가능하다.</span>\n<span class=\"token keyword\">let</span> letChange <span class=\"token operator\">=</span> <span class=\"token string\">'기존 let'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>letChange<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 기존 let</span>\nletChange <span class=\"token operator\">=</span> <span class=\"token string\">'바뀐 let'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>letChange<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 바뀐 let</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">let</code>은 스코프단위로 서로 다른 변수이지만, <code class=\"language-text\">var</code>는 함수단위이다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> homevar <span class=\"token operator\">=</span> <span class=\"token string\">'homevar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// var의 경우 : 100</span>\n<span class=\"token comment\">// let의 경우 : i is not defined at home</span>\n\n<span class=\"token comment\">// var의 경우, for 안의 스코프에서만 선언된 i더라도, 함수단위로 인식되기 때문에 i가 찍힌다.</span>\n<span class=\"token comment\">// 하지만 i를 let으로 선언했을 때, for문 안에서만 i를 인식할 수 있다.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">let</code> &#x26; <code class=\"language-text\">closure</code> &#x26; <code class=\"language-text\">scope</code>\n클릭해보세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ES6_let\"</span> data<span class=\"token operator\">-</span>action<span class=\"token operator\">=</span><span class=\"token string\">\"HTML\"</span><span class=\"token operator\">></span><span class=\"token constant\">HTML</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ES6_let\"</span> data<span class=\"token operator\">-</span>action<span class=\"token operator\">=</span><span class=\"token string\">\"CSS\"</span><span class=\"token operator\">></span><span class=\"token constant\">CSS</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ES6_let\"</span> data<span class=\"token operator\">-</span>action<span class=\"token operator\">=</span><span class=\"token string\">\"JavaScript\"</span><span class=\"token operator\">></span>JavaScript<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"ES6_let\"</span> data<span class=\"token operator\">-</span>action<span class=\"token operator\">=</span><span class=\"token string\">\"ECMA Script\"</span><span class=\"token operator\">></span><span class=\"token constant\">ECMA</span> Script<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ES6_let'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번째 리스트 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// var i로 할 경우, 모두 4번째 리스트라고 나온다.</span>\n<span class=\"token comment\">// -> for문 함수 안, 콜백함수인 console.log의 i는 외부함수의 i로서, 클로저 역할을 한다. </span>\n<span class=\"token comment\">// 따라서 i를 기억할 수 있다. 그런데 var는 특성상 이전의 값에다 덮어씌워지기때문에(참조) </span>\n<span class=\"token comment\">// 가장 마지막인 4가남지만, let은 그렇지 않기 때문에 let i를 할 경우 정상출력된다.</span></code></pre></div>\n<div style=\"\nwidth : 30%;\nmargin : 0 auto;\ndisplay : flex;\nflex-direction : column;\nalign-items : center;\nborder : 1px solid #666666; \nborder-radius : 5px;\npadding : 0.5em 0;\"\n>\n<ul>\n<li class=\"ES6_let\" data-action=\"HTML\">HTML</li>\n<li class=\"ES6_let\" data-action=\"CSS\">CSS</li>\n<li class=\"ES6_let\" data-action=\"JavaScript\">JavaScript</li>\n<li class=\"ES6_let\" data-action=\"ECMA Script\">ECMA Script</li>\n</ul>\n</div>\n<script>\nvar list = document.querySelectorAll('.ES6_let');\nfor(let i=0; i<list.length; i++){\nlist[i].addEventListener('click', function(){\n  alert(`${i}번째 리스트 입니다.`);\n})\n}\n</script>\n<ul>\n<li>scope\n어떤 변수들에 접근할 수 있는지 정의하는 것</li>\n<li>전역스코프 : 전역변수</li>\n<li>지역스코프 : 함수스코프와 블록스코프가 있다. var는 함수스코프. let은 {}인 블록스코프</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ES6_let","date":"July 16, 2020"}}},"pageContext":{"slug":"/Study/ES6/2020-07-16-ES6_01_let/","previous":{"fields":{"slug":"/Study/Think/2020-07-14-Closure/"},"frontmatter":{"title":"Closure, 클로저","category":"Study","draft":false}},"next":{"fields":{"slug":"/Study/ES6/2020-07-17-ES6_02_const/"},"frontmatter":{"title":"ES6_const","category":"Study","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}