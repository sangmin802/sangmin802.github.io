{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/ES6/ES6_12_template/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"c333ac29-ef84-5c7d-a40a-4897ea5db7a7","excerpt":"Template Template Literals  로 문자열을 감싸고, 를 통해 값을 바로 가져올 수 있다. 이전에는 나 로 문자열을 감싸고, 스크립트의 값을 로 해줬어야 했는데, 개선되었다. Tagged Template Literals 태그가 포함된 템플릿 리터럴을 함수로 분석할 수 있게되었다. func; 해당 함수에 템플릿 리터럴을 보내면,  첫번째 인자로 문자열 값들의 배열 이후로, 문자열이 아닌 스크립트의 값들을 인자로 받는다. 바닐라자바스크립트의 경우, 아래의 예제와 같이 template…","html":"<h2 id=\"template\" style=\"position:relative;\"><a href=\"#template\" aria-label=\"template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template</h2>\n<h3 id=\"template-literals\" style=\"position:relative;\"><a href=\"#template-literals\" aria-label=\"template literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template Literals</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">:</span> <span class=\"token string\">'박상민'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">안녕하세요 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 안녕하세요 박상민 입니다.</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\"></code> 로 문자열을 감싸고, <code class=\"language-text\">${}</code>를 통해 값을 바로 가져올 수 있다.</li>\n<li>이전에는 <code class=\"language-text\">&#39;&#39;</code>나 <code class=\"language-text\">&quot;&quot;</code>로 문자열을 감싸고, 스크립트의 값을 <code class=\"language-text\">+&#39;문자열&#39;+</code>로 해줬어야 했는데, 개선되었다.</li>\n</ul>\n<h3 id=\"tagged-template-literals\" style=\"position:relative;\"><a href=\"#tagged-template-literals\" aria-label=\"tagged template literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tagged Template Literals</h3>\n<ul>\n<li>\n<p>태그가 포함된 템플릿 리터럴을 함수로 분석할 수 있게되었다.</p>\n<blockquote>\n<p>func<code class=\"language-text\">문자열</code>;</p>\n</blockquote>\n</li>\n<li>\n<p>해당 함수에 템플릿 리터럴을 보내면, </p>\n<ol>\n<li>첫번째 인자로 문자열 값들의 배열</li>\n<li>이후로, 문자열이 아닌 스크립트의 값들을 인자로 받는다.</li>\n</ol>\n</li>\n<li>\n<p>바닐라자바스크립트의 경우, 아래의 예제와 같이 template를 생성해서 DOM을 구성할 때 변수에 따라 달라지는 값들을 표현할 수 있게되었다.</p>\n<blockquote>\n<p><b style=\"color : tomato;\">React</b>나 <b style=\"color : tomato;\">Vue</b>와 같이 값의 변경에 따라 re rendering을 하는 프레임워크들은 기본적으로 제공하는 기능이라고한다.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"예제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h4>\n<div style=\"\n  width : 30%;\n  margin : 0 auto;\n  display : flex;\n  flex-direction : column;\n  align-items : center;\n  border : 1px solid #666666; \n  border-radius : 5px;\n  padding : 0.5em 0.5em;\"\n  class=\"templateLiteralsExp\"\n>\n</div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">:</span> <span class=\"token string\">'Coffee-Bean'</span><span class=\"token punctuation\">,</span>\n    order <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    items <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'americano'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green-tea'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">:</span> <span class=\"token string\">'STARBUCKS'</span><span class=\"token punctuation\">,</span>\n    order <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tags<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> items</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>items <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    items <span class=\"token operator\">=</span> <span class=\"token string\">'주문가능한 상품이 없습니다.'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> tags<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span>tags<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>items<span class=\"token operator\">+</span>tags<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tags<span class=\"token punctuation\">)</span>      \n<span class=\"token comment\">// 이러한 배열을 가져옴</span>\n<span class=\"token comment\">// 0: \"&lt;div>welcome \"</span>\n<span class=\"token comment\">// 1: \"!&lt;/div>&lt;h2>주문가능항목&lt;/h2>&lt;div>\"</span>\n<span class=\"token comment\">// 2: \"&lt;/div>&lt;br>&lt;br>\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 아래의 forEach 메소드의 영향으로, data배열에서 각각의 값들을 순회하여 가져옴</span>\ndata<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> fn<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div>welcome </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!&lt;/div>&lt;h2>주문가능항목&lt;/h2>&lt;div></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>items<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/div>&lt;br>&lt;br></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> template<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<script>\n  const data = [\n    {\n      name : 'Coffee-Bean',\n      order : true,\n      items : ['americano', 'milk', 'green-tea']\n    },\n    {\n      name : 'STARBUCKS',\n      order : false,\n    }\n  ]\n\n  function fn(tags, name, items){\n    if(items === undefined){\n      items = '주문가능한 상품이 없습니다.';\n    }\n\n    return tags[0]+name+tags[1]+items+tags[2];\n  };\n  \n  data.forEach(res => {\n    const template = fn`<div>welcome ${res.name}!</div><h2>주문가능항목</h2><div>${res.items}</div><br><br>`;\n    document.querySelector('.templateLiteralsExp').innerHTML += template;\n  })\n</script>","frontmatter":{"title":"ES6_template처리","date":"July 27, 2020"}}},"pageContext":{"slug":"/Study/ES6/ES6_12_template/","previous":{"fields":{"slug":"/Study/ES6/ES6_11_map&weakmap/"},"frontmatter":{"title":"ES6_Map&WeakMap 추가정보를 담은 객체저장","category":"Study","draft":false,"tag":"ECMA Script"}},"next":{"fields":{"slug":"/Study/ES6/ES6_13_arroyfunction/"},"frontmatter":{"title":"ES6_Arrow function(화살표함수)","category":"Study","draft":false,"tag":"ECMA Script"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}