{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/ES6/ES6_23_Symbol.iterator+generator/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"e47f469f-926d-55ed-af4a-d9d3271b59f9","excerpt":"Symboliterator+generator 두가지 기능을 활용하여 객체를 반환하는 함수를 만들어보자 현재 는 반복순회할 수 없기 때문에 위의 에러가 발생한다. 해결하기 위해, 반복할 수 있는 의 형식으로 바꾸기위해  혹은 로 변환해줘야 한다. 위처럼 를 활용하여 새롭게 배열을 만드는것이 아닌, 로 할 수 있다.","html":"<h2 id=\"symboliteratorgenerator\" style=\"position:relative;\"><a href=\"#symboliteratorgenerator\" aria-label=\"symboliteratorgenerator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol[iterator]+generator</h2>\n<ul>\n<li>두가지 기능을 활용하여 <code class=\"language-text\">iterable</code>객체를 반환하는 함수를 만들어보자</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span> <span class=\"token operator\">:</span> <span class=\"token string\">'three'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// obj is not iterable</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// error</span></code></pre></div>\n<ul>\n<li>현재 <code class=\"language-text\">obj</code>는 반복순회할 수 없기 때문에 위의 에러가 발생한다.</li>\n<li>해결하기 위해, 반복할 수 있는 <code class=\"language-text\">Array</code>의 형식으로 바꾸기위해 <code class=\"language-text\">Object.keys</code> 혹은 <code class=\"language-text\">Object.values</code>로 변환해줘야 한다.</li>\n<li>위처럼 <code class=\"language-text\">Object method</code>를 활용하여 새롭게 배열을 만드는것이 아닌, <code class=\"language-text\">Symbol.iterator</code>로 할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ChangeToIterable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">unIterableObj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">valuesIter</span><span class=\"token punctuation\">(</span>unIterableObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// iterator객체를 반환함</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">next</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">valuesIter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>unIterableObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> unIterableObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> unIterableObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 정상작동됨.</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a <span class=\"token keyword\">of</span> <span class=\"token function\">ChangeToIterable</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// one two three</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"ES6_Symbol.iterator+generator","date":"August 17, 2020"}}},"pageContext":{"slug":"/Study/ES6/ES6_23_Symbol.iterator+generator/","previous":{"fields":{"slug":"/Study/ES6/ES6_22_Symbol/"},"frontmatter":{"title":"ES6_Symbol","category":"Study","draft":false,"tag":"ECMA Script"}},"next":{"fields":{"slug":"/Study/Think/clean code/"},"frontmatter":{"title":"깨끗한 코드를 위한 5가지 팁!","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}