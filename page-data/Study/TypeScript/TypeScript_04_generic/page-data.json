{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/TypeScript/TypeScript_04_generic/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"3c0e2f75-7353-5985-b33b-f34c096a72be","excerpt":"제네릭(Generic) 재사용을 목적으로 함수나 클래스의 선언 시점이 아닌, 사용 시점에 타입을 선언할 수 있다. 타입을 변수로 받아서 사용한다고 이해하기\n등의 경우, T…","html":"<h1 id=\"제네릭generic\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%ADgeneric\" aria-label=\"제네릭generic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭(Generic)</h1>\n<ul>\n<li>\n<p>재사용을 목적으로 함수나 클래스의 <b>선언 시점</b>이 아닌, <b>사용 시점</b>에 타입을 선언할 수 있다.</p>\n<blockquote>\n<p>타입을 변수로 받아서 사용한다고 이해하기\n<code class=\"language-text\">+</code>등의 경우, T라는 타입은 사용할수 없는 연산이므로 에러가 생김, 극히 일부의 타입만 사용할 수 있는 연산같은 경우는 피하는것이 좋은듯 하다..\n여러 예제를 검색해본 결과 동일한 타입의 값들이 채워지는 배열을 만드는 함수가 자주 사용될 때, 많이 이용되는듯 하다.</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">number</code>타입만 허용하는 함수로, 그 이외의 타입은 에러를 발생시킴</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b <span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상작동</span>\n<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입에러 발생</span></code></pre></div>\n</li>\n<li>\n<p>좀 더 범용적으로 사용하기 위해 <code class=\"language-text\">Union</code>을 사용하지만, 가독성이 떨어짐</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">|</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상작동</span>\n<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상작동</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Generic</code>을 사용하여 해결.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// T는 변수로, 원하는 이름 아무거나 상관없음</span>\n<span class=\"token keyword\">function</span> toArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ntoArray<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 타입추론으로 number로 추론</span>\ntoArray<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 타입추론으로 string로 추론</span>\ntoArray<span class=\"token operator\">&lt;</span>string <span class=\"token operator\">|</span> number<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 해당 함수에서 T라는 하나의 타입만 변수로 있기 때문에, '1'로 문자열로 추론하고, 2에서 타입에러가 발생함</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Generic</code>을 사용한 클래스</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">BaseInfo</span> <span class=\"token punctuation\">{</span>\nclassName <span class=\"token operator\">:</span> string\ngrade <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BaseInfo</span> <span class=\"token punctuation\">{</span>\nclassName <span class=\"token operator\">=</span> <span class=\"token string\">'프론트엔드학과'</span>\ngrade <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token keyword\">public</span> lecture <span class=\"token operator\">:</span> <span class=\"token constant\">T</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'TypeScript'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"제약조건\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4\" aria-label=\"제약조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제약조건</h2>\n<ul>\n<li>인터페이스나 타입 별칭에서도 제너릭을 사용할 수 있다.</li>\n<li>\n<p><code class=\"language-text\">extends</code>키워드를 사용하여 조건을 걸 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type CustomType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> string <span class=\"token operator\">|</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입별칭 + 제너릭</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyType</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CustomType</span><span class=\"token operator\">&lt;</span>number<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 인터페이스 + 제너릭 + 제약조건</span>\nname <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\nvalue <span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> dataA <span class=\"token operator\">:</span> MyType<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'Data A'</span><span class=\"token punctuation\">,</span>\nvalue <span class=\"token operator\">:</span> <span class=\"token string\">'Hello World'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> dataB <span class=\"token operator\">:</span> MyType<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'Data B'</span><span class=\"token punctuation\">,</span>\nvalue <span class=\"token operator\">:</span> <span class=\"token number\">1234</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> dataC <span class=\"token operator\">:</span> MyType<span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 타입에러</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'Data C'</span><span class=\"token punctuation\">,</span>\nvalue <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> dataD <span class=\"token operator\">:</span> MyType<span class=\"token operator\">&lt;</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 타입에러</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'Daca D'</span><span class=\"token punctuation\">,</span>\nvalue <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"조건부-타입conditional-types\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85conditional-types\" aria-label=\"조건부 타입conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건부 타입(Conditional Types)</h2>\n<ul>\n<li>제약조건(<code class=\"language-text\">&lt;&gt;</code> 내부)에서 사용하는 <code class=\"language-text\">extends</code>키워드와 다르게 타입구현 영역에서 사용하는 <code class=\"language-text\">extends</code>는 삼항 연산자를 사용할 수 있다.</li>\n<li>삼항연산자를 연속해서 사용할 수 있다.</li>\n<li>\n<p>이를 조건부 타입이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 타입별칭</span>\n<span class=\"token comment\">// T로 받은 타입이 U 타입으로 허용(?)된다면 string 타입이고 아니면 never이다.</span>\ntype <span class=\"token constant\">U</span> <span class=\"token operator\">=</span> string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> boolean<span class=\"token punctuation\">;</span>\ntype MyType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> string <span class=\"token operator\">:</span> never<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> test1 <span class=\"token operator\">:</span> MyType<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 'number' 형식은 'string' 형식에 할당할 수 없습니다.ts(2322)</span>\n<span class=\"token keyword\">let</span> test2 <span class=\"token operator\">:</span> MyType<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 'number' 형식은 'string' 형식에 할당할 수 없습니다.ts(2322)</span>\n<span class=\"token keyword\">let</span> test3 <span class=\"token operator\">:</span> MyType<span class=\"token operator\">&lt;</span><span class=\"token string\">'문자열'</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token string\">'안녕'</span> <span class=\"token comment\">// 타입 추론으로 정상작동</span>\n<span class=\"token keyword\">let</span> test4 <span class=\"token operator\">:</span> MyType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token string\">'안녕'</span> <span class=\"token comment\">// 'string' 형식은 'never' 형식에 할당할 수 없습니다.ts(2322)</span>\n\n<span class=\"token comment\">// 인터페이스</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> string\nisManager <span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\nmanagerId <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">true</span> <span class=\"token operator\">?</span> number <span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bool1 <span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bool2 <span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> manager <span class=\"token operator\">:</span> IUser<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> bool1<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// true일 때</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nisManager <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\nmanagerId <span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">:</span> IUser<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> bool2<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// false 일 때</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'gildong'</span><span class=\"token punctuation\">,</span>\nisManager <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\nmanagerId <span class=\"token operator\">:</span> <span class=\"token string\">'매니저 권한이 없습니다.'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://heropy.blog/2020/01/27/typescript/\">HEROPY Teck 한눈에 보는 타입스크립트</a></li>\n</ul>","frontmatter":{"title":"TypeScript Generic","date":"December 21, 2020"}}},"pageContext":{"slug":"/Study/TypeScript/TypeScript_04_generic/","previous":{"fields":{"slug":"/Study/TypeScript/TypeScript_03_type aliases/"},"frontmatter":{"title":"TypeScript Type Aliases","category":"Study","draft":false,"tag":"TypeScript"}},"next":{"fields":{"slug":"/Study/TypeScript/TypeScript_05_function/"},"frontmatter":{"title":"TypeScript Function","category":"Study","draft":false,"tag":"TypeScript"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}