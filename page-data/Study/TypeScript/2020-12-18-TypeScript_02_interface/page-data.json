{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/TypeScript/2020-12-18-TypeScript_02_interface/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"cb4bf55a-3b8a-558a-8de4-0bec0e3827d5","excerpt":"인터페이스(interface) 는 타입스크립트의 객체를 정의하는 일종의 규칙 및 구조이다. 는 클래스에서 구현부가 빠졌다고 이해하면 편하다. 즉, 어떠한 객체가 이러이러한 프로퍼티 혹은 메소드를 가진다고 선언하는 것이다. 실질적인 구현은 이를 구현한다고 선언하는 클래스에 맡긴다. 선택적 속성(Optional properties) 속성뒤에 를 사용하면 선택적 속성(필수가 아닌 속성)으로 정의할 수 있다. 읽기 전용 속성(Readonly Properties…","html":"<h1 id=\"인터페이스interface\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4interface\" aria-label=\"인터페이스interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스(interface)</h1>\n<ul>\n<li><code class=\"language-text\">interface</code>는 타입스크립트의 객체를 정의하는 일종의 규칙 및 구조이다.</li>\n<li>\n<p><code class=\"language-text\">interface</code>는 클래스에서 구현부가 빠졌다고 이해하면 편하다. 즉, 어떠한 객체가 이러이러한 프로퍼티 혹은 메소드를 가진다고 선언하는 것이다. 실질적인 구현은 이를 구현한다고 선언하는 클래스에 맡긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"선택적-속성optional-properties\" style=\"position:relative;\"><a href=\"#%EC%84%A0%ED%83%9D%EC%A0%81-%EC%86%8D%EC%84%B1optional-properties\" aria-label=\"선택적 속성optional properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선택적 속성(Optional properties)</h2>\n<ul>\n<li>\n<p>속성뒤에 <code class=\"language-text\">?</code>를 사용하면 선택적 속성(필수가 아닌 속성)으로 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\nisAdult<span class=\"token operator\">?</span> <span class=\"token operator\">:</span> boolean\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// isAdult속성이 없어도, 오류가 발생하지 않음</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"읽기-전용-속성readonly-properties\" style=\"position:relative;\"><a href=\"#%EC%9D%BD%EA%B8%B0-%EC%A0%84%EC%9A%A9-%EC%86%8D%EC%84%B1readonly-properties\" aria-label=\"읽기 전용 속성readonly properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽기 전용 속성(Readonly Properties)</h2>\n<ul>\n<li>\n<p>모든 속성에 <code class=\"language-text\">readonly</code>기능을 적용하고싶다면, <code class=\"language-text\">Utility</code>나 타입 단언을 활용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Readonly 각각 지정</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nreadonly name <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\nreadonly age <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span>\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'gildong'</span> <span class=\"token comment\">// 읽기 전용 속성이므로 'name'에 할당할 수 없습니다.</span>\n\n<span class=\"token comment\">// Readonly Utility 지정</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span>\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'gildong'</span> <span class=\"token comment\">// 읽기 전용 속성이므로 'name'에 할당할 수 없습니다.</span>\n\n<span class=\"token comment\">// 각각 속성들을 const로 타입 단언</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span>\n\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'gildong'</span> <span class=\"token comment\">// 읽기 전용 속성이므로 'name'에 할당할 수 없습니다.</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">Utility</code>는 이후 다룰 예정</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"함수-타입\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85\" aria-label=\"함수 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 타입</h2>\n<ul>\n<li>\n<p>함수 타입을 인터페이스로 정의할 때, 호출 시그니처(Call signature)라는것을 사용한다. 호출 시그니처는 다음과 같이 함수의 매개 변수와 반환 타입을 지정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">funcInterface</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">(</span><span class=\"token constant\">PARAM</span> <span class=\"token operator\">:</span> <span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">RETURN_TYPE</span> <span class=\"token comment\">// 변수의 타입, 리턴값의 타입</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>예제</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> string\nage <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GetUser</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 문자열의 변수를 받고, User 타입의 결과를 리턴함</span>\n<span class=\"token punctuation\">(</span>param1 <span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> User\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> getUser <span class=\"token operator\">:</span> <span class=\"token function-variable function\">GetUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// n을 통해 유저정보 찾기</span>\n<span class=\"token comment\">// age : 26이라는 정보를 받음</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name <span class=\"token operator\">:</span> n<span class=\"token punctuation\">,</span> age <span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"클래스-타입\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%83%80%EC%9E%85\" aria-label=\"클래스 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 타입</h2>\n<ul>\n<li><code class=\"language-text\">interface</code>를 사용하여 클래스를 정의할 때에는 <code class=\"language-text\">implements</code>키워드가 필요하다.</li>\n<li>\n<p><code class=\"language-text\">interface</code>를 타입으로 지정해줄 때에는 구조를 지정해주는것이기 때문에, <code class=\"language-text\">interface</code>에서 지정해준 속성만 갖고있을 수 있다(물론 선택적 옵션으로 예외도 있음). 하지만 클래스에 <code class=\"language-text\">implements</code>로 지정해주는 경우는 구조 지정이 아닌, 구성 요소중 하나이므로 <code class=\"language-text\">interface</code>외의 속성들을 가질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoaClass</span> <span class=\"token punctuation\">{</span>\ngroup <span class=\"token operator\">:</span> string\njob <span class=\"token operator\">:</span> string\nname <span class=\"token operator\">:</span> string\n<span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string\noptionalFunction<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token comment\">// 선택적 옵션 `?`로 인해 없어도 됨</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Warrior</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoaClass</span> <span class=\"token punctuation\">{</span>\ngroup <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Warrior'</span>\njob <span class=\"token operator\">:</span> string\nname <span class=\"token operator\">:</span> string\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">job <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">UserName : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Class : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Warrior</span><span class=\"token punctuation\">(</span><span class=\"token string\">'워로드'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'워로드는뒤로점프'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"구문-시그니처construct-signature\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EB%AC%B8-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98construct-signature\" aria-label=\"구문 시그니처construct signature permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구문 시그니처(Construct signature)</h3>\n<ul>\n<li>클래스를 변수로 받아서 사용할 경우</li>\n<li>\n<p>잘못된 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoaClass</span> <span class=\"token punctuation\">{</span>\ngroup <span class=\"token operator\">:</span> string\njob <span class=\"token operator\">:</span> string\nname <span class=\"token operator\">:</span> string\n<span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string\noptionalFunction<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Warrior</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoaClass</span> <span class=\"token punctuation\">{</span>\ngroup <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Warrior'</span>\njob <span class=\"token operator\">:</span> string\nname <span class=\"token operator\">:</span> string\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">job <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">UserName : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Class : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Magician</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoaClass</span> <span class=\"token punctuation\">{</span>\ngroup <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Magician'</span>\njob <span class=\"token operator\">:</span> string\nname <span class=\"token operator\">:</span> string\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">job <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">UserName : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Class : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c <span class=\"token operator\">:</span> Function<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> job <span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Function <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">c</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이 식은 생성할 수 없습니다.'Function' 형식에 구문 시그니처가 없습니다.ts(2351)</span>\n<span class=\"token comment\">// class또한 생성자 함수라 생각하여 타입을 Function으로 해주었지만, 일반 함수는 new와 함께 호출될 수 없어 발생되는 에러이다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Warrior</span><span class=\"token punctuation\">(</span><span class=\"token string\">'워로드'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'워로드는뒤로점프'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Magician</span><span class=\"token punctuation\">(</span><span class=\"token string\">'바드'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'모여요꿈동산'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Construct signature</code>를 사용하여 해결</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoaClass</span> <span class=\"token punctuation\">{</span>\ngroup <span class=\"token operator\">:</span> string\njob <span class=\"token operator\">:</span> string\nname <span class=\"token operator\">:</span> string\n<span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string\noptionalFunction<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Construct signature 생성</span>\n<span class=\"token comment\">//  new 키워드를 가지고있는 함수, 즉 생성자함수를 정의해주는데, 생성되는 클래스가 필요한 변수를 받고 참조할 interface를 반환해준다.</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClassContructor</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>job <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> LoaClass<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Warrior</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoaClass</span> <span class=\"token punctuation\">{</span>\ngroup <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Warrior'</span>\njob <span class=\"token operator\">:</span> string\nname <span class=\"token operator\">:</span> string\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">job <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">UserName : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Class : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Magician</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoaClass</span> <span class=\"token punctuation\">{</span>\ngroup <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Magician'</span>\njob <span class=\"token operator\">:</span> string\nname <span class=\"token operator\">:</span> string\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">job <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">UserName : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Class : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c <span class=\"token operator\">:</span> ClassContructor<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> job <span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> LoaClass <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">c</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span>Warrior<span class=\"token punctuation\">,</span> <span class=\"token string\">'워로드'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'워로드는뒤로점프'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> user2 <span class=\"token operator\">=</span> <span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span>Magician<span class=\"token punctuation\">,</span> <span class=\"token string\">'바드'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'모여요꿈동산'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">.</span><span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"UserName : 워로드는뒤로점프 Class : 워로드 - Warrior\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">.</span><span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"UserName : 모여요꿈동산 Class : 바드 - Magician\"</span></code></pre></div>\n<blockquote>\n<p>return하는 타입을 LoaClass로 하였는데, <code class=\"language-text\">implements</code>가 약간 상속.. 같은건가? 따라서 <code class=\"language-text\">number</code>타입에 <code class=\"language-text\">null</code>도 포함되어 되는것처럼 타입을 약간 범위처럼 생각해보면 생성되는 클래스도 <code class=\"language-text\">LoaClass</code>타입의 범위 내라서 가능한건가..?</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"인덱싱-가능-타입indexable-types\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8B%B1-%EA%B0%80%EB%8A%A5-%ED%83%80%EC%9E%85indexable-types\" aria-label=\"인덱싱 가능 타입indexable types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인덱싱 가능 타입(Indexable types)</h2>\n<ul>\n<li><code class=\"language-text\">interface</code>를 통해 속성의 타입을 정의할 수 있지만, 수많은 속성을 가지거나 단언할 수 없는 임의의 속성이 포함되는 구조에서는 한계가 있다.</li>\n<li>\n<p><code class=\"language-text\">arr[2]</code>처럼 숫자로 인덱싱하거나 <code class=\"language-text\">obj[name]</code>처럼 문자로 인덱싱하는 타입이 있다. 인덱스의 타입은 문자열과 숫자열만 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">[</span><span class=\"token constant\">INDEX_NAME</span> <span class=\"token operator\">:</span> <span class=\"token constant\">INDEX_TYPE</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">RETURN_TYPE</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>동적인 <code class=\"language-text\">key</code>를 사용할 때 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 자바스크립트에서는 잘 돌아가지만, 타입스크립트에서는 컴파일 중 에러가 발생함</span>\n<span class=\"token comment\">//  console.log()에서 인자의 타입을 몰라서 any로 지정하기 때문</span>\n<span class=\"token comment\">//   -> noImplicitAny가 true라면 에러 안생김</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Index Signature를 사용해 key의 타입을 지정해주어 해결</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Indexable</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">[</span>key <span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">// return을 any로 해도 됨</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">:</span> Indexable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">interface</code>에 정의되지 않은 속성들을 사용할 때</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">[</span>prop <span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> boolean <span class=\"token comment\">// 해당 줄 없어지면, age, isMale속성이 존재하지 않아 아래에서 에러가 발생한다.</span>\nname <span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span>\nisMale <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>특정한 타입의 값들이 사용되는 객체나 배열이 여러개 있을 경우, 하나의 <code class=\"language-text\">interface</code>를 생성하여 반복적으로 해당 객체나 배열의 타입을 입력해주는 수고를 덜 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 객체</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iobject</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">[</span>key <span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">:</span> Iobject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nid <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 배열</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iarray</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">[</span>key <span class=\"token operator\">:</span> number<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">:</span> Iarray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'타입'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'스크립트'</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"keyof\" style=\"position:relative;\"><a href=\"#keyof\" aria-label=\"keyof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>keyof</h2>\n<ul>\n<li>인덱싱 가능 타입(숫자열 문자열) 에서 <code class=\"language-text\">keyof</code> 를 사용하면 속성 이름을 타입으로 사용할 수 있다.</li>\n<li>\n<p>아직은 존재의 이유를 전 - 혀 모르겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Countries</span> <span class=\"token punctuation\">{</span>\n<span class=\"token constant\">KR</span> <span class=\"token operator\">:</span> <span class=\"token string\">'대한민국'</span>\n<span class=\"token constant\">US</span> <span class=\"token operator\">:</span> <span class=\"token string\">'미국'</span>\n<span class=\"token constant\">UK</span> <span class=\"token operator\">:</span> <span class=\"token string\">'영국'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> country <span class=\"token operator\">:</span> keyof Countries<span class=\"token punctuation\">;</span> <span class=\"token comment\">// KR | US | UK</span>\ncountry <span class=\"token operator\">=</span> <span class=\"token string\">'KR'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\ncountry <span class=\"token operator\">=</span> <span class=\"token string\">'RU'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\"RU\"' 형식은 '\"KR\" | \"US\" | \"UK\"' 형식에 할당할 수 없습니다.</span></code></pre></div>\n</li>\n<li>\n<p>keyof를 통한 인덱싱으로 타입의 개별 값에도 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Countries</span> <span class=\"token punctuation\">{</span>\n<span class=\"token constant\">KR</span> <span class=\"token operator\">:</span> <span class=\"token string\">'대한민국'</span><span class=\"token punctuation\">,</span>\n<span class=\"token constant\">US</span> <span class=\"token operator\">:</span> <span class=\"token string\">'미국'</span><span class=\"token punctuation\">,</span>\n<span class=\"token constant\">UK</span> <span class=\"token operator\">:</span> <span class=\"token string\">'영국'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> country<span class=\"token operator\">:</span> Countries<span class=\"token punctuation\">[</span>keyof Countries<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Countries['KR' | 'US' | 'UK']</span>\ncountry <span class=\"token operator\">=</span> <span class=\"token string\">'대한민국'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\ncountry <span class=\"token operator\">=</span> <span class=\"token string\">'러시아'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\"러시아\"' 형식은 '\"대한민국\" | \"미국\" | \"영국\"' 형식에 할당할 수 없습니다.</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"인터페이스-확장\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%ED%99%95%EC%9E%A5\" aria-label=\"인터페이스 확장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스 확장</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">interface</code>도 클래스처럼 <code class=\"language-text\">extends</code> 키워드를 활용해 상속할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\nname<span class=\"token operator\">?</span> <span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Crying</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">meow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Crying</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">meow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'야옹'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>같은 이름의 <code class=\"language-text\">interface</code>를 생성하여, 내용을 추가할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> string\nage <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\ngender <span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user1 <span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span>\ngender <span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://heropy.blog/2020/01/27/typescript/\">HEROPY Teck 한눈에 보는 타입스크립트</a></li>\n<li><a href=\"https://hyunseob.github.io/2016/10/17/typescript-interface/\">HyunSeob 클래스와 인터페이스</a></li>\n</ul>","frontmatter":{"title":"TypeScript interface","date":"December 18, 2020"}}},"pageContext":{"slug":"/Study/TypeScript/2020-12-18-TypeScript_02_interface/","previous":{"fields":{"slug":"/Study/TypeScript/2020-12-16-TypeScript_01_types/"},"frontmatter":{"title":"TypeScript 타입 기본(Type)","category":"Study","draft":false,"tag":"TypeScript"}},"next":{"fields":{"slug":"/Study/TypeScript/2020-12-21-TypeScript_03_type aliases/"},"frontmatter":{"title":"TypeScript Type Aliases","category":"Study","draft":false,"tag":"TypeScript"}}}},"staticQueryHashes":["3128451518","3665928227"]}