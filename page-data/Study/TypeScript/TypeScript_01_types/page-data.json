{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/TypeScript/TypeScript_01_types/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"e9fa77fb-d0f3-5e3c-8f41-b9976732a4e4","excerpt":"타입 기본(Types) 타입 지정 타입스크립트는 변수, 매개변수, 속성등에 와 같은 형태로 타입을 지정해줄 수 있다. 자바스크립트로 컴파일할 경우, 타입들이 모두 사라진다. 타입 에러 만약, 지정해준 타입이 아닌 다른 타입의 값이 들어오게 된다면, 바로 에러가 발생한다. 타입선언 불리언 : Boolean true, false로 값을 나타낸다. 숫자 : Number 소숫점을 포함한 숫자와 2진수 및 8진수 리터럴도 적용할 수 있다. 문자 : String…","html":"<h1 id=\"타입-기본types\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EA%B8%B0%EB%B3%B8types\" aria-label=\"타입 기본types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 기본(Types)</h1>\n<h2 id=\"타입-지정\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%A7%80%EC%A0%95\" aria-label=\"타입 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 지정</h2>\n<ul>\n<li>\n<p>타입스크립트는 변수, 매개변수, 속성등에 <code class=\"language-text\">: types</code>와 같은 형태로 타입을 지정해줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 코틀린때처럼, 리턴값의 타입도 정해줄 수 있는듯 하다.</span>\n<span class=\"token comment\">// 별도로 정해주지 않는다면, 알아서 설정하는 듯 함.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> b <span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> string <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">'타입'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'스크립트'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>자바스크립트로 컴파일할 경우, 타입들이 모두 사라진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> string <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">'타입'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'스크립트'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"타입-에러\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%97%90%EB%9F%AC\" aria-label=\"타입 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 에러</h2>\n<ul>\n<li>\n<p>만약, 지정해준 타입이 아닌 다른 타입의 값이 들어오게 된다면, 바로 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b <span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 'number' 형식은 'string' 형식에 할당할 수 없습니다.ts(2322)</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"타입선언\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%84%A0%EC%96%B8\" aria-label=\"타입선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입선언</h2>\n<h3 id=\"불리언--boolean\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8--boolean\" aria-label=\"불리언  boolean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불리언 : Boolean</h3>\n<ul>\n<li>\n<p>true, false로 값을 나타낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> bool <span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bool2 <span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"숫자--number\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90--number\" aria-label=\"숫자  number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자 : Number</h3>\n<ul>\n<li>\n<p>소숫점을 포함한 숫자와 2진수 및 8진수 리터럴도 적용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> six <span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pie <span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> hex<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 61453</span>\n<span class=\"token keyword\">let</span> binary<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token keyword\">let</span> octal<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 484</span>\n<span class=\"token keyword\">let</span> infinity<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> nan <span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"문자--string\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90--string\" aria-label=\"문자  string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자 : String</h3>\n<ul>\n<li>\n<p>템플릿 리터럴을 포함한 문자열을 나타낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myName <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'상민'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myAge <span class=\"token operator\">:</span> number  <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> introduce <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">내 이름은 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다. 나이는 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myAge<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"배열--array\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4--array\" aria-label=\"배열  array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열 : Array</h3>\n<ul>\n<li>배열을 나타내며 두가지 방법으로 타입을 선언할 수 있다.</li>\n<li>\n<p>특정 타입만을 가지고있는 배열</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1. 타입[]</span>\n<span class=\"token keyword\">let</span> number <span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2. Array&lt;타입> - 코틀린을 할 때에는 이 방법을 썼다.</span>\n<span class=\"token keyword\">let</span> classes <span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'바드'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'워로드'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'블래스터'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'디스트로이어'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'서머너'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'아르카나'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>여러개의 타입을 가지고 있는 배열</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1. (타입1 | 타입2 ...)[]</span>\n<span class=\"token keyword\">let</span> array1 <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'타입'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>type <span class=\"token operator\">:</span> <span class=\"token string\">'객체'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2. Array&lt;타입1 | 타입2 ...></span>\n<span class=\"token keyword\">let</span> array2 <span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> Array<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'스크립트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>너무 많은 타입을 가지고있거나, 타입을 단언할 수 없을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> array3 <span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'타입'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> array4 <span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'스크립트'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>interface나 사용자지정 타입을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Classes</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">class</span> <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\nlevel <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> classesArr <span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Classes<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'모여요꿈동산'</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">class</span> <span class=\"token operator\">:</span> <span class=\"token string\">'바드'</span><span class=\"token punctuation\">,</span>\nlevel <span class=\"token operator\">:</span> <span class=\"token number\">1369</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'워로드는뒤로점프'</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">class</span> <span class=\"token operator\">:</span> <span class=\"token string\">'워로드'</span><span class=\"token punctuation\">,</span>\nlevel <span class=\"token operator\">:</span> <span class=\"token number\">1031</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<blockquote>\n<p>코틀린에서 내가 만든 클래스들을 타입으로 사용했었다.</p>\n</blockquote>\n</li>\n<li>\n<p>읽기전용 배열을 생성할 수 있다. 데이터를 추가, 변경등을 할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> array5 <span class=\"token operator\">:</span> readonly number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> array6 <span class=\"token operator\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"튜플--turple\" style=\"position:relative;\"><a href=\"#%ED%8A%9C%ED%94%8C--turple\" aria-label=\"튜플  turple permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>튜플 : Turple</h3>\n<ul>\n<li>배열과 매우 유사하지만, 지정해준 타입이 배열의 고정된 길이 이다.</li>\n<li>\n<p>타입의 위치가 정해진 배열이라 생각하면 될듯?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> turple <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nturple <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'타입스트립트'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nturple <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'타입스크립트'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 에러</span>\nturple <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'타입스트립트'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 에러 + 갯수 에러</span></code></pre></div>\n</li>\n<li>\n<p>Turple타입인 이차원 배열을 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> turple2 <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> boolean<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nturple2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'타입'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'스크립트'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>Turple은 정해진 타입의 고정된 길이의 배열을 제공하지만, 할당에 국한되므로 push나 splice와 같은 행위는 막을 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> turple3 <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span>\nturple3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nturple3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nturple3<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 가능</span>\nturple3<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 첫 Turple 지정에 문자열과 숫자만 가능하도록 설정되어있기 때문에, 타입 에러가 발생함</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"열거형--enum\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95--enum\" aria-label=\"열거형  enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거형 : Enum</h3>\n<ul>\n<li>\n<p>숫자 혹은 문자열 값 집합에 이름을 부여할 수 있는 타입으로, 값의 종류가 일정한 범위로 정해져있는 경우 유용하다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Week <span class=\"token punctuation\">{</span>\nSun<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 0</span>\nMon<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 1</span>\nTue<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 2</span>\nWed<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 3</span>\nThu<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 4</span>\nFri<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 5</span>\nSat <span class=\"token comment\">// (enum member) Week.Sun = 6</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>암만해봐도 숫자는 안되는것 같다.<br>\n순차적으로 증가할 경우 사용할 수 있을것같긴한데.. 솔직히 아직은 왜있는지 모르겠다.</p>\n</blockquote>\n</li>\n<li>\n<p>수동으로 값을 지정해줄 수 있으며, 지정해준 값으로부터 다시 1씩 증가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Week2 <span class=\"token punctuation\">{</span>\nSun<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 0</span>\nMon<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 1</span>\nTue <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 30</span>\nWed<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 31</span>\nThu<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 32</span>\nFri<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (enum member) Week.Sun = 33</span>\nSat <span class=\"token comment\">// (enum member) Week.Sun = 34</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>역방향 매핑을 지원하여, 키를 통해 값을 조회할 수 있으며 값을 통해 키를 조회할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Week<span class=\"token punctuation\">.</span>Sun <span class=\"token comment\">// 0</span>\nWeek<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Sun</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"모든-타입--any\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%A0-%ED%83%80%EC%9E%85--any\" aria-label=\"모든 타입  any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모든 타입 : Any</h3>\n<ul>\n<li>Any는 모든 타입을 의미한다.</li>\n<li>일반 자바스크립트처럼 모든 타입의 값들을 할당해 줄 수 있다.</li>\n<li>\n<p>외부 자원을 활용해 개발할 때, 타입을 알 수 없을 경우 유용하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> any <span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\nany <span class=\"token operator\">=</span> <span class=\"token string\">'타입스크립트'</span>\nany <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nany <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>다양한 타입의 값을 가지고 있는 배열을 만들 때 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'타입스크립트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'타입스크립트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>타입시스템을 좀 더 강하게 사용하기 위해 Any타입을 막고 싶다면 컴파일 옵션에서 <code class=\"language-text\">&quot;noImplicitAny&quot;: true</code>를 통해 Any 사용시 에러를 발생시킬 수 있다.</p>\n<blockquote>\n<p>그치만.. 난 any가 좋은걸..</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"알-수-없는-타입--unknown\" style=\"position:relative;\"><a href=\"#%EC%95%8C-%EC%88%98-%EC%97%86%EB%8A%94-%ED%83%80%EC%9E%85--unknown\" aria-label=\"알 수 없는 타입  unknown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알 수 없는 타입 : Unknown</h3>\n<ul>\n<li>\n<p>Any처럼 어떤 타입의 값도 할당할 수 있지만, Unknown을 다른 타입에 할당할 수는 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> u <span class=\"token operator\">:</span> unknown <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v1 <span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Any는 어디든 가능</span>\n<span class=\"token keyword\">let</span> v2 <span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span> <span class=\"token comment\">// unknown 형식은 any를 제외한 다른 타입에는 할당이 불가능함</span>\n<span class=\"token keyword\">let</span> v3 <span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Any는 unknown을 할당할 받을 수 있음</span>\n<span class=\"token keyword\">let</span> v4 <span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> u <span class=\"token keyword\">as</span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">// unknown중에서 특정 타입을 단언하면 할당할 수 있다.</span></code></pre></div>\n<blockquote>\n<p>Unknown타입은 타입단언이나 타입가드를 필요로 한다고 함. 이후 포스트에서 다룰예정</p>\n</blockquote>\n</li>\n<li>\n<p>Any처럼 다양한 타입을 반환하는 외부 API에서 유용할 수 있지만, 되도록 명확한 타입을 사용하는것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nid <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\npassword <span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Result</span> <span class=\"token punctuation\">{</span>\nsuccess <span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\nvalue <span class=\"token operator\">:</span> unknown\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user <span class=\"token operator\">:</span> User</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Result <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n  success <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> \n  value <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin802'</span><span class=\"token punctuation\">,</span>\n    name <span class=\"token operator\">:</span> <span class=\"token string\">'상민이'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n  success <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> \n  value <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'없는 아이디입니다.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"객체--object\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4--object\" aria-label=\"객체  object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 : Object</h3>\n<ul>\n<li>typeof 연산을 하였을 때, object로 반환하는 모든 타입</li>\n<li>\n<p>여러 타입의 상위 타입이기 때문에, 정확도는 떨어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> func <span class=\"token operator\">:</span> <span class=\"token function-variable function\">object</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> nullValue <span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> date <span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>보다 정확하게 타입을 지정하기 위해, <code class=\"language-text\">object</code>로 지정하기보단, 객체 속성들의 타입을 개별적으로 지정해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> age <span class=\"token operator\">:</span> number<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>반복적인 사용을 할 경우, <code class=\"language-text\">interface</code>나 <code class=\"language-text\">type</code>을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"null과-undefined\" style=\"position:relative;\"><a href=\"#null%EA%B3%BC-undefined\" aria-label=\"null과 undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null과 Undefined</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">Null</code>과 <code class=\"language-text\">Undefined</code>는 모든 타입의 하위 타입으로, 대부분의 타입에 할당될 수 있으며 서로에게도 할당이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> str <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> age <span class=\"token operator\">:</span> number<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> und <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> nul <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> voi <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// void는 undefined가 불가능</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"void\" style=\"position:relative;\"><a href=\"#void\" aria-label=\"void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Void</h3>\n<ul>\n<li>\n<p>보이드는 값을 반환하지 않는 함수(<code class=\"language-text\">return</code>값이 없는 함수)에서 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">consoleHello</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> hi <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token function\">consoleHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hi<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 억지로 반환시키면 undefined를 반환시킴</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"never\" style=\"position:relative;\"><a href=\"#never\" aria-label=\"never permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Never</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">Never</code>는 절대 발생하지 않을 값을 뜻하며, 어떠한 타입도 적용할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> never <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">void</code>랑 용도가 비슷해보이는데..?</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"union\" style=\"position:relative;\"><a href=\"#union\" aria-label=\"union permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union</h3>\n<ul>\n<li>\n<p>2개 이상의 타입을 허용하는 경우, <code class=\"language-text\">Union</code>이라고 한다. <code class=\"language-text\">|</code>를 통해 타입을 구분하며, <code class=\"language-text\">()</code>는 선택사항이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>string <span class=\"token operator\">|</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">;</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">Union</code>이라는 타입명이 있는건 아니고, 위와같은 상황?을 이야기하는듯 하다.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"인터섹션--intersection\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%EC%84%B9%EC%85%98--intersection\" aria-label=\"인터섹션  intersection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터섹션 : Intersection</h3>\n<ul>\n<li><code class=\"language-text\">&amp;</code>를 사용해 2개이상의 타입을 조합하는 경우이다.</li>\n<li>\n<p>새로운 타입을 생성하지 않고, 기존의 것들들 조합할 수 있긴하지만, 자주사용되지는 않는다고한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Authorized</span> <span class=\"token punctuation\">{</span>\nauthorized <span class=\"token operator\">:</span> boolean\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">:</span> User <span class=\"token operator\">&amp;</span> Authorized <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span>\nauthorized <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"함수--function\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98--function\" aria-label=\"함수  function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 : Function</h3>\n<ul>\n<li>\n<p>화살표 함수를 이용해 타입을 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> func <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">func2</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1 <span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> number<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">func2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">func3</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">func3</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'반환하는거 없습니다.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"타입-추론--inference\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0--inference\" aria-label=\"타입 추론  inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 추론 : Inference</h2>\n<ul>\n<li>명시적으로 타입이 선언되어있지 않은경우, 타입스크립트는 부여된 값을 통해 타입을 추론한다.</li>\n<li>\n<p><b style=\"color : tomato;\">주의할 점</b></p>\n<ul>\n<li>\n<p>const : 할당된 값이 타입이되버림 <code class=\"language-text\">const a = &quot;문자열&quot; // a : &quot;문자열</code></p>\n<blockquote>\n<p><code class=\"language-text\">const</code>도 별도로 타입을 입력해주면, 해당 타입이 뜨긴 함</p>\n</blockquote>\n</li>\n<li>let : 정상적인 타입추론이 이루어짐 <code class=\"language-text\">let a = &quot;문자열&quot; // a : string</code></li>\n<li><code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>는 타입을 추론하는 규칙이 다르다. 이는 합리적인것이, <code class=\"language-text\">let</code>의 경우 타입만 동일하다면 값이 바꿀수 있지만, <code class=\"language-text\">const</code>는 다른 값이 대입될 수 없기 때문에 그냥 타입처럼 박히는? 것이다.</li>\n</ul>\n</li>\n<li>\n<p>모든 곳에 타입을 명시할 필요는 없으며, 이를 통해 좀 더 가독성 좋은 코드를 짤 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\nnum <span class=\"token operator\">=</span> <span class=\"token string\">'타입스크립트'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'string' 형식은 'number' 형식에 할당할 수 없습니다.ts(2322)</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"타입-단언--assertions\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8--assertions\" aria-label=\"타입 단언  assertions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 단언 : Assertions</h2>\n<ul>\n<li>타입스크립트가 타임 추론을 통해 판단할 수 있는 타입의 범위를 넘는경우, 더 이상 추론하지 않게 막을 수 있다.</li>\n<li>\n<p>개발자가 타입스크립트보다 타입에 대해 더 잘 알고있는 상황을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 상황 설명</span>\n<span class=\"token comment\">//  val : 문자열과 숫자열을 받을 수 있다.</span>\n<span class=\"token comment\">//  isNumber : 숫자인지 아닌지 boolean으로 받는다.</span>\n<span class=\"token comment\">//    개발자는 isNumber가 true라면 val이 number타입이라는것을 알고있지만, 타입스크립트는 알지 못한다.</span>\n<span class=\"token comment\">//    따라서, func1 같은 경우 toFixed메소드는 string타입에서 사용할 수 없다는 에러를 출력하게된다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val <span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number<span class=\"token punctuation\">,</span> isNumber <span class=\"token operator\">:</span> boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isNumber<span class=\"token punctuation\">)</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// number타입인 val만 toFixed 메소드가 실행되도록 한다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val <span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number<span class=\"token punctuation\">,</span> isNumber <span class=\"token operator\">:</span> boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>val <span class=\"token keyword\">as</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"non-null-단언-연산자\" style=\"position:relative;\"><a href=\"#non-null-%EB%8B%A8%EC%96%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"non null 단언 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-null 단언 연산자</h3>\n<ul>\n<li>\n<p>단언 연산자 <code class=\"language-text\">!</code>를 통해, <code class=\"language-text\">Null</code>이나 <code class=\"language-text\">undefined</code>값이 아님을 단언할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 조건문을 활용할 경우</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 위의 타입 단언을 사용할 경우</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">as</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Non-null(null이나 undefined가 아닌)연산자 !를 사용할 경우</span>\n<span class=\"token keyword\">return</span> x<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"타입-가드--guards\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EA%B0%80%EB%93%9C--guards\" aria-label=\"타입 가드  guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 가드 : Guards</h2>\n<ul>\n<li>타입스크립트가 추론 가능한 특정 범위에서 타입을 보장할 수 있다.</li>\n<li>\n<p><code class=\"language-text\">val is Type</code>의 형태로, 변수의 상태를 반환 타입으로 명시한 함수이다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 변수의 타입을 매번 보장하기 위해 타입단언을 여러번 사용하게되는 경우가 있다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">someFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number<span class=\"token punctuation\">,</span> isNumber<span class=\"token operator\">:</span> boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>val <span class=\"token keyword\">as</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>val <span class=\"token keyword\">as</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>val <span class=\"token keyword\">as</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span>val <span class=\"token keyword\">as</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span>val <span class=\"token keyword\">as</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 타입가드 val is Type</span>\n<span class=\"token comment\">//  솔직히 잘 모르겠음.. 그냥 number인지 확인하는 함수를 별도로 밖으로 뺀 느낌이다.</span>\n<span class=\"token comment\">//  val is number를 그냥 boolean으로 바꿔서 하는거랑 다른게 뭐가 있나..?</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val <span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> val is number <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">someFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  val<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  val<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  val<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  val<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">typeof</code>, <code class=\"language-text\">in</code> 그리고 <code class=\"language-text\">instanceof</code>연산자를 직접 사용하는 타입 가드.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// typeof 연산자</span>\n<span class=\"token comment\">//  당연히 object는 사용하는것을 비추천</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">funcTypeof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val <span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  val<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n  val<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  val<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  val<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// in 연산자</span>\n<span class=\"token comment\">//  속성 in 객체명</span>\n<span class=\"token comment\">//    명시된 속성이 객체에 존재하는지 여부 파악</span>\n<span class=\"token comment\">//    in을 사용하려면, any타입의 변수여야한다.</span>\n<span class=\"token comment\">//    근데 작동은 안되는데..?</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">funcIn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val <span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toFixed'</span> <span class=\"token keyword\">in</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  val<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'split'</span> <span class=\"token keyword\">in</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  val<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  val<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  val<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// instance 연산자</span>\n<span class=\"token comment\">//  개인적으로 프로토타입을 만드는것을 선호하지 않기 때문에 패스</span></code></pre></div>\n</li>\n<li>타입 단언과 타입 가드 느낌. 그냥, 짧은 구문을 사용할 경우 타입 단언 긴 구문이 필요하다면 조건문을 활용하여 타입 가드 인 듯 하다..</li>\n</ul>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://heropy.blog/2020/01/27/typescript/\">HEROPY Teck 한눈에 보는 타입스크립트</a></li>\n</ul>","frontmatter":{"title":"TypeScript 타입 기본(Type)","date":"December 16, 2020"}}},"pageContext":{"slug":"/Study/TypeScript/TypeScript_01_types/","previous":{"fields":{"slug":"/Study/TypeScript/TypeScript_00_start/"},"frontmatter":{"title":"TypeScript 시작","category":"Study","draft":false,"tag":"TypeScript"}},"next":{"fields":{"slug":"/Study/TypeScript/TypeScript_02_interface/"},"frontmatter":{"title":"TypeScript interface","category":"Study","draft":false,"tag":"TypeScript"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}