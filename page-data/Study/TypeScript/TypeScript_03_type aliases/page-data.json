{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/TypeScript/TypeScript_03_type aliases/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"a8f2fcc3-447d-556a-a374-e1d6fd422b72","excerpt":"타입 별칭(Type Aliases) 키워드를 사용해 새로운 타입 조합을 만들 수 있다. 하나 이상의 타입을 조합해 별칭을 부여하며, 정확히는 조합한 각 타입들을 참조하는 별칭을 만드는 것이다. 일반적으로 둘 이상의 조합을 구성하기 위해 을 많이 사용한다. 인 타입들이 여러번 사용될 때, 특정한 변수에 담아서 사용하는 느낌? , 과 비슷한 듯 하다. 참조 HEROPY Teck 한눈에 보는 타입스크립트","html":"<h1 id=\"타입-별칭type-aliases\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EB%B3%84%EC%B9%ADtype-aliases\" aria-label=\"타입 별칭type aliases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 별칭(Type Aliases)</h1>\n<ul>\n<li><code class=\"language-text\">type</code>키워드를 사용해 새로운 타입 조합을 만들 수 있다.</li>\n<li>\n<p>하나 이상의 타입을 조합해 별칭을 부여하며, 정확히는 조합한 각 타입들을 참조하는 별칭을 만드는 것이다. 일반적으로 둘 이상의 조합을 구성하기 위해 <code class=\"language-text\">Union</code>을 많이 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type CustomType1 <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span>\ntype CustomType2 <span class=\"token operator\">=</span> string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> boolean<span class=\"token punctuation\">;</span>\ntype CustomType3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\nisValid <span class=\"token operator\">:</span> boolean\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">,</span> boolean<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> user1 <span class=\"token operator\">:</span> CustomType3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nname <span class=\"token operator\">:</span> <span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span>\nisValid <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> user2 <span class=\"token operator\">:</span> CustomType3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sangmin'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val <span class=\"token operator\">:</span> CustomType1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> CustomType2 <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">Union</code>인 타입들이 여러번 사용될 때, 특정한 변수에 담아서 사용하는 느낌? <code class=\"language-text\">const</code>, <code class=\"language-text\">let</code>과 비슷한 듯 하다.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://heropy.blog/2020/01/27/typescript/\">HEROPY Teck 한눈에 보는 타입스크립트</a></li>\n</ul>","frontmatter":{"title":"TypeScript Type Aliases","date":"December 21, 2020"}}},"pageContext":{"slug":"/Study/TypeScript/TypeScript_03_type aliases/","previous":{"fields":{"slug":"/Study/TypeScript/TypeScript_02_interface/"},"frontmatter":{"title":"TypeScript interface","category":"Study","draft":false,"tag":"TypeScript"}},"next":{"fields":{"slug":"/Study/TypeScript/TypeScript_04_generic/"},"frontmatter":{"title":"TypeScript Generic","category":"Study","draft":false,"tag":"TypeScript"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}