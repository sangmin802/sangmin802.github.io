{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/TypeScript/2020-12-25-TypeScript_practice01/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin Blog","author":"SangMin","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"f16acfb0-b9f5-5113-bd36-df22015bdf37","excerpt":"Loa-Hands 이전에 만들었던 앱을 타입스크립트로 바꿔보려한다. 중앙 상태를 관리하는  파트를 손보기로 했다. Actions…","html":"<h1 id=\"loa-hands\" style=\"position:relative;\"><a href=\"#loa-hands\" aria-label=\"loa hands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Loa-Hands</h1>\n<ul>\n<li>이전에 만들었던 앱을 타입스크립트로 바꿔보려한다.</li>\n<li>중앙 상태를 관리하는 <code class=\"language-text\">Redux Hook</code> 파트를 손보기로 했다.</li>\n</ul>\n<h2 id=\"actions\" style=\"position:relative;\"><a href=\"#actions\" aria-label=\"actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions</h2>\n<ul>\n<li>각각의 액션을 구성하는 부분이다.</li>\n<li>\n<p><code class=\"language-text\">ReturnType</code>유틸리티의 편리함을 크게 느꼈다.</p>\n<blockquote>\n<p>액션의 결과값들을 본래는 하나하나 인터페이스를 구성해야하지만, 해당 유틸리티를 사용하여 결과값 구조를 자동으로 만들어지게 했다.</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">as const</code>에 대해 좀더 잘 알게되었다</p>\n<blockquote>\n<p>이론상으로 할 때에는 무슨용도인지 잘 몰랐지만, <code class=\"language-text\">const 단언</code>을 통해 객체 내부에 들어가게 되더라도 대체됨을 막아하는 경우에 있어 꼭 필요함을 느끼게 됬다.</p>\n</blockquote>\n<div style=\"text-align : center\">\n<img src=\"https://github.com/sangmin802/sangmin802.github.io/blob/main/img/2020/2020-12-25/3.PNG?raw=true\" alt=\"2\">\n</div>\n</li>\n<li>\n<p><code class=\"language-text\">Lodash</code>나 <code class=\"language-text\">react-router</code>와 같이 자주사용되는 모듈은 타입스크립트에서 인터페이스를 만들어주는? 것 같다.</p>\n<blockquote>\n<p><code class=\"language-text\">history</code>의 경우, <code class=\"language-text\">@types</code> 디렉토리에 만들어져있는 인터페이스를 사용해보았다.  </p>\n</blockquote>\n<div style=\"text-align : center\">\n<img src=\"https://github.com/sangmin802/sangmin802.github.io/blob/main/img/2020/2020-12-25/1.PNG?raw=true\" alt=\"1\">\n</div>\n&gt; `dispatch`의 경우, `useDispatch`의 `ReturnType`을 사용해보았다.\n<div style=\"text-align : center\">\n<img src=\"https://github.com/sangmin802/sangmin802.github.io/blob/main/img/2020/2020-12-25/3.PNG?raw=true\" alt=\"3\">\n</div>\n</li>\n<li>\n<p>리듀서에서 변수로 받는 <code class=\"language-text\">action</code>의 타입을 유니온으로 하여 관리하였다.</p>\n<div style=\"text-align : center\">\n<img src=\"https://github.com/sangmin802/sangmin802.github.io/blob/main/img/2020/2020-12-25/4.PNG?raw=true\" alt=\"4\">\n</div>\n</li>\n</ul>\n<h2 id=\"reducer\" style=\"position:relative;\"><a href=\"#reducer\" aria-label=\"reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reducer</h2>\n<ul>\n<li>초기 상태의 인터페이스를 정의해주었다.</li>\n<li>\n<p>앞서, 유니온타입으로 각각의 액션들의 리턴 인터페이스들이 묶인것을 <code class=\"language-text\">import</code> 하여, 타입으로 사용하였다.</p>\n<div style=\"text-align : center\">\n<img src=\"https://github.com/sangmin802/sangmin802.github.io/blob/main/img/2020/2020-12-25/5.PNG?raw=true\" alt=\"5\">\n</div>\n</li>\n</ul>\n<h2 id=\"store\" style=\"position:relative;\"><a href=\"#store\" aria-label=\"store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store</h2>\n<ul>\n<li>\n<p>크게 다를것은 없지만, 리듀서의 타입을 사용해 앞으로 있을 <code class=\"language-text\">useSelector</code>에서 받아오는 <code class=\"language-text\">state</code>의 타입을 마련했다.</p>\n<div style=\"text-align : center\">\n<img src=\"https://github.com/sangmin802/sangmin802.github.io/blob/main/img/2020/2020-12-25/6.PNG?raw=true\" alt=\"6\">\n</div>\n</li>\n</ul>\n<h2 id=\"느낌\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%8C\" aria-label=\"느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낌</h2>\n<ul>\n<li>내가 예상할 수 있는 범위라면 하나하나 인터페이스나 타입을 만드는것이 아닌, 유틸리티등을 활용하여 동적으로 인터페이스를 구성하는것이 중요한 듯 하다.</li>\n</ul>","frontmatter":{"title":"TypeScript로 바꿔보자2","date":"December 25, 2020"}}},"pageContext":{"slug":"/Study/TypeScript/2020-12-25-TypeScript_practice01/","previous":{"fields":{"slug":"/Study/TypeScript/2020-12-24-TypeScript_practice00/"},"frontmatter":{"title":"TypeScript로 바꿔보자","category":"Study","draft":false}},"next":{"fields":{"slug":"/Study/TypeScript/2020-12-29-TypeScript_practice02/"},"frontmatter":{"title":"TypeScript로 바꿔보자3","category":"Study","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}