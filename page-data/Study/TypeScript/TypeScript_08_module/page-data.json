{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/TypeScript/TypeScript_08_module/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"a1e10f6d-b89c-5f3b-adc9-bee530b88875","excerpt":"모듈 기본적인 자바스크립트 모듈이 아닌, 타입스크립트만 가지고 있는 모듈개념을 추가적으로 알아보자. import & export 컴파일 옵션에서 를 통해, ES6모듈의 기본 import 방식도 사용할 수 있다. 모듈의 타입 선언(Ambient module declaration) 타입스크립트의 외부 자바스크립트 모듈 사용 모듈을 받고 import 할 때, 에러가 발생한다. 을 import…","html":"<h1 id=\"모듈\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88\" aria-label=\"모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈</h1>\n<ul>\n<li>기본적인 자바스크립트 모듈이 아닌, 타입스크립트만 가지고 있는 모듈개념을 추가적으로 알아보자.</li>\n</ul>\n<h2 id=\"import--export\" style=\"position:relative;\"><a href=\"#import--export\" aria-label=\"import  export permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>import &#x26; export</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// 타입 내보내기</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">:</span> string\n    age <span class=\"token operator\">:</span> number\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">export</span> type MyType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> string <span class=\"token operator\">|</span> <span class=\"token constant\">T</span>\n\n  <span class=\"token comment\">// 타입 들여오기</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>IUser<span class=\"token punctuation\">,</span> MyType<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span></code></pre></div>\n<ul>\n<li>\n<p>컴파일 옵션에서 <code class=\"language-text\">esModuleInterop : true</code>를 통해, ES6모듈의 기본 import 방식도 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// CommonJS/AMD/UMD</span>\n<span class=\"token keyword\">import</span> <span class=\"token constant\">ABC</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">ABC</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or `\"esModuleInterop\": true`</span>\n<span class=\"token keyword\">import</span> <span class=\"token constant\">ABC</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"모듈의-타입-선언ambient-module-declaration\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88%EC%9D%98-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8ambient-module-declaration\" aria-label=\"모듈의 타입 선언ambient module declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈의 타입 선언(Ambient module declaration)</h2>\n<ul>\n<li>타입스크립트의 외부 자바스크립트 모듈 사용</li>\n<li>\n<p>모듈을 받고 import 할 때, 에러가 발생한다.</p>\n<blockquote>\n<p><code class=\"language-text\">react-router-dom</code>을 import 하는단계에서 에러가 생기긴 함. <code class=\"language-text\">@types..</code>로 다시받거나, <code class=\"language-text\">declare...</code> 라는 해결방안이 뜬다.</p>\n</blockquote>\n</li>\n<li>모듈구현만하는 자바스크립트와 달리 타입선언도 동시에 하는 타입스크립트는 컴파일러가 이해할 수 있도록 모듈또한 타입선언이 필요하며, <code class=\"language-text\">.d.ts</code>라는 형식으로 파일을 만든다.</li>\n<li>\n<p>Lodash의 camelCase 메소드를 실행시키기</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error - TS2307: Cannot find module 'lodash'.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">camelCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">'import lodash module'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>lodash.d.ts파일 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">declare module <span class=\"token string\">'lodash'</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 인터페이스 생성</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILodash</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">camelCase</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">?</span> <span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 인터페이스 정보를 갖고있는 변수 생성</span>\n<span class=\"token keyword\">const</span> _ <span class=\"token operator\">:</span> ILodash<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 변수 내보내기</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">=</span> _<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>사용하고자하는 메소드의 타입정보를 갖고있는 인터페이스를 생성해야하는듯 함.</p>\n</blockquote>\n</li>\n<li>컴파일을 위한 참조태그 입력</li>\n<li>\n<p>위에서 만든 <code class=\"language-text\">lodash.d.ts</code>파일의 타입선언이 컴파일 과정에 포함될 수 있도록 <code class=\"language-text\">///</code>(삼중 슬래시 지시자)를 사용하는 참조태그와 path(경로) 속성을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 참조 태그(Triple-slash directive)</span>\n<span class=\"token comment\">/// &lt;reference path=\"./lodash.d.ts\" /></span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">camelCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">'import lodash module'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>참조태그를 통해 가져오는것은 모듈이 아니라 타입 선언이기 때문에 <code class=\"language-text\">import</code>를 사용하지 않는다.</li>\n<li><code class=\"language-text\">///</code>는 자바스크립트로 컴파일되면 단순 주석이 된다.</li>\n<li><code class=\"language-text\">path</code>속성은 가져올 타입선언의 상대경로를 지정한다.</li>\n<li><code class=\"language-text\">types</code>속성은 <code class=\"language-text\">/// &lt;reference types=&quot;lodash&quot; /&gt;</code>와 같이 모듈 이름을 지정하며, 이는 컴파일 옵션 <code class=\"language-text\">typeRoots</code>와 <code class=\"language-text\">Definitely Typed(@types)</code>를 기준으로 한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"definitely-typedtypes\" style=\"position:relative;\"><a href=\"#definitely-typedtypes\" aria-label=\"definitely typedtypes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Definitely Typed(@types)</h3>\n<ul>\n<li>위처럼 사용하게 되는 메소드를 별도로 타입지정을 해주면 대부분 문제가 해결된다.</li>\n<li>하지만, 여러개의 메소드를 사용해야하는데 그럴때마다 이러한 작업을 하는것은 너무 비효율적이다.</li>\n<li><code class=\"language-text\">npm install -D @types/모듈이름</code>를 사용해 설치하면 쉽게 해결된다.</li>\n</ul>\n<h3 id=\"typerootes와-types-옵션\" style=\"position:relative;\"><a href=\"#typerootes%EC%99%80-types-%EC%98%B5%EC%85%98\" aria-label=\"typerootes와 types 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeRootes와 types 옵션</h3>\n<ul>\n<li>\n<p>타입 선언을 찾을 수 없는 자바스크립트 모듈이거나, 가지고있는 타입선언을 수정해야하는경우 <code class=\"language-text\">lodash.d.ts</code>를 직접 만들어야 하는데, 이를 좀 더 쉽게 관리할 수 있는 컴파일옵션 <code class=\"language-text\">typeRoots</code>가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// types/lodash/index.d.ts</span>\ndeclare module <span class=\"token string\">'lodash'</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILodash</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">camelCase</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> _<span class=\"token operator\">:</span> ILodash<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">=</span> _<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token string\">\"typeRoots\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./types\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">typeRoots</code>의 기본값은 <code class=\"language-text\">[&quot;./node_modules/@types&quot;]</code> 이다.</li>\n<li><code class=\"language-text\">typeRoots</code>옵션은 지정된 경로에서 <code class=\"language-text\">index.d.ts</code>파일을 먼저 탐색한다.</li>\n<li>\n<p>컴파일러 옵션 types를 사용해 화이트리스트로 사용할 모듈 이름만 고를 수 있다.</p>\n<blockquote>\n<p><code class=\"language-text\">&quot;types&quot; : [&quot;lodash&quot;]</code> lodash타입만 허용.<br>\n<code class=\"language-text\">[]</code> 모두 허용 안함.<br>\n값이 없다면 모두 허용. - 기본값  </p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://heropy.blog/2020/01/27/typescript/\">HEROPY Teck 한눈에 보는 타입스크립트</a></li>\n</ul>","frontmatter":{"title":"TypeScript Module","date":"December 23, 2020"}}},"pageContext":{"slug":"/Study/TypeScript/TypeScript_08_module/","previous":{"fields":{"slug":"/Study/TypeScript/TypeScript_07_optional/"},"frontmatter":{"title":"TypeScript Optional","category":"Study","draft":false,"tag":"TypeScript"}},"next":{"fields":{"slug":"/Study/TypeScript/TypeScript_09_utility/"},"frontmatter":{"title":"TypeScript Utility","category":"Study","draft":false,"tag":"TypeScript"}}}},"staticQueryHashes":["3128451518","3665928227"]}