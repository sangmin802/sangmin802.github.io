{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Framework/next.js style error/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"5902a751-8361-5f9a-9e47-3b92301ba7b7","excerpt":"최근 를 다시 전반적으로 리팩토링하면서,  버전도 수정해주었다. 별 다른 문제는 없었지만, 유독  관련해서만 문제가 발생했는데, 다시한번 복기할 겸 정리해보려고 한다. styled component 에서 동적인 스타일을 좀 더 편리하게 사용하도록 도와주는 모듈이다. 이 컴포넌트로 생성된 클래스는 임의의 흡사 잡영어로된 클래스명을 갖게된다. 단순히 에서만 사용하게될 경우에는 크게 문제가 없었는데, 에서 사용하면서 어떠한 에러를 만나게 되었다. warning: prop  did not match…","html":"<p>최근 <code class=\"language-text\">Loa-Hands</code>를 다시 전반적으로 리팩토링하면서, <code class=\"language-text\">Next</code> 버전도 수정해주었다.</p>\n<p>별 다른 문제는 없었지만, 유독 <code class=\"language-text\">style</code> 관련해서만 문제가 발생했는데, 다시한번 복기할 겸 정리해보려고 한다.</p>\n<h2 id=\"styled-component\" style=\"position:relative;\"><a href=\"#styled-component\" aria-label=\"styled component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styled component</h2>\n<p><code class=\"language-text\">React</code>에서 동적인 스타일을 좀 더 편리하게 사용하도록 도와주는 모듈이다. 이 컴포넌트로 생성된 클래스는 임의의 흡사 잡영어로된 클래스명을 갖게된다.</p>\n<p>단순히 <code class=\"language-text\">React</code>에서만 사용하게될 경우에는 크게 문제가 없었는데, <code class=\"language-text\">Next</code>에서 사용하면서 어떠한 에러를 만나게 되었다.</p>\n<blockquote>\n<p>warning: prop <code class=\"language-text\">classname</code> did not match.</p>\n</blockquote>\n<p>서버사이드에서 한번, 그 이후 클라이언트사이드에서 한번 실행되는 <code class=\"language-text\">Next</code>의 특성상 이 <code class=\"language-text\">styled component</code>또한 두번 렌더링되게 되는데, 이 과정에서 서로 다른 잡영어의 클래스명을 받게 되면서 생기는 문제라고 한다.</p>\n<p>해결방법은 간단했다.</p>\n<p><code class=\"language-text\">.babelrc</code> 파일을 프로젝트의 루트에 추가하여 컴파일할 때 참고할 플러그인을 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// next에서 바벨설정을 할 때 필수적으로 추가해줘야한다 함.</span>\n  <span class=\"token string\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"next/babel\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"babel-plugin-styled-components\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token string\">\"fileName\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"displayName\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pure\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">babel-plugin-styled-components</code> 플러그인을 사용하면 된다.</p>\n<p>해당 플러그인의 기본 목적으로는 <code class=\"language-text\">styled component</code>를 사용할 때 더 가시성있는 클래스명을 갖게 하여, 추후 디버깅을 할 때 유리할 수 있도록 해준다 한다.</p>\n<p>또한 주목할 점은</p>\n<blockquote>\n<p><code class=\"language-text\">consistently hashed component classNames between environments (a must for server-side rendering)</code></p>\n</blockquote>\n<p>서버측 렌더링의 과정에서 일관돤 클래스명을 부여해준다는것 같음.</p>\n<h2 id=\"next-css\" style=\"position:relative;\"><a href=\"#next-css\" aria-label=\"next css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next-css</h2>\n<p>원래는 별도의 모듈이였지만, <code class=\"language-text\">next</code>에서 수용하여 직접 관리하는것 같다.</p>\n<p>해당 모듈을 사용하면, 기존의 <code class=\"language-text\">React</code>처럼 컴포넌트별로 각각의 <code class=\"language-text\">css</code> 모듈들을 <code class=\"language-text\">import</code> 하여 사용할 수 있는데, 한가지 이상한점이 있었다.</p>\n<p>다른때에는 잘 되지만, 유일하게 첫 라우트 이동을 했을 때에는 <code class=\"language-text\">css</code>가 적용되지 않았다.</p>\n<blockquote>\n<p>그런데 이 또한, 새로고침하면 정상 작동됨..</p>\n</blockquote>\n<p>구글링중 한 글을 보았는데,</p>\n<blockquote>\n<p>Yes, on route change issue still present. Long time i used next6 with old next-css and regulary gets not loaded styles on route change. After refresh page it works as expected even on route change.</p>\n</blockquote>\n<blockquote>\n<p>On 7 version it reproduced on every page change (not sometimes as next6).</p>\n</blockquote>\n<blockquote>\n<p>But if you 1) load first page 2) transition to next page (gets not loaded styles) 3) refresh page - then you take working styles on both pages.</p>\n</blockquote>\n<blockquote>\n<p>Looks like styles compilation is long process and delayed and page do not have time for take it and apply. After refresh page styles already precompiled and applied immediatelly.</p>\n</blockquote>\n<p>대충 계속 존재해왔던 버그이고, 새로고침 했을 때에는 잘 적용되기 때문에, 라우트 이동하자마자 한번 새로고침해주는 방법이 있다.</p>\n<p>더 중요한건, 개발 모드에서만 이렇고 배포 모드에서는 문제 없다고 함!</p>\n<p>실제로 배포를 해보니 정상작동 되더라..</p>\n<p>해프닝</p>","frontmatter":{"title":"Next.js style error","date":"March 19, 2021"}}},"pageContext":{"slug":"/Study/Framework/next.js style error/","previous":{"fields":{"slug":"/Study/Think/intersectionObserver/"},"frontmatter":{"title":"IntersectionObserver","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/ip&&dns/"},"frontmatter":{"title":"DNS","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}