{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Framework/next.js build export/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"b652a97f-9902-5c3f-a7e8-165556f9d4cc","excerpt":"로 배포를 할 때, 두가지 과정이 존재한다.   Next build 나 라는 명령어를 실행시키기 위한 사전작업이기도 하며, 해당 명령어는 폴더를 생성한다. 또한 의 기본적인  페이지 생성 방식이다. Automatic Static Optimization , 등의 메소드를 특정 페이지에서 생성하고 사용했을 때, 서버사이드렌더링을 하여 먼저 정적생성을 하도록 한다. Loa-hands…","html":"<p><code class=\"language-text\">Next</code>로 배포를 할 때, 두가지 과정이 존재한다. <code class=\"language-text\">Next build</code> <code class=\"language-text\">Next export</code></p>\n<h2 id=\"next-build\" style=\"position:relative;\"><a href=\"#next-build\" aria-label=\"next build permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next build</h2>\n<p><code class=\"language-text\">next start</code>나 <code class=\"language-text\">next export</code>라는 명령어를 실행시키기 위한 사전작업이기도 하며, 해당 명령어는 <code class=\"language-text\">.next</code>폴더를 생성한다.</p>\n<p>또한 <code class=\"language-text\">Next.js</code>의 기본적인 <code class=\"language-text\">SSR</code> 페이지 생성 방식이다.</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/advanced-features/automatic-static-optimization\">Automatic Static Optimization</a></li>\n</ul>\n<p><code class=\"language-text\">getStaticProps</code>, <code class=\"language-text\">getServerSideProps</code>등의 메소드를 특정 페이지에서 생성하고 사용했을 때, 서버사이드렌더링을 하여 먼저 정적생성을 하도록 한다.</p>\n<blockquote>\n<p>Loa-hands를 만들 때 사용했던 방법</p>\n</blockquote>\n<p><code class=\"language-text\">.next/server/pages</code>루트로 이동해보면, 정적생성이 되어있는 파일들을 확인해 볼 수 있다.</p>\n<p><code class=\"language-text\">Next export</code>와 다르게, 완전한 정적인 파일을 만든것이 아니라, <code class=\"language-text\">node.js</code>서버 자체는 유지시켜놓은 상태기이 때문에, 커스텀 서버를 만들어서 이용할 수 있다.</p>\n<blockquote>\n<p>물론 위의 방법은 <code class=\"language-text\">Vercel</code>와 같은 <code class=\"language-text\">ServerLess</code>플랫폼을 통한 배포는 불가능하다</p>\n</blockquote>\n<p>만약, 특정 라우트를 서버에 연결되는 API? 작업을 수행하고자 할 때에도 배포시 별도의 서버도 함께 띄워져있는 상태라서 이와같은 방법을 추천하며 해당 라우트는 <code class=\"language-text\">Next.js</code>의 기본 라우팅 방식에서 제외된다.</p>\n<blockquote>\n<p>로그인 환경 구성이나, 서버에서 API를 불러오고자 할 때 사용할 듯 하다.</p>\n</blockquote>\n<p>아래와 같은 HTTP 요청이 커스텀 서버로 갔을 때,</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/test_post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>testText<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">test_post</code>의 요청에 한해서는 <code class=\"language-text\">Next.js</code>가 아닌 커스텀 서버의 처리를 하도록 함.</p>\n<p>그외의 나머지들은 <code class=\"language-text\">*</code>은 <code class=\"language-text\">Next.js</code>의 라우팅 방식을 따르도록 함.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> dev <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dev <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// next 메소드의 인자로 받을수 있는 객체의 속성들은</span>\n<span class=\"token comment\">//  dev : 개발모드에서 Next.js를 실행할지 여부. 기본값은 false</span>\n<span class=\"token comment\">//  dir : Next.js 프로젝트의 위치. 기본값은 '.'</span>\n<span class=\"token comment\">//  quiet : 서버정보가 포함된 오류메시지 출력 여부. 기본값은 false</span>\n<span class=\"token comment\">//  conf : next.config.js와 동일한 객체. 기본값은 '{}'</span>\n\n<span class=\"token keyword\">const</span> handle <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Next.js의 기본 라우팅방식을 따르도록 함</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> extended<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/test_post'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>testText\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 위에 나열된 url이 아니면 모두 Next.js의 기본 라우팅을 따르도록 함</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening to 3000'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><a href=\"https://nextjs.org/docs/advanced-features/custom-server\">Next.js custom Server - express</a></li>\n</ul>\n<p>기본적으로 <code class=\"language-text\">Node.js</code>서버를 기반으로 작동되기 때문에 <code class=\"language-text\">Next.js</code>에서 제공하는 여러 <code class=\"language-text\">Data-fetching API</code>들을 사용할 수 있다</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/basic-features/data-fetching\">Next.js Data-fetching API</a></li>\n</ul>\n<h2 id=\"next-export\" style=\"position:relative;\"><a href=\"#next-export\" aria-label=\"next export permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next export</h2>\n<ul>\n<li><a href=\"https://nextjs.org/docs/advanced-features/static-html-export\">Static HTML Export</a></li>\n</ul>\n<p><code class=\"language-text\">next export</code>는 모든 페이지들을 정적인 <code class=\"language-text\">HTML files</code>들로 만들어서, 어떠한 호스트에서도 해당 서비스를 제공할 수 있으며, 별도의 <code class=\"language-text\">Node.js</code>서버또한 필요하지 않는다.</p>\n<p>이러한 앱은 <code class=\"language-text\">dynamic routes</code>, <code class=\"language-text\">prefetching</code>, <code class=\"language-text\">preloading</code> 그리고 <code class=\"language-text\">dynamic imports</code>와 같은 <code class=\"language-text\">Next.js</code>의 대부분의 기능을 꾸준히 지원한다.</p>\n<p><code class=\"language-text\">create-react-app</code>과 매우 유사하지만, <code class=\"language-text\">pre-rendering</code>을 위해 전용 메소드를 사용하여 여전히 <code class=\"language-text\">build-time</code>에 정적생성을 할 수 있다는 차이점이 있음.</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/api-reference/next.config.js/exportPathMap\">exportPathMap</a></li>\n</ul>\n<p>해당 기능은, 페이지들이 서버사이드에서 추가적인 데이터 요청을 할 필요가 없는 경우에 아주 유용하다. 물론, 클라이언트사이드에서 데이터 요청을 하는것은 상관없다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/61724368/what-is-the-difference-between-next-export-and-next-build-in-next-js\">stackoverflow next build vs next export</a></li>\n</ul>","frontmatter":{"title":"Next.js build, export","date":"February 15, 2021"}}},"pageContext":{"slug":"/Study/Framework/next.js build export/","previous":{"fields":{"slug":"/Study/Think/mvc&&flux/"},"frontmatter":{"title":"MVC && Flux","category":"Study","draft":false,"tag":"Think"}},"next":{"fields":{"slug":"/Study/Think/loa-hands2/"},"frontmatter":{"title":"loa-hands refactoring","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}