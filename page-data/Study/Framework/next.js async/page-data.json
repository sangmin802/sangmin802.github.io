{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Framework/next.js async/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"153bcad5-cde9-5838-999d-cfbf8947f81e","excerpt":"…","html":"<p>클라이언트사이드에서 <code class=\"language-text\">React.js</code>를 사용하여 비동기작업을 좀 더 효율적으로 작성해보았었다. <code class=\"language-text\">React-Query</code>를 사용하여, 해당 컴포넌트는 데이터를 받아왔을 때의 상태만을 고려하여 구성할 수 있었고</p>\n<p><code class=\"language-text\">Suspense</code>와 <code class=\"language-text\">ErrorBoundary</code>를 사용하여 데이터 패칭, 혹은 에러상황에서의 에러 핸들링을 컴포넌트 외부에서 처리할 수 있었다.</p>\n<p>이번에는 렌더링 시 서버사이드에서 한번 클라이언트사이드에서 한번 실행되는 <code class=\"language-text\">SSR</code> 기반인 <code class=\"language-text\">Next.js</code>에도 한번 사용해보려고 한다.</p>\n<h2 id=\"이전에-발생했던-문제\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%84%EC%97%90-%EB%B0%9C%EC%83%9D%ED%96%88%EB%8D%98-%EB%AC%B8%EC%A0%9C\" aria-label=\"이전에 발생했던 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이전에 발생했던 문제</h2>\n<p>이전에도 <code class=\"language-text\">React.js</code>로 만들었던 코드를 <code class=\"language-text\">Next.js</code>에서 대부분 가져와서 <code class=\"language-text\">Next.js</code>방식으로 일부분만 수정해서 사용했었다. 그 때에도 발생했던 문제가 있었다.</p>\n<p><strong><code class=\"language-text\">new DOMParser</code>는 서버사이드에서 실행될 수 없는 점.</strong></p>\n<p>따라서 서버사이드에서 렌더링을 할 때에는 <code class=\"language-text\">jsdom</code>을 사용하고, 클라이언트사이드에서 렌더링을 할 때에는 <code class=\"language-text\">new DOMParser</code>를 사용하도록 하였다.</p>\n<blockquote>\n<p>물론, <code class=\"language-text\">next.config</code>파일을 통해 서버상태가 아니라면 <code class=\"language-text\">jsdom</code>과 같이 서버전용 모듈을 <code class=\"language-text\">null</code> 상태로 바꿔주기도 했었다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">withCSS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">webpack</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> isServer <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... other codes</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isServer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      config<span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        dgram<span class=\"token operator\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n        fs<span class=\"token operator\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n        net<span class=\"token operator\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n        tls<span class=\"token operator\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n        child_process<span class=\"token operator\">:</span> <span class=\"token string\">'empty'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ... other codes</span>\n    <span class=\"token keyword\">return</span> config\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이번에도 <code class=\"language-text\">Suspense</code>와 <code class=\"language-text\">ErrorBoundary</code>를 가져오면서 비슷한 문제가 생겼었다.</p>\n<h2 id=\"일단-비동기작업을-usequery로-변경\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%8B%A8-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%9E%91%EC%97%85%EC%9D%84-usequery%EB%A1%9C-%EB%B3%80%EA%B2%BD\" aria-label=\"일단 비동기작업을 usequery로 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일단 비동기작업을 useQuery로 변경</h2>\n<p>일단 <code class=\"language-text\">Redux</code>, <code class=\"language-text\">Redux-Saga</code>기반으로 돌아가던 비동기작업을 모두 <code class=\"language-text\">useQuery</code>로 변경해주기로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  defaultOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    queries<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      retry<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      suspense<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      useErrorBoundary<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      cacheTime<span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n      staleTime<span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> App<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>AppProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ThemeProvider theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">THEME</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>GlobalStyle <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>QueryClientProvider client<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>queryClient<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ReactQueryDevtools initialIsOpen<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>pageProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>QueryClientProvider<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p><code class=\"language-text\">QueryClientProvider</code>로 <code class=\"language-text\">query</code>들이 실행될 백그라운드의 를 생성하고, 기본적인 옵션들을 설정한 다음 할당해준다.</p>\n<p>이러한 과정은 앱의 최초단계에 실행되어야 하므로 <code class=\"language-text\">pages/_app</code>에서 설정해주었다.</p>\n<h2 id=\"query를-사용하여-initialdata-생성\" style=\"position:relative;\"><a href=\"#query%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-initialdata-%EC%83%9D%EC%84%B1\" aria-label=\"query를 사용하여 initialdata 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>query를 사용하여 initialData 생성</h2>\n<p><code class=\"language-text\">SSR</code>특성상 서버상에서 비동기 작업을 통해 사용해야할 데이터를 미리 받고, 사용자에게 넘겨줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> eventData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getEventData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> calendarData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getCalendarData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> eventData<span class=\"token punctuation\">,</span> calendarData <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다만, <code class=\"language-text\">getStaticProps</code>를 통해 생성된 <code class=\"language-text\">data</code>는 문자열로 읽혀야 하기 때문에, 문자열로 변환을 해주고, <code class=\"language-text\">useQuery</code>에서 다시 <code class=\"language-text\">parse</code>하여 사용해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> eventData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetchEventData'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getEventData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    initialData<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>initialData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    refetchOnWindowFocus<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> eventData\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"문제의-시작-suspense\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%8B%9C%EC%9E%91-suspense\" aria-label=\"문제의 시작 suspense permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제의 시작 Suspense</h2>\n<p><code class=\"language-text\">useQuery</code>로 변경하고, 실행을 할 때에는 문제없겠지라는 생각을 했었다.</p>\n<p>하지만 그렇지 않았다.</p>\n<p><strong>Suspense는 아직 ReactDOMServer에서 지원되지 않습니다.</strong></p>\n<p><code class=\"language-text\">Suspense</code>는 비교적 최신의 기술이고, 아직 <code class=\"language-text\">React</code>, <code class=\"language-text\">React-Query</code> 두가지 공문에서도 불완전한 부분이 있다고 설명되어있었다.</p>\n<p>그래서, <code class=\"language-text\">Next.js(SSR)</code>에서 처음 서버사이드에서도 한번 렌더링을 진행할 때, <code class=\"language-text\">Suspense</code>라는 모듈을 이해하지 못하는 것이였다.</p>\n<p>따라서 해당 <code class=\"language-text\">Suspense</code> 모듈이 하는 작업을 커스텀 방식으로 만들어 줄 필요가 있었다. 한참 고민을 하던 중, <code class=\"language-text\">jbee</code>님의 블로그에서 좋은 방법을 찾을 수 있었다.</p>\n<p>서버사이드에서 <code class=\"language-text\">Suspense</code>가 작동되지 않는다면 <code class=\"language-text\">Suspense</code>를 서버사이드에서 렌더링 할 때에는 거치지 않도록 하면 되는것이였다.</p>\n<h3 id=\"customsuspense\" style=\"position:relative;\"><a href=\"#customsuspense\" aria-label=\"customsuspense permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CustomSuspense</h3>\n<p>기존에 사용하고 있던 <code class=\"language-text\">AsyncBoundary</code>에서 <code class=\"language-text\">Suspense</code>를 내가 만든 <code class=\"language-text\">CustomSuspense</code>로 변경을 해줄 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PropsWithChildren<span class=\"token punctuation\">,</span> ReactElement<span class=\"token punctuation\">,</span> useCallback <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQueryErrorResetBoundary <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ErrorBoundary<span class=\"token punctuation\">,</span> CustomSuspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'components/'</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAsyncBoundary</span> <span class=\"token punctuation\">{</span>\n  suspenseFallback<span class=\"token operator\">:</span> ReactElement<span class=\"token punctuation\">;</span>\n  errorFallback<span class=\"token operator\">:</span> ReactElement<span class=\"token punctuation\">;</span>\n  children<span class=\"token operator\">:</span> ReactElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AsyncBoundary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  suspenseFallback<span class=\"token punctuation\">,</span>\n  errorFallback<span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PropsWithChildren<span class=\"token operator\">&lt;</span>IAsyncBoundary<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> reset <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQueryErrorResetBoundary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> resetHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>reset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ErrorBoundary resetQuery<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>resetHandler<span class=\"token punctuation\">}</span> errorFallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorFallback<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>CustomSuspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>suspenseFallback<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>CustomSuspense<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ErrorBoundary<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> AsyncBoundary</code></pre></div>\n<p>물론 해당 <code class=\"language-text\">CustomSuspense</code>에서는 서버인지 클라이언트인지 구분을 하고, 사로 다른 방식으로 렌더링을 해줘야 한다.</p>\n<p>평소 <code class=\"language-text\">Next.js</code>에서 클라이언트사이드인지 서버사이드인지를 구분할 때, <code class=\"language-text\">typeof window</code>를 자주 사용했었는데, 이번에 새로운 방법또한 배우게 되었다.</p>\n<blockquote>\n<p>항상 감사합니다 jbee님</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Suspense<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">,</span> ComponentProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>mounted<span class=\"token punctuation\">,</span> setMounted<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setMounted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> mounted\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">CustomSuspense</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> ComponentProps<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Suspense<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Suspense <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>fallback<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>서버사이드에서는 <code class=\"language-text\">React</code>의 <code class=\"language-text\">LifeCycle</code>들이 작동되지 않는다고 한다.</p>\n<p>조금 있다가 확인해 볼 <code class=\"language-text\">ErrorBoundary</code>에서도 서버사이드에서는 <code class=\"language-text\">getDerivedStateFromError</code> 생명주기가 작동되지 않는것을 알 수 있었다.</p>\n<p>생각해보면 간단한데, <code class=\"language-text\">useEffect (componentDidMount etc...)</code>등의 클라이언트 사이드의 생명주기들은 렌더링 이후에 실행되기 때문이다. 서버사이드에서도 먼저 렌더링을 하지 않나 라는 생각을 할 수 있지만, 여기서의 렌더링 이후는</p>\n<blockquote>\n<p>“after we’re done converting the React app into a HTML string”</p>\n</blockquote>\n<p><code class=\"language-text\">React app</code>을 <code class=\"language-text\">HTML</code>로 변환을 한 이후 라고 한다.</p>\n<p>따라서, <code class=\"language-text\">useEffect</code>가 실행되기 전이라 <code class=\"language-text\">isMoundted === false</code> 인 상태에서는 그냥, <code class=\"language-text\">loadingFallback</code>을 렌더링 하게 되고,</p>\n<p>이후에 <code class=\"language-text\">useEffect</code>가 실행이 된다면, 클라이언트 사이드에서 <code class=\"language-text\">HTML</code>로 변환이 완료된 상태라는것을 의미하고, 그 때 <code class=\"language-text\">React</code>의 <code class=\"language-text\">Suspense</code>모듈이 사용되는 것이다.</p>\n<h3 id=\"errorboundary\" style=\"position:relative;\"><a href=\"#errorboundary\" aria-label=\"errorboundary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ErrorBoundary</h3>\n<p>위에서 서버사이드 렌더링 때에는 생명주기가 호출되지 않는다는점으로 발생하게된 하나의 문제가 더 있다.</p>\n<p><code class=\"language-text\">ErrorBoundary</code>에서 하위 컴포넌트의 생명주기 중, 발생하게되는 에러를 감지하고 호출되는 <code class=\"language-text\">getDerivedStateFromError</code>또한 실행되지 않는다.</p>\n<p>특히 해당 문제는, <code class=\"language-text\">getStaticProps</code>와 같이 <code class=\"language-text\">prerendering</code>을 진행하는 과정에서 비동기 작업중 발생하는 에러에 있어서 설정해놓은 에러핸들링의 과정을 거치지 않고, 그냥 서버상에서 <code class=\"language-text\">Error</code>를 띄워버린다.</p>\n<p>즉, 이전과는 다른 방식으로 에러를 처리해줄 필요가 있었다.</p>\n<p><code class=\"language-text\">root</code> 라우트에서는 <code class=\"language-text\">eventData</code>와 <code class=\"language-text\">calendarData</code>를 서버상에서 미리 데이터를 패칭하고, 초기 데이터를 클라이언트에서 컴포넌트를 구현할 때 전달을 해줘서 클라이언트사이드 상에서는 데이터 패칭이 없이 바로 형성되도록 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> eventData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getEventData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> calendarData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getCalendarData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> eventData<span class=\"token punctuation\">,</span> calendarData <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만, 여기서의 비동기 작업에서 발생하는 에러에 있어서는 기존의 설정갖고는 처리를 할 수가 없었다.</p>\n<p>그래서 생각한 것이, 위의 <code class=\"language-text\">Suspense</code>처럼 에러가 발생한 이후의 후속조치와 같은 작업들을 모두 클라이언트상으로 넘겨버리는 것이다.</p>\n<blockquote>\n<p>마치 그냥 <code class=\"language-text\">React.js</code>를 사용하는 것 처럼</p>\n</blockquote>\n<p><code class=\"language-text\">getStaticProps</code>와 같은 메소드들은 <code class=\"language-text\">return</code>하는 값들이 필수적인데, 이러한 점을 활용하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> eventData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getEventData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> calendarData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getCalendarData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> eventData<span class=\"token punctuation\">,</span> calendarData <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> eventData<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> calendarData<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저 해당 메소드에서 에러가 발생하게 되면 초기 데이터를 <code class=\"language-text\">null</code>로 하여 반환하였다.</p>\n<p>그리고, <code class=\"language-text\">useQuery</code>에서 이 서버에서 미리 받아온 데이터가 <code class=\"language-text\">null</code>이라면, <code class=\"language-text\">initialData</code>속성을 제거해서 <code class=\"language-text\">option</code>을 할당해주고, 데이터가 존재하다면 <code class=\"language-text\">initialData</code>속성을 추가해서 할당해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getEventData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'api/api'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-query'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> option <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> refetchOnWindowFocus<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>root<span class=\"token punctuation\">,</span> initialData<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>initialData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> root\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>initialData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> eventData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'fetchEventData'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getEventData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    option\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> eventData\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 서버에서 <code class=\"language-text\">null</code>의 데이터를 받아와 <code class=\"language-text\">initialData</code>가 없이 렌더링 된다면 자연스럽게 해당 데이터를 받아오는 과정을 수행을 할 것이고, 그렇게된다면 이전에 설정해 놓은 클라이언트상의 <code class=\"language-text\">ErrorBoundary</code>가 정상적으로 실행되는 것이다.</p>\n<p><code class=\"language-text\">null</code>이 아닌 정상적인 데이터를 받아오게된다면, <code class=\"language-text\">ErrorBoundary</code>가 실행될 필요가 없으니 상관 없다.</p>\n<p>이 방법이 정답이라고 생각하진 않는다. 다만, 현재 나의 생각으로 최대한 원리들을 파악하며 해결해본 방법이다.</p>\n<p>이번에 <code class=\"language-text\">Next.js</code>로 해당 프로젝트를 업데이트 하면서 여러가지 새로운 시도를 해보았고, 몰랐던 점들도 많이 알게되어 좋은 경험이였던것 같다.</p>\n<p>참고로, 위의 예제에서 <code class=\"language-text\">Event</code>와 <code class=\"language-text\">Calendar</code> 데이터들은 매일매일 혹은 매주 수요일마다 최신화되어야 하는 데이터라 <code class=\"language-text\">getServerSideProps</code>가 더 적합한 생명주기이지만, 성능상 좋지않은 편이기 때문에, 배포에는 해당 생명주기는 제거하였다.</p>","frontmatter":{"title":"⚛ Next.js(SSR)에서의 Suspense, ErrorBoundary","date":"July 20, 2021"}}},"pageContext":{"slug":"/Study/Framework/next.js async/","previous":{"fields":{"slug":"/Study/TestCode/asnycBoundary test/"},"frontmatter":{"title":"⚛ AsyncBoundary의 상태별 테스트","category":"Study","draft":false,"tag":"TestCode"}},"next":{"fields":{"slug":"/Study/Think/delegation/"},"frontmatter":{"title":"⌛ Event Delegation을 통한 효율적인 이벤트 할당","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}