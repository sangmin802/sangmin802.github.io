{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/Android/kotlinCoroutine_04_suspending/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"b1dff410-c98f-5b61-bcf9-a90d0c925c40","excerpt":"Coroutine Suspending 예제 예제1 서로 의존성있는 메소드일 때 코루틴 내부에서 중단메소드를 활용하면 꿈의 코드처럼 순차적으로 작동된다. 예제2 예제 1과 동일하게 스레드 내부에서 중단함수가 있기 때문에 메인스레드를 읽는것은 중단하긴 하지만, 서로 연관되어있지 않기 때문에 각기 동시에 실행시키고 결과값만 기다림 launch 빌더는 job 클래스를 반환하지만, async는 job에게 상속받는 deferred클래스를 반환받음음 따라서 cancel, join 모두 사용가능하지만 await…","html":"<h2 id=\"coroutine-suspending-예제\" style=\"position:relative;\"><a href=\"#coroutine-suspending-%EC%98%88%EC%A0%9C\" aria-label=\"coroutine suspending 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coroutine Suspending 예제</h2>\n<h3 id=\"예제1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C1\" aria-label=\"예제1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제1</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">fun <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> runBlocking <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//    예제1</span>\n<span class=\"token comment\">//      서로 의존성있는 메소드일 때</span>\n<span class=\"token comment\">//      코루틴 내부에서 중단메소드를 활용하면 꿈의 코드처럼 순차적으로 작동된다.</span>\n    <span class=\"token keyword\">var</span> one <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> two <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    val time <span class=\"token operator\">=</span> measureTimeMillis <span class=\"token punctuation\">{</span>\n        one <span class=\"token operator\">=</span> <span class=\"token function\">doSomethingUsefulOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 첫번째 중단</span>\n        two <span class=\"token operator\">=</span> <span class=\"token function\">doSomethingUsefulTwo</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 두번째 중단</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The answer is ${one+two}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Completed in $time ms\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nsuspend fun <span class=\"token function\">doSomethingUsefulTwo</span><span class=\"token punctuation\">(</span>_one <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> _one<span class=\"token operator\">+</span><span class=\"token number\">13</span>\n<span class=\"token punctuation\">}</span>\n\nsuspend fun <span class=\"token function\">doSomethingUsefulOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">29</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The answer is 71</span>\n<span class=\"token comment\">// Completed in 2010 ms</span></code></pre></div>\n<ul>\n<li>서로 의존성있는 메소드일 때 코루틴 내부에서 중단메소드를 활용하면 꿈의 코드처럼 순차적으로 작동된다.</li>\n</ul>\n<h3 id=\"예제2\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C2\" aria-label=\"예제2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제2</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">fun <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> runBlocking <span class=\"token punctuation\">{</span>\n   val time <span class=\"token operator\">=</span> measureTimeMillis <span class=\"token punctuation\">{</span>\n        val one <span class=\"token operator\">=</span> async <span class=\"token punctuation\">{</span> <span class=\"token function\">doSomethingUsefulOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 첫번째 중단</span>\n        val two <span class=\"token operator\">=</span> async <span class=\"token punctuation\">{</span> <span class=\"token function\">doSomethingUsefulTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 두번째 중단</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The answer is ${one.await()+two.await()}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Completed in $time ms\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nsuspend fun <span class=\"token function\">doSomethingUsefulTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">13</span>\n<span class=\"token punctuation\">}</span>\n\nsuspend fun <span class=\"token function\">doSomethingUsefulOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">29</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The answer is 42</span>\n<span class=\"token comment\">// Completed in 1026 ms</span></code></pre></div>\n<ul>\n<li>예제 1과 동일하게 스레드 내부에서 중단함수가 있기 때문에 메인스레드를 읽는것은 중단하긴 하지만, 서로 연관되어있지 않기 때문에 각기 동시에 실행시키고 결과값만 기다림</li>\n<li>launch 빌더는 job 클래스를 반환하지만, async는 job에게 상속받는 deferred클래스를 반환받음음 따라서 cancel, join 모두 사용가능하지만 await이라는게 생김</li>\n</ul>\n<h3 id=\"예제3\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C3\" aria-label=\"예제3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제3</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">fun <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> runBlocking <span class=\"token punctuation\">{</span>\n    val time <span class=\"token operator\">=</span> measureTimeMillis <span class=\"token punctuation\">{</span>\n        val one <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">=</span> CoroutineStart<span class=\"token punctuation\">.</span><span class=\"token constant\">LAZY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">doSomethingUsefulOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 첫번째 중단</span>\n        val two <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">=</span> CoroutineStart<span class=\"token punctuation\">.</span><span class=\"token constant\">LAZY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">doSomethingUsefulTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 두번째 중단</span>\n        one<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        two<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The answer is ${one.await()+two.await()}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Completed in $time ms\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nsuspend fun <span class=\"token function\">doSomethingUsefulTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">13</span>\n<span class=\"token punctuation\">}</span>\n\nsuspend fun <span class=\"token function\">doSomethingUsefulOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">29</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The answer is 42</span>\n<span class=\"token comment\">// Completed in 1017 ms</span></code></pre></div>\n<ul>\n<li>기존 async만 있었을 경우, async 구문이 읽히자마자 해당 코루틴이 실행되지만, 아래와같이 변수를 보내주게되면 바로실행시키지않고 이후 start나 await 메소드로 호출할때 실행된다.</li>\n</ul>\n<h3 id=\"예제4\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C4\" aria-label=\"예제4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제4</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">fun <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> runBlocking<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">failedConcurrentSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">:</span> ArithmeticException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Computation failed with ArithmetickException\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nsuspend fun <span class=\"token function\">failedConcurrentSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> coroutineScope <span class=\"token punctuation\">{</span>\n   val one <span class=\"token operator\">=</span> async <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>Long<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span>\n           <span class=\"token number\">42</span>\n       <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First child was cancelled\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   val two <span class=\"token operator\">=</span> async<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Second child throws an exception\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token function\">ArithmeticException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n   one<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> two<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Second child throws an exception</span>\n<span class=\"token comment\">// First child was cancelled</span>\n<span class=\"token comment\">// Computation failed with ArithmetickException</span></code></pre></div>\n<ul>\n<li>two에서 exception이 발생하게되어 일정시간뒤 실행되는 one또한 종료됨 그리고 최종 catch에서도 catch로 exception이 발생되었다 나옴</li>\n</ul>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p><a href=\"https://www.youtube.com/watch?v=0viswXto028&#x26;list=PLbJr8hAHHCP5N6Lsot8SAnC28SoxwAU5A&#x26;index=4\">새차원 코틀린 코루틴</a></p>","frontmatter":{"title":"Kotlin Coroutine Suspending","date":"September 29, 2020"}}},"pageContext":{"slug":"/Study/Android/kotlinCoroutine_04_suspending/","previous":{"fields":{"slug":"/Study/Android/kotlinCoroutine_03_cancellation&timeouts/"},"frontmatter":{"title":"Kotlin Coroutine Cancellation & Timeouts","category":"Study","draft":false,"tag":"Android"}},"next":{"fields":{"slug":"/Study/Android/lostarkHands/"},"frontmatter":{"title":"Kotlin LostArk Hands","category":"Study","draft":false,"tag":"Android"}}}},"staticQueryHashes":["3128451518","3665928227","479399088"]}