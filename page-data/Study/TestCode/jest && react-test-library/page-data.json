{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/TestCode/jest && react-test-library/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"disqusShortName":"","utterances":"sangmin802/sangmin802.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"5e69bfa6-46d9-5628-b89a-dcddd60952ca","excerpt":"🍠 react-testing-library, Jest  컴포넌트의 구성요소까지 DOM으로 만들어서 테스트를 할 수 있게 도와주는 라이브러리 와 별도의 여러 라이브러리를 받아올 필요 없이 하나로 합쳐진 를 통해 테스트 코드 작성\n즉, 서로가 다른 역할을 갖고 있고 도와주는 형태\n물론 만 갖고 테스트를 위한 ,  같은 라이브러리를 수동으로 받아서 작업할 수 있다고 함. 하지만  만 받으면 모든게 됨 은 두가지가 설치된 상태로 넘어옴 🥜 Jest…","html":"<h2 id=\"-react-testing-library-jest\" style=\"position:relative;\"><a href=\"#-react-testing-library-jest\" aria-label=\" react testing library jest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍠 react-testing-library, Jest</h2>\n<p><code class=\"language-text\">React</code> 컴포넌트의 구성요소까지 DOM으로 만들어서 테스트를 할 수 있게 도와주는 라이브러리 <code class=\"language-text\">react-testing-library</code>와 별도의 여러 라이브러리를 받아올 필요 없이 하나로 합쳐진 <code class=\"language-text\">Jest</code>를 통해 테스트 코드 작성\n즉, 서로가 다른 역할을 갖고 있고 도와주는 형태\n물론 <code class=\"language-text\">react-testing-library</code>만 갖고 테스트를 위한 <code class=\"language-text\">Mocha</code>, <code class=\"language-text\">Expect</code> 같은 라이브러리를 수동으로 받아서 작업할 수 있다고 함. 하지만 <code class=\"language-text\">Jest</code> 만 받으면 모든게 됨 <code class=\"language-text\">create-react-app</code>은 두가지가 설치된 상태로 넘어옴</p>\n<h2 id=\"-jest\" style=\"position:relative;\"><a href=\"#-jest\" aria-label=\" jest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥜 Jest</h2>\n<p>테스트를 위한 여러 라이브러리를 합친 상태로 등장하면서 하나의 테스트 프레임워크라 불리고 있음.</p>\n<h3 id=\"-matchers\" style=\"position:relative;\"><a href=\"#-matchers\" aria-label=\" matchers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍯 Matchers</h3>\n<p>Jest에서 <code class=\"language-text\">Matchers</code>는 결과값을 테스트할 수 있는 여러 <code class=\"language-text\">API</code>들을 의미한다.\n기본적으로 <code class=\"language-text\">expect().Matcher APIs</code> 형식으로 진행되는 느낌이다.\n<code class=\"language-text\">expect()</code>로 테스트 진행의 대상이 되는 작업(메소드, 컴포넌트)들이 들어가고 해당 메소드는 실제 결과물인 <code class=\"language-text\">expection</code> 객체를 반환한다고 한다.\n이후의 <code class=\"language-text\">Matcher APIs</code>를 통해 내가 예상하고 원하는 결과물과 비교하는것 같다.</p>\n<p>여러가지 비교 <code class=\"language-text\">API</code>들이 있고 <code class=\"language-text\">promise</code>, <code class=\"language-text\">async await</code> 과 같은 비동기작업의 테스트도 가능하다.</p>\n<p><code class=\"language-text\">React</code>의 라이프사이클과 같은 순서가 테스트 파일에도 존재하는것 같다.</p>\n<ul>\n<li><code class=\"language-text\">beforeAll</code> : 해당 테스트 파일 내 모든 테스트 작업 전에 한번만 실행되는 메소드</li>\n<li><code class=\"language-text\">beforeEach</code> : 각각의 모든 테스트 작업이 전에 실행되는 메소드</li>\n<li><code class=\"language-text\">afterAll</code> : 해당 테스트 파일 내 모든 테스트 작업 종료 후에 한번만 실행되는 메소드</li>\n<li><code class=\"language-text\">beforeAll</code> : 각각의 모든 테스트 작업 종료 후에 실행되는 메소드</li>\n</ul>\n<p>또한, 테스트 내에 스코프(영역)을 지정해 줄 수 있는 메소드도 존재했다.\n<code class=\"language-text\">describe</code>를 통해, 스코프를 지정해주고 위의 라이프사이클도 내부에서 별도로 동작할 수 있었다,</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1 - beforeAll'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1 - afterAll'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1 - beforeEach'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1 - afterEach'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1 - test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Scoped / Nested block'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2 - beforeAll'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2 - afterAll'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2 - beforeEach'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2 - afterEach'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2 - test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 1 - beforeAll</span>\n<span class=\"token comment\">// 1 - beforeEach</span>\n<span class=\"token comment\">// 1 - test</span>\n<span class=\"token comment\">// 1 - afterEach</span>\n<span class=\"token comment\">// 2 - beforeAll</span>\n<span class=\"token comment\">// 1 - beforeEach</span>\n<span class=\"token comment\">// 2 - beforeEach</span>\n<span class=\"token comment\">// 2 - test</span>\n<span class=\"token comment\">// 2 - afterEach</span>\n<span class=\"token comment\">// 1 - afterEach</span>\n<span class=\"token comment\">// 2 - afterAll</span>\n<span class=\"token comment\">// 1 - afterAll</span></code></pre></div>\n<h3 id=\"-mock\" style=\"position:relative;\"><a href=\"#-mock\" aria-label=\" mock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍞 Mock</h3>\n<p><code class=\"language-text\">mocking</code>은 단위 테스트를 작성할 때, 해당 코드가 의존하는 부분을 가짜(<code class=\"language-text\">mock</code>)로 대체하는 기법이라고 한다. 아무래도 테스트 하려는 코드가 의존하는 부분을 직접 생성하는것은 부담스럽기 때문에 <code class=\"language-text\">mocking</code>을 많이 사용한다고 한다.\n예로, 데이터베이스의 <code class=\"language-text\">crud</code> 작업에 대한 테스트를 작성할 때 실제 데이터베이스를 사용하게된다면 여러 불편함과 문제가 있을 수 있다.\n또한 <code class=\"language-text\">Unit Test(단위테스트)</code>는 외부환경에 의존하지 않고 독립적으로 실행되야한다는 점에서 위배된다.\n이럴 때, 가짜 객체를 생성하여 테스트를 진행하는것이다.</p>\n<p>컴포넌트의 <code class=\"language-text\">props</code>로 받아온 메소드 또한, 초기 테스트 <code class=\"language-text\">render</code> 때 <code class=\"language-text\">mocking</code>함수를 보내어 실행되는지 확인할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Link</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Link</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>status<span class=\"token punctuation\">,</span> setStatus<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> onMouseEnter <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOVERED</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실행되었당'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setStatus<span class=\"token punctuation\">,</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> onMouseLeave <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setStatus<span class=\"token punctuation\">,</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>a\n      className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">}</span>\n      href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page <span class=\"token operator\">||</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">}</span>\n      onMouseEnter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseEnter<span class=\"token punctuation\">}</span>\n      onMouseLeave<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseLeave<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// test</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Link'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">clearAllMocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Link component mount'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// screen.debug();</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onMouse Toggle'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> setState <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Link page<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.facebook.com\"</span> setState<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setState<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Facebook\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Facebook'</span><span class=\"token punctuation\">)</span>\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">mouseEnter</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>setState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">mouseLeave</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>생성된 <code class=\"language-text\">mocking</code>함수 인스턴스에는 <code class=\"language-text\">.mock</code> 속성이 존재한다. 해당 인스턴스는 아래와 같은 속성들을 갖고있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">mock <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  calls<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 실행될때마다 받은 변수를 담은 이중배열</span>\n  instances<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 변수가 아닌 바인딩된 객체등의 인스턴스</span>\n  invocationCallOrder<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 해당 모의함수(mock) 인스턴스가 실행된 횟수</span>\n  results<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 초기 모의함수가 생성될 때 보내진 작업의 결과값</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"-jestfn-jestspyon\" style=\"position:relative;\"><a href=\"#-jestfn-jestspyon\" aria-label=\" jestfn jestspyon permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥐 jest.fn(), jest.spyOn()</h4>\n<p><code class=\"language-text\">jest.fn()</code>을 통해 <code class=\"language-text\">mocking</code> 함수를 만들 수 있다. 생성된 <code class=\"language-text\">mocking</code> 함수의 결과값을 지정해 줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mock fn'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> mockFn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    mockFn<span class=\"token punctuation\">.</span><span class=\"token function\">mockClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    mockFn <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mockReturnValue'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    mockFn<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mock 함수 입니다.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">mockFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Mock 함수 입니다.'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mockReturnValueOnce'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    mockFn<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValueOnce</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValueOnce</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">=></span> <span class=\"token function\">mockFn</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 12</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mockFn<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//   {</span>\n    <span class=\"token comment\">//    calls: [ [ 11 ], [ 12 ] ],</span>\n    <span class=\"token comment\">//    instances: [ undefined, undefined ],</span>\n    <span class=\"token comment\">//    invocationCallOrder: [ 1, 2 ],</span>\n    <span class=\"token comment\">//    results: [ { type: 'return', value: false }, { type: 'return', value: true } ]</span>\n    <span class=\"token comment\">// }</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mockResolvedValue'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    mockFn<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'비동기 Mock 함수 입니다.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">mockFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '비동기 Mock 함수 입니다.'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mockImplementation'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    mockFn<span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">mockFn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'상민'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 상민</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mockFn props'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mockFn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">mockFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">jest.spyOn</code>의 경우, 외부 모듈에 감지하는 스파이를 붙여놓는 개념이기 때문에 상호 의존성이 생길 수 있어 <code class=\"language-text\">jest.fn()</code>으로 새로운 가상의 <code class=\"language-text\">mocking</code> 모듈을 만드는 것이 더 좋다고 한다.</p>\n<p><code class=\"language-text\">fetch</code>, <code class=\"language-text\">axios</code> 등의 기본 자바스크립트 <code class=\"language-text\">api</code>에도 사용 가능하다.</p>\n<blockquote>\n<p>해당 모듈의 속성에 접근하는 방식</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mock spy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'spy fn'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mockSpy <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>calculator<span class=\"token punctuation\">,</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mockSpy<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockSpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockSpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>비동기 <code class=\"language-text\">API</code>를 테스트 하는 예제이다. <code class=\"language-text\">spyOn</code>을 사용하여 기존의 메소드를 감지하는 방식이기 때문에, 서버 종료나 잘못된 url등 에러가 발생하면 테스트코드가 진행되지 않기 때문에, <code class=\"language-text\">fn</code>으로 새로운 <code class=\"language-text\">mocking</code> 함수를 만들어서 사용하는것이 독립성이 중요한 유닛테스트에 적합하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mock function example'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get some async data with axios'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    axios<span class=\"token punctuation\">.</span>get <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'상민'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { id: 1, name: '상민' }</span>\n\n    axios<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">.</span><span class=\"token function\">mockClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get some async data with fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// console.log(global.fetch); -> [Function: fetch]</span>\n    global<span class=\"token punctuation\">.</span>fetch <span class=\"token operator\">=</span> jest\n      <span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'상민'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    global<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">.</span>mockClear\n    <span class=\"token comment\">// console.log(global.fetch); ->  [Function: mockConstructor]</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { id: 1, name: '상민' }</span>\n\n    global<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">.</span><span class=\"token function\">mockClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">mocking</code> 함수를 만들기 전에는 원본의 메소드로 존재하지만, <code class=\"language-text\">mocking</code> 함수를 만들고 난 뒤에 해당 원본 메소드를 검색하면 <code class=\"language-text\">[Function: mockConstructor]</code>라는 결과값이 나온다.</p>\n<blockquote>\n<p>즉, 이 테스트 에서는 해당 메소드가 <code class=\"language-text\">mocking</code> 함수로 변경되었다는것을 의미한다고 한다.</p>\n</blockquote>\n<p>따라서, 작업이 끝난 다음에는 해당 <code class=\"language-text\">mocking</code> 인스턴스를 초기화시켜주도록 하자.\n<code class=\"language-text\">jest.clearAllMocks()</code>로 모두 초기화하거나, <code class=\"language-text\">global.fetch.mockClear()</code>로 개별 초기화도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 초기화 전</span>\nglobal<span class=\"token punctuation\">.</span>fetch <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  calls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  instances<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  invocationCallOrder<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  results<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'return'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Promise</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 초기화 후</span>\nglobal<span class=\"token punctuation\">.</span>fetch <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  calls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  instances<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  invocationCallOrder<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  results<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"-jestmock\" style=\"position:relative;\"><a href=\"#-jestmock\" aria-label=\" jestmock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥖 jest.mock()</h4>\n<p>위에서 <code class=\"language-text\">fetch</code>, <code class=\"language-text\">axios</code>를 mock 함수로 만들어서 사용을 했다. 즉, 모듈 내부에 있는 메소드가 제대로 정의되어있지 않거나 모르더라도 원하는 결과값을 진행하여 이후의 과정을 테스트 할 수 있었다.</p>\n<p>하지만, 만약 모듈 내부에 있는 <strong>여러개</strong> 의 메소드를 <code class=\"language-text\">mock</code> 해야한다면 <code class=\"language-text\">jest.fn()</code>을 여러번 반복하여 만들어줘야 할 것이다.</p>\n<p>이를 도와주기 위한 메소드가 <code class=\"language-text\">jest.mock(모듈)</code>이다. 인자로 보내지는 모듈 전체를 <code class=\"language-text\">mocking</code> 함수로 만들어주는것이다.</p>\n<blockquote>\n<p><code class=\"language-text\">jest.mock(axios)</code>, <code class=\"language-text\">jset.mock(../utils.ts)</code>\n해당 모듈 내부의 모든 메소드가 <code class=\"language-text\">mock</code> 인스턴스화 된다.</p>\n</blockquote>\n<p>이전에 <code class=\"language-text\">axios.get = jest.fn()...</code> 방식으로 <code class=\"language-text\">mocking</code> 한 경우, <code class=\"language-text\">axios</code>에서 <code class=\"language-text\">get</code> 속성만 <code class=\"language-text\">mock</code> 인스턴스가 되었는데, 이 방식으로 하게될 경우 <code class=\"language-text\">axios</code> 내부의 모든 속성들이 모두 <code class=\"language-text\">mock</code> 인스턴스화 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">axios <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">delete</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Function</span><span class=\"token operator\">:</span> wrap<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    _isMockFunction<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    getMockImplementation<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mock<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Getter<span class=\"token operator\">/</span>Setter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockClear<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockReset<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockRestore<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockReturnValueOnce<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockResolvedValueOnce<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockRejectedValueOnce<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockReturnValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockResolvedValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockRejectedValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockImplementationOnce<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockImplementation<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockReturnThis<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockName<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    getMockName<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  get<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Function</span><span class=\"token operator\">:</span> wrap<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    _isMockFunction<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    getMockImplementation<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mock<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Getter<span class=\"token operator\">/</span>Setter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockClear<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockReset<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockRestore<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockReturnValueOnce<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockResolvedValueOnce<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockRejectedValueOnce<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockReturnValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockResolvedValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockRejectedValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockImplementationOnce<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockImplementation<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockReturnThis<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mockName<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    getMockName<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Function</span> <span class=\"token punctuation\">(</span>anonymous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"-이후\" style=\"position:relative;\"><a href=\"#-%EC%9D%B4%ED%9B%84\" aria-label=\" 이후 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥨 이후</h2>\n<p>이전에 만들었던 프로젝트들에 테스트코드를 한번 입혀볼 생각이다. 또한, 실제 작업 이전에 테스트코드를 먼저 작성하고, 실패되는 테스트코드를 하나하나 성공으로 맞춰나가는 <code class=\"language-text\">TDD</code> 개발론에 대해 한번 알아봐야할 것 같다.</p>\n<h2 id=\"-참고\" style=\"position:relative;\"><a href=\"#-%EC%B0%B8%EA%B3%A0\" aria-label=\" 참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥯 참고</h2>\n<ul>\n<li><a href=\"https://jestjs.io/\">jest 공식문서</a></li>\n</ul>","frontmatter":{"title":"Jest, React-Testing-Library","date":"June 04, 2021"}}},"pageContext":{"slug":"/Study/TestCode/jest && react-test-library/","previous":{"fields":{"slug":"/Study/TestCode/frontend test/"},"frontmatter":{"title":"Frontend, Testcode","category":"Study","draft":false,"tag":"TestCode"}},"next":{"fields":{"slug":"/Study/Think/loa-hands3/"},"frontmatter":{"title":"컴포넌트 구조, 스타일 기법에 대한 고민 feat loa-hands","category":"Study","draft":false,"tag":"Think"}}}},"staticQueryHashes":["3128451518","3665928227","479399088","479399088"]}