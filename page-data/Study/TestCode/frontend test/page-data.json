{"componentChunkName":"component---src-templates-blog-post-js","path":"/Study/TestCode/frontend test/","result":{"data":{"site":{"siteMetadata":{"title":"SangMin 개발 이야기","author":"SangMin","siteUrl":"https://sangmin802.github.io","comment":{"utterances":"sangmin802/sangmin802.github.io"}}},"markdownRemark":{"id":"e144fdd3-a27d-563f-bf38-0698a6944554","excerpt":"…","html":"<p>요즘 리팩토링에 관심이 많다. 불필요하거나 중복되는 코드뭉치를 제거하는것 또한 중요하다.</p>\n<p>하지만, 제거를 할 때 실제 실행 시 에러가 발생하지 않을까 라는 두려움때문에 과감하게 제거하지 못하는것 같다.</p>\n<p>또한, 모든 코드를 작성하고 실행을하면서 그때 그때 에러를 발견하고 수정을 해오고있었다. 이 기능이 제대로 작동이 되는지, 원하는 결과값을 반환을 하는지는 늘 실행을 해보아야 알 수 있었다. 실제 앱을 실행시키기 전이 미리 확인할 수 있는 방법은 없을까?</p>\n<h2 id=\"-프론트엔드-테스트-코드\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\" 프론트엔드 테스트 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍍 프론트엔드 테스트 코드</h2>\n<p>앱을 실행시키지 않더라도 개발자가 생성한 코드가 사용자의 입장에서 제대로 작동이 되는지 확인해볼 필요가 있다. 어떠한 요청을 통해 개발자가 예상한 대로 스타일이 변경이 되는지 혹은, 받아온 데이터를 제대로 가공하여 실제 DOM을 구성을 하는지 알고싶은 경우가 있다.</p>\n<p>작성하는 코드의 규모가 커지게 되면서 작업물에 확신을 갖고싶어하게 되었다. 그러면서 자연스럽게 보게된 것이 테스트코드이다.</p>\n<blockquote>\n<p>TDD - 이후에 다뤄볼예정</p>\n</blockquote>\n<p>테스트코드를 작성하게 된다면 필요하지 않은 코드뭉치를 제거했을 때 실제로 실행을 해보지 않더라도 테스트코드에서 에러 여부를 사전에 파악할 수 있어 좀더 과감하게 리팩토링을 할 수 있다고 하니 고민도 해결되는 부분이다!</p>\n<h3 id=\"-static-test-정적-테스트\" style=\"position:relative;\"><a href=\"#-static-test-%EC%A0%95%EC%A0%81-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" static test 정적 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥥 Static Test 정적 테스트</h3>\n<p>별도의 테스트코드가 아닌 실제 코드에서 발생할 수 있는 에러를 미연에 방지할 수 있도록 도움을 주는 것. <code class=\"language-text\">TypeScript</code>로 변수의 타입을 검사하거나 <code class=\"language-text\">ESLint</code>로 사용하지 않는 변수를 찾는것이 대표적이다.</p>\n<p>사실 알게모르게 나도 간단한 테스트는 해오고 있던것이다.</p>\n<blockquote>\n<p>ㄷㄷ</p>\n</blockquote>\n<h3 id=\"-unit-test-단위-테스트\" style=\"position:relative;\"><a href=\"#-unit-test-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" unit test 단위 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥝 Unit Test 단위 테스트</h3>\n<p>작성한 애플리케이션에서 가장 작은 단위의 코드를 테스트하는 기법이다. 각각의 테스트를 통해 참, 거짓을 판단하기 때문에 어느곳에서 잘못되었는지 빠르게 알 수 있다. <code class=\"language-text\">React</code>, <code class=\"language-text\">Vue</code>와 같은 프레임워크들의 기반이 되는 컴포넌트들을 테스트하는 좋은 방법이라고 한다.</p>\n<h3 id=\"-integration-test-통합-테스트\" style=\"position:relative;\"><a href=\"#-integration-test-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" integration test 통합 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍅 Integration Test 통합 테스트</h3>\n<p>애플리케이션에서 두가지 이상의 요소가 서로 상호작용할 때, 테스트하는 기법이라고 한다.</p>\n<blockquote>\n<p>설명만으로는 잘 모르겠다. 부모 자식간 컴포넌트가 주고받는 속성에 대해 테스트할 수 있는 것일까…?</p>\n</blockquote>\n<blockquote>\n<p>그냥 각각의 컴포넌트가 받는 속성에 따라 테스트 하는게 아닐까..?</p>\n</blockquote>\n<h3 id=\"-end-to-end-test-e2e테스트\" style=\"position:relative;\"><a href=\"#-end-to-end-test-e2e%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" end to end test e2e테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥑 End to End Test E2E테스트</h3>\n<p>위의 테스트들 처럼 부품 부품별 테스트하는것이 아닌 각각의 부품들로 구성된 하나의 애플리케이션을 처음부터 끝까지 테스트하는 방법이라고 한다. 사용자가 직접 사용하는것처럼 동작되도록 테스트를 작성하고, 실행시키면서 예상하는대로 작동되는지 검증할 수 있다고 한다.\n<code class=\"language-text\">cypress</code>가 대표적인 도구인듯 하다.</p>\n<h2 id=\"-테스트-대상\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81\" aria-label=\" 테스트 대상 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🍆 테스트 대상</h2>\n<p>프론트엔드 분야에서 테스트가 필요한 항목들을 생각해보았다.</p>\n<ol class=\"contains-task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 시각적 요소인 <code class=\"language-text\">UI</code>가 잘 그려지는지</p>\n<ul>\n<li>개발자가 <code class=\"language-text\">HTML</code>, <code class=\"language-text\">CSS</code>등을 통해 생성한 컴포넌트의 구조가 의도한 대로 나타나는지를 테스트하기 위해 <code class=\"language-text\">Jest</code>로 스냅샷테스트로 만들어진 구조를 확인하고, <code class=\"language-text\">StoryBook</code>으로 실제 스타일을 확인한다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 사용자의 이벤트가 잘 실행되는지</p>\n<ul>\n<li>해당 컴포넌트에서 사용되는 이벤트들을 임의로 실행시켜보고 반환하는 결과와 원하는 결과를 비교하여 검증해 볼 수 있다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <code class=\"language-text\">API</code>통신에 있어서 원하는 결과를 반환하는지</p>\n<ul>\n<li>실제 <code class=\"language-text\">API</code>서버를 구축하는것 보다는 가짜 메소드·객체를 생성하여 결과를 받아왔을 때 이후의 작업을 제대로 수행하는지 확인해본다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"-react-and-testcode\" style=\"position:relative;\"><a href=\"#-react-and-testcode\" aria-label=\" react and testcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥒 react and testcode</h2>\n<p><code class=\"language-text\">React</code>에서는 아예 테스트 항목을 따로 구분하여 관리할정도로 중요하게 생각하고있는것 같다.\n실제로 <code class=\"language-text\">facebook</code>에서는 <code class=\"language-text\">react-testing-library</code>를 통해 테스트코드를 작성하고 있다고 한다.</p>\n<h2 id=\"-react-testing-library--react-test-renderer-\" style=\"position:relative;\"><a href=\"#-react-testing-library--react-test-renderer-\" aria-label=\" react testing library  react test renderer  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥬 react-testing-library ? react-test-renderer ?</h2>\n<p><code class=\"language-text\">react</code>에는 두가지의 테스트 모듈을 소개하고있다. 처음에는 이 두가지가 뭘 의미하는것인지 몰라 헷갈렸다. 그래서, 예제로 있는 컴포넌트를 각각 두가지의 방식으로 테스트코드를 작성해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useCallback<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">STATUS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">HOVERED</span><span class=\"token operator\">:</span> <span class=\"token string\">'hovered'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">NORMAL</span><span class=\"token operator\">:</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 귀찮아서 any로 해놓았다 신경쓰지말기..</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  page<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n  children<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Link</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>status<span class=\"token punctuation\">,</span> setStatus<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> onMouseEnter <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOVERED</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setStatus<span class=\"token punctuation\">,</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> onMouseLeave <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setStatus<span class=\"token punctuation\">,</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>a\n      className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">}</span>\n      href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page <span class=\"token operator\">||</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">}</span>\n      onMouseEnter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseEnter<span class=\"token punctuation\">}</span>\n      onMouseLeave<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseLeave<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Link</code></pre></div>\n<p>테스트가 진행될 컴포넌트이다. 두개의 사용자 이벤트가 존재하고, 해당 이벤트에 따라 <code class=\"language-text\">className</code>이 변경된다.</p>\n<ol>\n<li><code class=\"language-text\">status</code> 속성이 변경이 잘 되어 <code class=\"language-text\">className</code>에 반영이 되는지 확인</li>\n<li>두개의 이벤트가 잘 실행이 되는지 확인</li>\n</ol>\n<h3 id=\"-react-testing-library\" style=\"position:relative;\"><a href=\"#-react-testing-library\" aria-label=\" react testing library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥦 react-testing-library</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'./index'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fireEvent<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">,</span> screen <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Link'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Link page<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.facebook.com\"</span><span class=\"token operator\">></span>Facebook<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Link component mount'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// screen.debug();</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onMouse Toggle'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Facebook'</span><span class=\"token punctuation\">)</span>\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">mouseEnter</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n    screen<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">mouseLeave</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n    screen<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">render</code>를 사용하여 해당 컴포넌트를 미리 만들어볼 수 있다. 해당 모듈의 큰 특징인 마치 실제 <code class=\"language-text\">DOM</code>에 접근한것과 같은 메소드들을 사용할 수 있다는 점이다. 컴포넌트가 생성이 되면 <code class=\"language-text\">screen</code>에 담기게(?) 되고 각종 <code class=\"language-text\">DOM API</code>를 사용하여 접근할 수 있다.</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/06/03/testing-library.PNG\" alt=\"testing-library\">\n</div>\n<p>결과물을 보아도 완성되어있는 <code class=\"language-text\">DOM</code>이 있고, <code class=\"language-text\">className</code>이 잘 변경된것을 보아 테스트도 예상한대로 진행되었다.</p>\n<blockquote>\n<p>여기서 <code class=\"language-text\">React</code>의 경우 <code class=\"language-text\">className</code>이지만, <code class=\"language-text\">class</code>로 결과값이 나온것을 보아 해당 모듈은 컴포넌트 자체를 보여준다기보다 완성된 <code class=\"language-text\">DOM</code>을 기준으로 하는것 같다.</p>\n</blockquote>\n<h3 id=\"-react-test-renderer\" style=\"position:relative;\"><a href=\"#-react-test-renderer\" aria-label=\" react test renderer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧄 react-test-renderer</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Link.react.test.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> renderer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span>\n<span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'./index'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Link'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> renderedComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">let</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Link component mount'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    renderedComponent <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Link page<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.facebook.com\"</span><span class=\"token operator\">></span>Facebook<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n    tree <span class=\"token operator\">=</span> renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click onMouseEnter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      tree<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onMouseEnter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    tree <span class=\"token operator\">=</span> renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click onMouseLeave'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      tree<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onMouseLeave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    tree <span class=\"token operator\">=</span> renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>딱히 설명할 필요도 없이 결과물이 모든것을 보여준다.</p>\n<div style=\"margin : 0 auto; text-align : center\">\n  <img src=\"/img/2021/06/03/test-renderer.PNG\" alt=\"test-renderer\">\n</div>\n<p><code class=\"language-text\">render</code>된 컴포넌트를 <code class=\"language-text\">DOM</code>으로 보여주는것이 아니라, 객체 인스턴스화 하여 테스트를 진행한다.</p>\n<h3 id=\"-느낌\" style=\"position:relative;\"><a href=\"#-%EB%8A%90%EB%82%8C\" aria-label=\" 느낌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌽 느낌</h3>\n<p>서로 테스트를 진행하는 컴포넌트의 형태는 다르지만, 공통적인점이 한가지 있는것같다.\n두가지 모두 개발자의 시선이아닌 사용자의 시선으로 테스트가 진행이된다.</p>\n<p>해당 컴포넌트가 렌더링 되기전 어떠한 속성을 갖고있고 전달받는등의 과정은 전혀 보이지않는것 같다.</p>\n<h2 id=\"-결론\" style=\"position:relative;\"><a href=\"#-%EA%B2%B0%EB%A1%A0\" aria-label=\" 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥕 결론</h2>\n<p>프론트엔드에서의 테스트코드와 간단한 예제를 두가지 방법으로 테스트를 진행해보았다.\n두가지 방법 모두 사용자의 시점에서 진행이 되는것같은 점은 동일하지만 <code class=\"language-text\">DOM</code>을 기준으로하는지 아니면 객체인스턴스를 기준으로하는지에 차이가 있어 용도에 맞게 잘 사용한는것이 중요해보인다.</p>\n<p>이후에 테스트를 도와주는 라이브들이 종합된 프레임워크인 <code class=\"language-text\">jest</code>와 테스트 기반 개발론이라 하는 <code class=\"language-text\">TDD</code>에대해 알아보고 기존의 프로젝트들에 테스트코드도 한번 추가해봐야겠다.</p>\n<h2 id=\"-참고\" style=\"position:relative;\"><a href=\"#-%EC%B0%B8%EA%B3%A0\" aria-label=\" 참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥗 참고</h2>\n<ul>\n<li><a href=\"https://blog.rhostem.com/posts/2020-10-14-beginners-guide-to-testing-react-1\">react testing library</a></li>\n<li><a href=\"https://kentcdodds.com/blog/common-mistakes-with-react-testing-library#not-using-screen\">react testing library not using screen</a></li>\n<li><a href=\"https://stackoverflow.com/questions/58653872/react-test-renderers-create-vs-testing-library-reacts-render\">react testing library vs react test renderer</a></li>\n</ul>","frontmatter":{"title":"Frontend, Testcode","date":"June 03, 2021"}}},"pageContext":{"slug":"/Study/TestCode/frontend test/","previous":{"fields":{"slug":"/Study/DataStructure/programmers_08_hash/"},"frontmatter":{"title":"위장-Hash","category":"Study","draft":false,"tag":"Programmers Coding Test"}},"next":{"fields":{"slug":"/Study/TestCode/jest && react-test-library/"},"frontmatter":{"title":"Jest, React-Testing-Library","category":"Study","draft":false,"tag":"TestCode"}}}},"staticQueryHashes":["1162990174","1854831582","2054357557","3128451518"],"slicesMap":{}}