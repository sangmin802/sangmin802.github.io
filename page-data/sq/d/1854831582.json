{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"문제 / 발단 오리진서버와 브라우저 사이에 cdn 캐시서버가 존재할 때, 오리진서버에서 cache-control값을 모두 설정해주지 않은 동일한 경우에도 aws cloudfront를 쓰냐, cloudflare를 쓰냐에 따라 캐시정첵이 미묘하게 다른점이 있어 의문이 생김 위 과정에서 age, date, etag, if-none-match와 같은 캐시와 관련…","fields":{"slug":"/Study/Think/cache control/"},"frontmatter":{"date":"January 31, 2024","title":"cache-control 헤더를 사용하여 섬세하게 캐시 관리하기","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"개발을 하며 확인한것들, 공부한것들 등등.. 메모장에 바로바로 기록하다보니 블로그에 남기지 못했던것 같다.. 메모장이 점점 포화되는것 같으니 부지런히 정리하고, 옮겨야겠다.. 앞으로는 메모장이 아닌, 여기에 바로 남기도록 해야할듯..!","fields":{"slug":"/Diary/create-post/"},"frontmatter":{"date":"January 01, 2024","title":"포스트가 밀렸다","category":"Diary","draft":false,"tag":null}}},{"node":{"excerpt":"사실 이전 블로그에서 다뤘던 내용이기도 하지만, TanstackQuery v5, React 18을 통해 Suspense가 정식기능이 되면서 각잡고 한번 해본 내용이다.\n주관 듬뿍이라 잘못되었을수도 있다 힣 배경 서버의 데이터를 가져와 특정 화면을 그리는 경우, 대부분 이런식으로 처리해온것 같다. 데이터를 요청하고, 요청 상태에 따른 핸들링을 위해 컴포넌트…","fields":{"slug":"/Study/Think/tasntackv5-react18-suspense/"},"frontmatter":{"date":"December 21, 2023","title":"⚛ TanstackQuery5 Suspense","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"cloudflare에서 http3에 대한 글을 읽다가, 자주 언급되는 몇몇 용어들때문에 이해가 잘 안되어서 조금은 이해해보고자 알아보게 되었다. A를 읽다가, A 내부의 B를 알아보게 됨. 늘 이러는것 같음 ㅎ TCP/IP 우편물을 보낼 때, 주소, 우표등등을 부착해야 하는것 처럼 컴퓨터 네트워크간 정보를 전송하고 수신할 때 사용되는 일종의 규칙을 TCP…","fields":{"slug":"/Study/Think/tcp_ip, udp/"},"frontmatter":{"date":"June 28, 2023","title":"TCP/IP","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"토이프로젝트에 pwa를 적용해보기 전, ms에서 관련된 영상을 챕터별로 올려줬길래 보고, 정리해보았다. 사실 완전히 내것 이라고 말은 못하겠고.. 아 이런거구나 하는 정도로만 아래 만드는 1,2 단계수준은 모노레포에 적용해볼 수 있을것 같음 영어를 내 나름대로 해석해본것이라.. 잘못해석, 이해 되었을 수 도 있음 ㅎㅎ.. (이게 제일 걱정) PWA-Pro…","fields":{"slug":"/Study/Think/pwa/"},"frontmatter":{"date":"May 24, 2023","title":"PWA","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"typescript의 모듈추론방식에 대해 의문이 생겨 정리해보고자 함 moduleResolution Node vs NodeNext vs Bundler moduleResolution node16(nodeNext) / node 비교 유튜브 moduleResolution 값에 따른 차이 youtube 이건그냥.. 누가 Node, classic 구분해놓은건데 참…","fields":{"slug":"/Study/Think/moduleresolution/"},"frontmatter":{"date":"May 01, 2023","title":"Typescript 모듈추론방식","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"23년 1월부터 토이프로젝트를 진행해오면서 모노레포를 운영하며 확인한점, 과정을 기록해두고자 함 종료되는 프로젝트가 아니기 때문에, 계속하여 추가될 수 있음 모노레포 구성기 turboRepo를 선택하였음. yarn pnpm모드 미지원 Yarn berry / pnp는 아직 정식지원 x node-modules만 가능 (blog post 11이였나 12에서 y…","fields":{"slug":"/Note/toy-project/"},"frontmatter":{"date":"January 01, 2023","title":"토이프로젝트(모노레포) 구성기","category":"Note","draft":false,"tag":null}}},{"node":{"excerpt":"React18 등장 현재 개인 토이프로젝트도  기능을 사용하고 있다. 해당 기능은 사실  버전 출시 이전에 실험용으로 제공되는 기능으로 표시되어 있었다. 근데 개인적으로 사용하는데에 큰 문제는 없었음 그리고 얼마전 버전이 이라는 키워드와 함께 정식적으로 릴리즈되었다. 그것에 대해 알아보고, 기록하고자 한다. 충분시 수정될 여지가 많은 기록 동시성 대략적으…","fields":{"slug":"/Study/Think/react18/"},"frontmatter":{"date":"May 07, 2022","title":"React 18 준비하기","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"문제 발생 최근 어떤 프로젝트를 진행하면서 한가지 발생했던 이슈와 해결과정, 해결방법에 대한 확신을 다룬 포스트 이다. 좌우 스크롤과 같은 영역을 구현할 때, 워낙 잘 알려져있고 높은 사용을 자랑하는 모듈 대신 좌우 스크롤을 통해 구현해보고자 하였다. 구현과정 자체에는 큰 문제가 없었는데 한가지 문제가 발생하였다.  이벤트의 경우, 동일한 요소 내에  -…","fields":{"slug":"/Study/Think/mouse and click issue/"},"frontmatter":{"date":"January 22, 2022","title":"🖱 동일 요소의 클릭이벤트, 마우스이벤트 이슈","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"목표 같은 실수를 하고 싶지 않거나, 동일한 문제가 발생하였을 때 빠르게 해결하기 위해\n개발을 하면서, 다시잡게 되거나, 놓쳤거나, 몰랐거나, 잘못알고있었거나 (비슷한말인가) 그런 것들을 간단하게 요약해두고자 한다. 메모장에 기록을 해두었는데, 괜찮은것들은 공유되어도 좋은것같구.. 메모장이 항상 유지되는것도 아닌것 같아서 옮겨두려 한다. 모두 한번에 기억…","fields":{"slug":"/Note/one-line-note/"},"frontmatter":{"date":"January 03, 2022","title":"한줄 기억 노트","category":"Note","draft":false,"tag":null}}},{"node":{"excerpt":"요즈음에는 스타일링 기법에 있어서 방식을 조금 더선호하게 된 것 같다. 무엇보다도 스크립트 환경에 더 친화적이여서 서로간 공유가 원활하게 이뤄질 수 있다는점이 매력있었고, 컴포넌트를 디자인 할 때, 유연한 컴포넌트를 만들기 위해 상위에서 많은것을 결정해서 속성으로 넘겨주는 과정에서 의 속성을 전달하는 특징과도 잘 융화된 느낌이였기 때문이다. 그렇게 사용하…","fields":{"slug":"/Study/Think/how styled-components work/"},"frontmatter":{"date":"November 17, 2021","title":"🎨 styled-components의 작동원리","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"로 개발을 시작하면 기본적인 디렉토리들을 먼저 생성해주고있다.   : 컴포넌트 관리  : 훅 관리  : 상수값 관리  : header, footer등의 공통적인 UI를 보유한 하나의 컴포넌트(대체로 App을 여기서 관리했음)  : 페이지 관리 처음에는 하나의 컴포넌트로 시작을 하더라도 많은 이유로 컴포넌트를 분리해내게 된다. 재사용되는 UI를 컴포넌트로 …","fields":{"slug":"/Study/Think/directory destructure/"},"frontmatter":{"date":"November 04, 2021","title":"⚛ 컴포넌트의 역할과 디렉토리 구조","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"에서 에 영향을 주는 를 통해 에 대한 업데이트 요청은 비동기로 전달된다. 또한, 는 상태값을 업데이트 할 때 모든 요청에 따라 바로바로 가 되는것이 아닌 변경사항을 모아서 한번에 일괄 처리한다고 한다. 모든 요청에 각각 반응하여 를 하는것보단, 단 한번의 를 통해 성능 향상을 위함이라고 한다. 공문 에서는 에 대해 이런식으로 표현했다. 상태 업데이트는 …","fields":{"slug":"/Study/Think/state batch update/"},"frontmatter":{"date":"October 21, 2021","title":"⚛ React state batch updating 이슈","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"9월 쯤 원티드 플랫폼에 처음보는 기업의 채용글이 올라왔다. 이라는 기업이였고, 프론트엔드 개발자를 구한다는 글 이였다. 기업문화나, 사용하는 기술에대해 꽤나 매력을 느꼈지만 채용과정에있어 코딩테스트가 존재해 자신없는 분야라 고민을 좀 했다. 하지만 도전이지 코딩테스트 코딩테스트는 당연히? 도 프로그래머스를 통해 진행되었고 5개정도의 문제를 4시간동안 풀…","fields":{"slug":"/Diary/channel coperation/"},"frontmatter":{"date":"October 19, 2021","title":"✍ 채널 코퍼레이션 후기","category":"Diary","draft":false,"tag":"Think"}}},{"node":{"excerpt":"에서 는 비동기로 작동이 된다. 엄밀히 따지면, 가 호출이되면 상태값을 변경하는 요청을 비동기로 전달하게 된다. 동일 이벤트 내에 여러번 동일한 가 호출이 되고, 동일한 대상이라면 대체된다. 위의 값이 1인 이유이다. React Asnyc Logic 에서 서버로 요청을 보내고 응답을 받는 등의 비동기 로직을 작성하는 방식이다. 대충 위와 같은 방식으로 비…","fields":{"slug":"/Study/Think/callstack await/"},"frontmatter":{"date":"October 09, 2021","title":"⚛ CallStack에서 await을 만났을 때","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"이전에, 컴포넌트들의 추상화 수준에는 정답이 없지만, 동일 컴포넌트 내부에서의 추상화 수준은 통일을 시켜주는것이 좋다는 글을 보고 정리를 했었다. 선언적인 컴포넌트로 추상화, 그리고 수준의 통일 이후, 진행해왔던 프로젝트들을 보면 어느정도 통일은 되어있지만, 비슷한 방식으로 통일됨을 방해하는 구문이 있었다. 많이 사용해온 방법이었다. 사실, 가장 쉽게 해…","fields":{"slug":"/Study/Think/hoc hook/"},"frontmatter":{"date":"October 07, 2021","title":"⚛ HOC와 Custom Hook","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"진행했던 개인 프로젝트인 , 모두 웹 앱에서 어떠한 반응이 생기고 변경되는 정보를 사용자가 습득하는것이 주 이다. 대부분의 앱들도 마찬가지겠지만, 웹 앱을 활성화 시켜놓고 계속 그 화면만 보는 사용자들은 없다. 다른 활동을 한다거나, 잠시 자리를 비운다거나. 그래서 에서 타이머로 계산되고있는 컨텐츠들이 특정 시간에 도달했다거나 에 새로운 메시지가 전달된다…","fields":{"slug":"/Study/Think/notification/"},"frontmatter":{"date":"September 14, 2021","title":"🔔 Notifiaction으로 사용자에게 알림 전달","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"얼마 전, 토스에서는 라는 공개채용을 통해 3년차 이하의 개발자들에게 취업 기회를 제공하였었다. 나 또한, 해당되는 상태였기 때문에 지원해보게 되었다. 코딩테스트라고하여, 당연하게 알고리즘 문제라고 생각을 하였는데, 알고리즘 문제가 아니라 실제로 프론트엔드 개발을 하면서 만날 수 있는 상황들이 문제로 출제되었었다. 신선했다. 네카라쿠배당토 라는 명칭이 있…","fields":{"slug":"/Diary/toss next/"},"frontmatter":{"date":"September 09, 2021","title":"✍ 2021 Toss Next 후기","category":"Diary","draft":false,"tag":"Think"}}},{"node":{"excerpt":"에서 기본적으로 제공되는 를 사용하여 상태값과, 상태값을 업데이트할 수 있는 메소드를 생성할 수 있다. 아무렇지도 않게 사용해오던 에 알지못했던 세부적인 내용이 있었고, 이 세부적인 내용이 이전에 개인프로젝트를 하면서 발생했던 에러와 큰 관련이 있어 알아보게 되었다. setState는 의존성 배열에서 필요가 없다. 과 같은 메모이제이션 을 사용할 때 상태…","fields":{"slug":"/Study/Think/useState,redux,useReducer/"},"frontmatter":{"date":"September 01, 2021","title":"⚛ useState, Redux 그리고 useReducer","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"는 라는 상태값이 변경되면 이 일어난다. 아마 대부분의 최신 프레임워크들은 비슷할 것이다. 이러한 특징이 장점도 있지만, 불필요하게 렌더링이 되거나 동일한 변수 혹은 메소드를 반복해서 생성하는 경우가 있다. 불필요한 재생산이 일어나는것을 예방하기 위해 에서는 메모이제이션 들을 제공하고 있다. , ,  캐싱이라는 장점만을 생각하고 이런 들을 계속해서 사용해…","fields":{"slug":"/Study/Think/memohooks/"},"frontmatter":{"date":"September 01, 2021","title":"⚛ 메모이제이션 hooks의 오용","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"프로젝트는 첫 제작이 완료되었을 때 종료되는것이 아니라, 새로운 시작이라고 보는것이 맞는것 같다. 새로운 기능이 추가되고, 버그를 수정하고, 성능향상을 위해 보수작업을 하는점에서 말이다. 하나의 프로젝트에 여러 사람이 함께 작업을 하다보면 각각의 생각과 습관 스타일들이 코드에 묻어나게 되는데 그러한 차이를 나쁘다고 하는것이 아니라 하나의 공통된 규칙을 갖…","fields":{"slug":"/Study/Think/git flow/"},"frontmatter":{"date":"August 30, 2021","title":"🌿git flow 브랜치 전략을 사용하여 안전하게 프로젝트 관리해보기","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"개인 프로젝트를 배포할 때, 대부분 를,기반이라면 을 사용해서 배포를 하였다. 또한 서버가 필요할 때에는 를 사용해오고 있었다. 무료의 노예 아무래도 무료로 배포할 수 있는 서버리스 방식이기 때문에 를 통해 직접 배포를 하는것 보다는 좀 많이 성능의 차이가 있는것 같긴 하다. 시간이라던지 .. 로 배포된 서버는 아무래도 람다식이라서 타임또한 존재하는것 같…","fields":{"slug":"/Study/Think/user experience/"},"frontmatter":{"date":"August 06, 2021","title":"⚛ 비동기 작업 분리를 통한 사용자 경험 향상 및 Suspense에 대한 고민","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"웹 어플리케이션을 구현하다보면 거의 대부분 를 사용하여 서버로 요청을 보내고, 응답을 받아온 데이터를 사용하게 된다. 이 때, 서버로 요청을 보낼 때에는 특정 조건에 자동으로 실행될 수 도 있고, 사용자의 요청으로 실행될 수 도 있다. 사용자의 요청으로 실행이 될 경우, 그 요청이 무수하게 중첩이 되는 상황이 생길 수 있다. 예로, 검색창에 타이핑을 할 …","fields":{"slug":"/Study/Think/abort fetch/"},"frontmatter":{"date":"August 03, 2021","title":"⚛ React-Query cancel과 Fetch cancel(feat debounce)","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"를 기반으로 개발을 하다보면, 고민이 되는 부분이 있다.\n컴포넌트 추상화의 수준을 정하는 것. 선언형 컴포넌트로 추상화 에서는 상위 컴포넌트가 하위 컴포넌트에게 속성을 전달하여 오로지 전달받은 속성만을 사용하여 렌더링하는것이 가능하다. 위와 같은 속성전달을 통해 하위 컴포넌트 내부에는 비즈니스 로직을 생성하지 않아 재활용성을 높일 수 있게 된다. 또한, …","fields":{"slug":"/Study/Think/abstract painting/"},"frontmatter":{"date":"August 02, 2021","title":"⚛ 선언적인 컴포넌트로 추상화, 그리고 수준의 통일","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Operation 과 를 결합하여 오로지 화면에 될 요소들만 남긴 를 형성하였다. 이제, 이 를 속성에 맞게 화면에 하는데까지의 과정을 살펴보자 Layout 의 요소인 각 들의 뷰포트 내에서 크기, 위치 등의 구조들을 계산하여 을 생성한다. 스크롤을 하여 변화된 뷰포트 기준으로 새롭게 위치값을 계산해야하거나, 직접적으로 DOM의 위치값에 변화를 주었을 때…","fields":{"slug":"/Study/Think/browser-operation/"},"frontmatter":{"date":"July 27, 2021","title":"💻 브라우저 렌더링 - 시각화 단계 operation","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Parsing Blocking 브라우저의 는 인  코드로부터 를 구성하도록 해주는 를 제공한다. 흔히 아는  대부분의 웹 어플리케이션은 , , 가 함께해야 완전하다. 즉, 을 하다보면 되거나 외부 파일로 연결된 , 를 만나게 된다. 그 외에도, 와 같이 외부 링크를 다운받아야 하는 경우도 있다. 을 포함한 대부분의 브라우저 렌더링의 작업들은 메인스레드에서…","fields":{"slug":"/Study/Think/browser-parser-blocking/"},"frontmatter":{"date":"July 27, 2021","title":"💻 브라우저 렌더링 - CRP 멈춰!","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Construction 가져온 , 를 하고 합쳐진 하나의 를 생성하는것이 단계 이다. HTML parsing 처음 서버에서 받아오는 은 마크업 언어로서 가 각각의 태그에 접근할 수 있도록 로 파싱해줄 필요가 있다. 위와 같은 마크업을 로 파싱을 해주어야 한다. 이란, 로 마크업 문서를 가 이용할 수 있는 객체로 만든것이다. 우리가 흔히 를 사용하여 타입 …","fields":{"slug":"/Study/Think/browser-construction/"},"frontmatter":{"date":"July 27, 2021","title":"💻 브라우저 렌더링 - 파싱단계 construction","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":",  정말 많은 사람들이 url입력창에 다양한 사이트 주소를 입력하고 접속을 한다. 우리가 입력하는것은 한 줄의 영어 주소인데, 어떻게 브라우저는 하나의 웹 사이트를 만들어내는걸까? naver.com -> 10.20.215… 사실 우리가 입력하는 이런 도메인 자체로는 아무런 힘을 갖고 있지 않는다. 웹 어플리케이션들은 본인만의 고유한 를 갖고있는데, 이 …","fields":{"slug":"/Study/Think/browser/"},"frontmatter":{"date":"July 26, 2021","title":"💻 브라우저 렌더링의 시작","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"에서 라는 문법이 도입되고, 상속을 통해 사용하고있는 객체를 확장하는등의 작업을 할 수 있다. 의 기반 컴포넌트들도 비슷한 원리일 것이다. 그렇다면, 기존의 자바스크립트에서 업데이트되면서 문법이 추가되었다는 것인데, 이전의 자바스크립트에서는 객체간 상속이란것이 불가능하였을 까? Javascript 상속의 뿌리 prototype 는 흔히 프로토타입 기반 언…","fields":{"slug":"/Study/Think/prototype/"},"frontmatter":{"date":"July 23, 2021","title":"🌳 자바스크립트 class의 뿌리 prototype","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"프론트엔드 개발을 하다보면 정말 자주 접하게되는 키워드가 있다.  이전  기반의 를 구성할 때에는 이 를 정말 질리도록 사용을 했었다. 너무나도 자연스럽게 사용하고 있었지만, 에 대해 설명을 해보자 하면 무슨말 부터 꺼내야 할지 몰랐던 점이 에게 너무 미안해서 제대로 알아보려고 한다. this 정말 단순하게 정의해보자면 는 자신을 사용하는 메소드를 호출한…","fields":{"slug":"/Study/Think/this/"},"frontmatter":{"date":"July 23, 2021","title":"🧙‍♀️ this를 제어하는 자","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"에서 하위의 컴포넌트에게 상위에서 비즈니스 로직과 관련된 이벤트 핸들러를 속성으로 전달 받아, 사용했었다. 과 같이 동적으로 생성되는 컴포넌트들에게 비슷한 역할을 하는 이벤트가 여러개가 생성이 되는 것이였다. 비단 뿐만 아니라, 바닐라 자바스크립트를 사용하면서 이벤트를 할당해 줄 때에도 마찬가지의 상황이였다. useCallback을 통한 메모이제이션 에서…","fields":{"slug":"/Study/Think/delegation/"},"frontmatter":{"date":"July 22, 2021","title":"⌛ Event Delegation을 통한 효율적인 이벤트 할당","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"클라이언트사이드에서 를 사용하여 비동기작업을 좀 더 효율적으로 작성해보았었다. 를 사용하여, 해당 컴포넌트는 데이터를 받아왔을 때의 상태만을 고려하여 구성할 수 있었고 와 를 사용하여 데이터 패칭, 혹은 에러상황에서의 에러 핸들링을 컴포넌트 외부에서 처리할 수 있었다. 이번에는 렌더링 시 서버사이드에서 한번 클라이언트사이드에서 한번 실행되는  기반인 에도…","fields":{"slug":"/Study/Framework/next.js async/"},"frontmatter":{"date":"July 20, 2021","title":"⚛ Next.js(SSR)에서의 Suspense, ErrorBoundary","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":", , 를 모두 합쳐서 하나의 라는 컴포넌트를 이전에 만들었다. 해당 컴포넌트에서는 를 통해 3가지의 상태를 가질 수 있었다.  : 데이터가 중인 상태  : 하위 컴포넌트 마운트 등의 중 발생한 에러 핸들링  : 데이터  완료 필요에 따라서는  상태 이후,  기능도 가능하도록 하였으니 이 또한 확인이 필요하다. mocking 기반으로 setting 컴포넌…","fields":{"slug":"/Study/TestCode/asnycBoundary test/"},"frontmatter":{"date":"July 11, 2021","title":"⚛ AsyncBoundary의 상태별 테스트","category":"Study","draft":false,"tag":"TestCode"}}},{"node":{"excerpt":"와 를 사용하여 로딩처리, 캐싱, 데이터 업데이트와 같은 부분을 해결하여 많은부분의 코드가 절약되었다. 하지만, 두가지만으로는 비동기작업에서 발생하는 에러를 핸들링할 수 없었다. 로 에러가 발생하면, 똑같이 에러 자체를 상태값에 보관해서 다이얼로그를 띄우는 등으로 해결해왔었다. ErrorBoundary 사실 이전 공문을 읽다보면 하단에 와 관련된 내용을 …","fields":{"slug":"/Study/Think/error boundary/"},"frontmatter":{"date":"July 07, 2021","title":"⚛ ErrorBoundary와 비동기 에러 핸들링","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"이전에 를 사용하여, 비동기 작업을 통해 얻은 데이터를 캐싱하고, 지정한 시간에 따라 최신 여부를 파악하고 업데이트하여 사용자에게 좋은 유저경험을 줄 수 있도록 프로그래밍을 하였다. 이번에는 비동기작업에 마찬가지로 자주 사용해왔던 과 같은 상태일 때의 관리를 해보려고 한다. 🍜 React Suspense 이전에 의  속성을 통해 데이터가 받아지지 않았다면…","fields":{"slug":"/Study/Think/suspense/"},"frontmatter":{"date":"July 07, 2021","title":"⚛ React.Suspense를 사용하여 비동기 Pending 관리하기","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"프론트엔드 개발을 하다보면, 거의 필수적으로 하게되는 작업이 있다. 비동기 작업 사용자에게 를 보여줄 때 대부분 이 비동기 작업을 하여 데이터를 받아오고 필요한 작업을 한 다음 완성된 화면을 보여줬었다. 에서 이러한 비동기 작업을 도와주는 와 같은 모듈이 있을 정도로 중요하게 자리잡고 있는 부분이다. 사실 를 사용하지 않고 기본 들 만으로도 가능해지긴 했…","fields":{"slug":"/Study/Think/react-query/"},"frontmatter":{"date":"July 07, 2021","title":"⚛ React-Query를 사용하여 효율적인 비동기 처리하기","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"여행경로 Lv3 주어진 항공권을 모두 이용하여 여행경로를 짜려고 합니다. 항상  공항에서 출발합니다. 항공권 정보가 담긴 2차원 배열 가 매개변수로 주어질 때, 방문하는 공항 경로를 배열에 담아  하도록  함수를 작성해주세요. 제한사항 모든 공항은 알파벳 대문자 3글자로 이루어집니다. 주어진 공항 수는 3개 이상 10,000개 이하입니다. 의 각 행 는 …","fields":{"slug":"/Study/DataStructure/programmers_18_dfs&bfs/"},"frontmatter":{"date":"July 01, 2021","title":"여행경로-DFS/BFS","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"단어변환 Lv3 두 개의 단어 , 과 단어의 집합 가 있습니다. 아래와 같은 규칙을 이용하여 에서 으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다. 한 번에 한 개의 알파벳만 바꿀 수 있습니다. 에 있는 단어로만 변환할 수 있습니다. 예를 들어 이 , 가 , 가 라면 와 같이 4단계를 거쳐 변환할 수 있습니다. 두 개의 단어 , 과 단어의 집합 가 …","fields":{"slug":"/Study/DataStructure/programmers_17_dfs&bfs/"},"frontmatter":{"date":"June 30, 2021","title":"단어변환-DFS/BFS","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"네트워크 Lv3 네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 와 가 직접적으로 연결되어있고, 와 가 직접적으로 연결되어 있을 때 와 도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 는 모두 같은 네트워크 상에 있다고 할 수 있습니다. 컴퓨터의 개수 , 연결에 대한 정보가 담긴 2차원 배열 가 매개…","fields":{"slug":"/Study/DataStructure/programmers_16_dfs&bfs/"},"frontmatter":{"date":"June 29, 2021","title":"네트워크-DFS/BFS","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"타겟 넘버 Lv2 개의 음이 아닌 정수가 있습니다. 이 수를 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 로 숫자 을 만들려면 다음 다섯 방법을 쓸 수 있습니다.      사용할 수 있는 숫자가 담긴 배열 , 타겟 넘버 이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를  하도록  함수를 작성해주세요. 제…","fields":{"slug":"/Study/DataStructure/programmers_15_dfs&bfs/"},"frontmatter":{"date":"June 29, 2021","title":"타겟 넘버-DFS/BFS","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"카펫 Lv2 는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다. 는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다. 가 본 카펫에서 갈색 격자의 수 , 노란색 격자의 수 가 매개변수로 주어질 때…","fields":{"slug":"/Study/DataStructure/programmers_14_full exploration/"},"frontmatter":{"date":"June 28, 2021","title":"카펫-Exploration","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"이중우선순위큐 Lv3 이중 우선순위 큐는 다음 연산을 할 수 있는 자료구조를 말합니다.  : 큐에 주어진 숫자를 삽입합니다.  : 큐에서 최댓값을 삭제합니다.  : 큐에서 최솟값을 삭제합니다. 이중 우선순위 큐가 할 연산 가 매개변수로 주어질 때, 모든 연산을 처리한 후 큐가 비어있으면  비어있지 않으면 을  하도록  함수를 구현해주세요. 제한사항 는 길…","fields":{"slug":"/Study/DataStructure/programmers_13_heap/"},"frontmatter":{"date":"June 28, 2021","title":"이중우선순위큐-Heap","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"디스크 컨트롤러 Lv3 하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다. 디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다. 가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다. 0ms 시점에 3ms가 소요되는 A작업 요청 1ms 시점에 9ms가 소요되는 B작업 요청 2ms 시점에 6ms가 소요되는 C작업 요청 한 번에 하나의 요청…","fields":{"slug":"/Study/DataStructure/programmers_12_heap/"},"frontmatter":{"date":"June 26, 2021","title":"디스크 컨트롤러-Heap","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"다리를 지나는 트럭 Lv2 트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 다리에는 트럭이 최대 대 올라갈 수 있으며, 다리는  이하까지의 무게를 견딜 수 있습니다. 단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.  함수의 매개변수로 다리에 올라갈…","fields":{"slug":"/Study/DataStructure/programmers_11_stack&que/"},"frontmatter":{"date":"June 25, 2021","title":"다리를 지나는 트럭-Stack&Que","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"프린터 Lv2 일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다. 인쇄 대기목록의 가장 앞에 있는 문서를 대기목록에서 꺼냅니다. 나머…","fields":{"slug":"/Study/DataStructure/programmers_10_stack&que/"},"frontmatter":{"date":"June 24, 2021","title":"프린터-Stack&Que","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"베스트앨범 Lv3 스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다. 속한 노래가 많이 재생된 장르를 먼저 수록합니다. 장르 내에서 많이 재생된 노래를 먼저 수록합니다. 장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노…","fields":{"slug":"/Study/DataStructure/programmers_09_hash/"},"frontmatter":{"date":"June 23, 2021","title":"베스트앨범-Hash","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"이전 와 를 통해 로직이나 사용자의 이벤트에 따라 빠르고 간단하게 형성되는 을 통해 테스트해 볼 수 있었다. 다만 조금 아쉬웠던점이 의 스타일과 같은 모든 요소를 테스트하기에는 부족함이 있었다. 따라서 이에 적합한  테스트 라이브러리를 사용해보기로 했다. 🍗 셋팅  명령어로 기본적인 셋팅을 할 수 있었는데, 이 명령어로 .storybook main.js …","fields":{"slug":"/Study/TestCode/loa-hands6/"},"frontmatter":{"date":"June 22, 2021","title":"UI 테스트 StoryBook","category":"Study","draft":false,"tag":"TestCode"}}},{"node":{"excerpt":"이번에는 와 의 테스트코드를 다시 복기해보려한다. 🍆 테스트 분야 을 잘 생성하는가 내부에 로직이 있다면, 해당 로직을 잘 수행하고 적절한 값을 상태값에 반영하는가 를 통해 순차적으로 적절한 이펙트드들을 반환하는가 기본적인  구조는 을 사용하여 기능별로 로 작성되었다. 🧅 Action 기본 도 생성하지만, , 와 같은 비동기작업이 있기 때문에 또한 생성되…","fields":{"slug":"/Study/TestCode/loa-hands5/"},"frontmatter":{"date":"June 18, 2021","title":"Reudx, Redux-Saga 테스트코드","category":"Study","draft":false,"tag":"TestCode"}}},{"node":{"excerpt":"앱에 있어서, 컴포넌트들의 단위테스트를 위한 테스트코드들을 모두 작성해보았다. 전반적인 작성 흐름이나, 작성을 하면서 발생했던 상황에 대해 복기해보려고 한다. 🍆 테스트 분야 테스트를 할 수 있는 분야들을 먼저 생각해보고, 불필요할것 같은 테스트들은 빼기로했다. 렌더링이 잘 되는가 , 비즈니스 로직을 통한 상수나 변수가 잘 계산되어 나오는가 상위 컴포넌트…","fields":{"slug":"/Study/TestCode/loa-hands4/"},"frontmatter":{"date":"June 17, 2021","title":"컴포넌트 테스트코드","category":"Study","draft":false,"tag":"TestCode"}}},{"node":{"excerpt":"이번에 테스트코드를 배우게 되면서, 기존 프로젝트인 에도 테스트코드를 적용해보려고 했다. 또한, 이전에 지적받았던 사항 또한 수정해보려고 한다. 와 를 같이쓰는것은 성능상 좋지 않습니다. 그간, 고민을 한 끝에  방식을 사용하려고 한다. 컴포넌트를 최소단위의 부품으로 사용하고자 하는 최신 프레임워크를 생각해보았을 때, 해당 방식이 더 컨셉을 해치지 않는다…","fields":{"slug":"/Study/Think/loa-hands3/"},"frontmatter":{"date":"June 09, 2021","title":"컴포넌트 구조, 스타일 기법에 대한 고민 feat loa-hands","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"🍠 react-testing-library, Jest  컴포넌트의 구성요소까지 DOM으로 만들어서 테스트를 할 수 있게 도와주는 라이브러리 와 별도의 여러 라이브러리를 받아올 필요 없이 하나로 합쳐진 를 통해 테스트 코드 작성\n즉, 서로가 다른 역할을 갖고 있고 도와주는 형태\n물론 만 갖고 테스트를 위한 ,  같은 라이브러리를 수동으로 받아서 작업할 수 …","fields":{"slug":"/Study/TestCode/jest && react-test-library/"},"frontmatter":{"date":"June 04, 2021","title":"Jest, React-Testing-Library","category":"Study","draft":false,"tag":"TestCode"}}},{"node":{"excerpt":"요즘 리팩토링에 관심이 많다. 불필요하거나 중복되는 코드뭉치를 제거하는것 또한 중요하다. 하지만, 제거를 할 때 실제 실행 시 에러가 발생하지 않을까 라는 두려움때문에 과감하게 제거하지 못하는것 같다. 또한, 모든 코드를 작성하고 실행을하면서 그때 그때 에러를 발견하고 수정을 해오고있었다. 이 기능이 제대로 작동이 되는지, 원하는 결과값을 반환을 하는지는…","fields":{"slug":"/Study/TestCode/frontend test/"},"frontmatter":{"date":"June 03, 2021","title":"Frontend, Testcode","category":"Study","draft":false,"tag":"TestCode"}}},{"node":{"excerpt":"위장 Lv2 스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다. 예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다. 스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 …","fields":{"slug":"/Study/DataStructure/programmers_08_hash/"},"frontmatter":{"date":"May 31, 2021","title":"위장-Hash","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"21-12-03 업데이트 📡 응답을 해주는 서버 서버에 요청을 보내고, 요청에 맞는 응답을 해주는 것. 서버와 관련된 것을 조금씩 알아가면서 호기심이 생겼었다. 누군가에게 응답을 받는것. 누군가에게 메시지를 전달받는 것. 카카오톡이네? 단순히 생각해보면 내가 보낸 메시지를 서버에서 저장하고, 누군가에게 돌려준다면 그것이 채팅이 아닐까? 라는 생각을 하게 …","fields":{"slug":"/Study/Think/webSocket Protocol/"},"frontmatter":{"date":"May 07, 2021","title":"webSocket Protocol","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"🧙‍♀️ 호기심 얼마전 인터뷰를 하면서 받은 질문이 있었다. 이벤트 루프와 관련된 인터뷰를 하면서 받은 질문이였는데, 은 딱 60초뒤에 무조건 실행되나요? 내가 대답한 답변은 아니요 였다. 😂 자신없는 “아니요”의 근거 자바스크립트는 기본적으로 싱글스레드이다. 하나의 작업영역인 에 작업이 쌓이고, 선입 후출의 방식으로 처리가 된다. 그 중에서도 , ,  등의 …","fields":{"slug":"/Study/Think/setTimout/"},"frontmatter":{"date":"May 06, 2021","title":"setTimeout은 무조건 지정된 시간 이후에 실행될까?","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"🙌 Container, Presentational 안녕.. Hook 안녕! 이전에는 디렉토리의 구조를 잡을 때, , 를 통하여 비즈니스로직을 담당하는 컴포넌트와 뷰를 담당하는 컴포넌트를 구분하여 관리하였었다. 하지만, 이 개발되고, 기반 컴포넌트가 아닌 기반의 컴포넌트를 주로 사용하게 되면서 이러한 구조는 더이상 사용하지 않게 되었다. 가 아니더라도 을 …","fields":{"slug":"/Study/Think/atomic design/"},"frontmatter":{"date":"May 06, 2021","title":"Atomic Design","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"과 에서 추가된 와 의 큰 차이는 이후에 동일한 로 재선언이 가능하냐 불가능하냐 엄격함의 차이였다. 는 사실 값 또한 변경될 수 없다는점에 상수 에 가까워 변수인 와는 정말 다르다고 볼 수 있다. 하지만 기능적으로 보았을 때, 과 는 동일한 변수선언으로서 위의 차이를 제외하곤 비슷하다고 생각했는데, 그렇지 않았다. 유효범위(scope)의 차이 선언 당시 …","fields":{"slug":"/Study/Think/var vs let tdz/"},"frontmatter":{"date":"April 30, 2021","title":"var vs let의 차이와 기준이 되는 TDZ","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"어제 A 기업의 인터뷰를 진행중 코드리뷰를 하면서 한가지 예상못했던 문제점을 지적받았다. 와 를 함께 사용하면 성능 저하를 유발할 수 있습니다. 를 스타일시트에서 적용하거나, 동적 변수에 인한 스타일 변화가 있을 때에는  방식인 를 사용하고, 그 외의 기본이 되는 스타일 들은 모두 방식을 통해 두가지를 함께 사용해왔다. 이 방법이 성능 저하를 유발할 수 …","fields":{"slug":"/Study/Think/css-in-css & css-in-js/"},"frontmatter":{"date":"April 28, 2021","title":"CSS-in-CSS, CSS-in-JS","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":",  등 최신의  들은 대부분 컴포넌트 기반으로 설계되고 있다. 이러한 컴포넌트들은 외부의 영향을 받지않아서 재활용성이 뛰어난 특징을 갖고있어야 좋은 컴포넌트라 할 수 있다. 또한, 속성만을 갖는 컴포넌트더라도 필수적인 속성들이 아닌, 내부에서 별다른 로직들을 한번 더 수행해야 해서 잡다한 속성들이 전달되는 컴포넌트라면 재활용은 할 수 있겠지만, 자유로운…","fields":{"slug":"/Study/Think/component composition/"},"frontmatter":{"date":"April 26, 2021","title":"Component Composition","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"이나 과 같이 이벤트 등이 무수히 중첩되는것으 방지하여 성능을 개선하는 기능들이 있다. 하지만, 이러한 것들은 사실 와 같은 들이 실행되는것 자체를 막는 개념인것 같다. 사실 위의 두 개념이 아니더라도, 별도의 로딩 레이아웃등을 통하여 사용자가 이벤트 자체를 실행시키지 못하도록 할 수도 있긴하다. 하지만, 가 이미 진행된 상태라면 어떻게 중첩되는것을 막을…","fields":{"slug":"/Study/Think/abortController/"},"frontmatter":{"date":"April 21, 2021","title":"AbortController","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"매 해마다 프로그래머스에서는 상반기, 하반기 두번에 하여 분야별 코딩테스트를 진행을 한다. 취업과 연결되는 테스트이기 때문에, 나와 같은 취준생들은 물론이고 자기의 실력을 테스트해보고자 응시하는 사람들도 있는것 같았다. 특이하게도 알고리즘 문제를 해결하는것이 아닌, 어떠한 프로젝트를 완성시키는 것이 테스트 였다. 하지만 생각해보면 단순히 완성이 목표가 아…","fields":{"slug":"/Diary/2021-dev-matching/"},"frontmatter":{"date":"April 16, 2021","title":"2021 Dev-Matching: 웹 프론트엔드 개발자(상반기) 후기","category":"Diary","draft":false,"tag":"Think"}}},{"node":{"excerpt":"유튜브 구독해놓은 개발자 분께서, 함수형 프로그래밍이란 영상을 올리셨길래 보면서 겪었던? 일을 회상하며 정리해보려고 한다. 이전에 모 기업 면접을 보던 중 받았던 질문이 있다. ❝ 함수형 프로그래밍을 사용해보신 적 있나요? ❞ 조금 고민을 하였지만, ❝ 아니요 ❞ 라고 대답을 하였다. 고민을 했던 이유는 내가  에서 자주 사용하고있는 함수형 컴포넌트들이 …","fields":{"slug":"/Study/Think/function pg & react hook/"},"frontmatter":{"date":"March 26, 2021","title":"Functional Programming (===) or (!==) Function Component ?","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"이전에 간단하게 접해봤던 에 관련되어서 테스트를 해보던 중, 잘못알고 있었거나 부족했던 점이 있어 추가적으로 정리해보려고 한다. Event Loop 자바스크립트언어는 하나의 작업영역을 가지고있는 로서, 형식의 자료구조를 갖고 있다. 각각의 작업들은 에 차곡차곡 쌓여가며, 선입 후출의 방식으로 일이 진행된다. 그러다보니 A 작업이 시작된다면 B 작업은 중간…","fields":{"slug":"/Study/Think/eventloop/"},"frontmatter":{"date":"March 25, 2021","title":"Event Loop","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"여러 개인 프로젝트를 사용해오면서 겪어왔던 상황들이 있다. 부모의 이벤트가 자식에게 전달되지 않기를 원하거나, 혹은 그 반대의 경우. 늘 이러한 문제를 메소드의 3번째 인자로 값 만으로 컨트롤 할 수 있을거라고 생각했지만, 늘 실패하고 그냥  메소드를 사용해왔었다. 늘 이렇게 대처해오면서,  인데 왜 자꾸 부모의 이벤트가 자식에게 전달되지 라는 생각을 하…","fields":{"slug":"/Study/Think/event flow/"},"frontmatter":{"date":"March 24, 2021","title":"Event Phase에 대한 오해 feat. capturing, bubbling","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"를 사용하면서, 혹은 여러가지 상황을 접해오면서 도메인 네임, ip를 자주 봐오곤 했다. 대략적으로 어떤 기능을 하는지는 알고 있었지만, 명확하게 설명해보려고 하니  이라는 말이 먼저 나오는것 같아 자료를 찾아보던 중, 과정을 잘 설명해준 영상이 있어서 정리해보려고 한다. IP : Internet Protocol Address 컴퓨터, 모바일 등 클라이언…","fields":{"slug":"/Study/Think/ip&&dns/"},"frontmatter":{"date":"March 23, 2021","title":"DNS","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"최근 를 다시 전반적으로 리팩토링하면서,  버전도 수정해주었다. 별 다른 문제는 없었지만, 유독  관련해서만 문제가 발생했는데, 다시한번 복기할 겸 정리해보려고 한다. styled component 에서 동적인 스타일을 좀 더 편리하게 사용하도록 도와주는 모듈이다. 이 컴포넌트로 생성된 클래스는 임의의 흡사 잡영어로된 클래스명을 갖게된다. 단순히 에서만 …","fields":{"slug":"/Study/Framework/next.js style error/"},"frontmatter":{"date":"March 19, 2021","title":"Next.js style error","category":"Study","draft":false,"tag":"Framework"}}},{"node":{"excerpt":"IntersectionObserver 프론트엔드 개발을 해오다보면 사용자의 스크롤에 따라 특정 조건을 감지해야하는 경우들이 정말 많다. 컨텐츠의 최 하위 높이에 도달했을 경우 콜백 실행 대표적으로  특정 높이에 되었을 때, 해당 컨텐츠에 속성 부여 에 값을 갖고 있다가 조건이 되는 높이가 되었을 시, 속성 부여하는  위와 같은 경우, 대부분 수동으로 높이…","fields":{"slug":"/Study/Think/intersectionObserver/"},"frontmatter":{"date":"March 11, 2021","title":"IntersectionObserver","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"코딩 컨벤션 소스파일 소스파일은 알파벳 소문자, 하이픈, 밑줄 로만 작성 컴포넌트파일이나 각종 훅들을 종종 대문자로 시작하는 경우가 있었는데, 모두 수정해야겠다.. 사실상 이것도 일정하지않고 어떤건 소문자 어떤건 대문자 이러긴 했음.. 중괄호 {} 모든 제어문에 있어서 하나의 구문만을 갖고 있어도 중괄호를 사용해야 한다. 한줄은 생략해도 된다는 말도 있는…","fields":{"slug":"/Study/Think/coding convention/"},"frontmatter":{"date":"March 08, 2021","title":"Coding Convention","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Serverless 예~전에 를 처음 접해보고, 를 운용히지 않는 웹사이트를 보며 아.. 이것이 ! 라고 생각했었다. 솔직히 내잘못은 아니잖아.. 라며.. 를 좀 풀어서 설명해주신 분이 있다.  - 서버 관리가 필요 없는 백엔드. 정말 잘생기신 분인데 나의 미숙한 캡쳐능력때문에 누가 될까봐 가려드렸음. 올려주신 영상의 초반부를 분석해보았다. 앱 배포의 변…","fields":{"slug":"/Study/Think/serverless/"},"frontmatter":{"date":"March 02, 2021","title":"Serverless","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":".config 특정 프로그램에 대한 기본설정값들이 배치되는 형식의 파일이다. any의 사용 여부 등 타입스크립트 설정 관련  프로젝트의 번들링 설정을 해주는  의 헤더 값들 및 각종 설정을 해주는  env 를 사용하게 된다면, 갖게되는 환경변수이다. 기본적으로 여러가지의 값들을 갖고있는  형식인데, 추가적으로 값을 설정할 수 있다.  콘솔로 를 찍어본다면…","fields":{"slug":"/Study/Think/config&&env/"},"frontmatter":{"date":"March 01, 2021","title":"config와 env","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"예~ 전에 모 기업에서 피드백을 받고, 또한 리팩토링을 하였었다. 그때 비즈니스 로직과 뷰를 구성하는 컴포넌트를 분리해야한다 라는 말에 , 를 사용하여 를 통한 상태값은 에서 모두 처리하고 속성들을 통해 를 그리는 방식으로 모두 바꿨었다. 하지만 수정을 하고나서도 이해가 안가는점이 있었다. Redux가 의미있나 을 왜쓴거지..? 라는 생각이 떠나질 않았다…","fields":{"slug":"/Study/Think/loa-hands2/"},"frontmatter":{"date":"February 26, 2021","title":"loa-hands refactoring","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"로 배포를 할 때, 두가지 과정이 존재한다.   Next build 나 라는 명령어를 실행시키기 위한 사전작업이기도 하며, 해당 명령어는 폴더를 생성한다. 또한 의 기본적인  페이지 생성 방식이다. Automatic Static Optimization , 등의 메소드를 특정 페이지에서 생성하고 사용했을 때, 서버사이드렌더링을 하여 먼저 정적생성을 하도록 …","fields":{"slug":"/Study/Framework/next.js build export/"},"frontmatter":{"date":"February 15, 2021","title":"Next.js build, export","category":"Study","draft":false,"tag":"Framework"}}},{"node":{"excerpt":"요즘 프로젝트들의 리팩토링을 고민하면서 자연스럽게 디렉토리의 구조도 생각해보게 되었다. 어찌보면, 비즈니스로직들과 뷰를 구분할 때, 디렉토리를 기반으로 짜면 좋지 않을까라는 생각도 들었다. 디자인 패턴 프로젝트를 구성할 때, 정한 디자인패턴에 준하여 구조를 잡는다면 외부의 사람들이 해당 프로젝트를 이해하는 데에도 좋고 이후 기술변경등으로 인한 수정사항이 …","fields":{"slug":"/Study/Think/mvc&&flux/"},"frontmatter":{"date":"February 11, 2021","title":"MVC && Flux","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"라는 동일한 웹앱을 와 순수  두가지 버전으로 제작을 해보았다. 우리가 흔히 을 채택하는 이유는 클라이언트의 입장에서 첫 화면을 빠르게 접할 수 있는점과, 각종 검색포털의 크롤러가 생성한 웹 사이트를 잘 긁어갈 수 있도록 일부분의 돔을 구성하고 있다는 점이였다. 실제로 눈으로 보는것이 더 좋을것 같아 결과물을 비교해보았다. TTV 첫번째 이미지가 의  두…","fields":{"slug":"/Study/Think/ssr vs csr/"},"frontmatter":{"date":"February 11, 2021","title":"SSR vs CSR 비교","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Redux-Thunk -> Redux-Saga 기존 에서 비동기 작업을 수행할 때, 를 사용해왔다. 내부에서 비동기 작업을 수행할 수 있으며, 다른 들을 호출 할 수 있다는 점에 매력을 느꼈다. 하지만, 위처럼 단순하게 이러한 문제만 해결하기 위해서는 가 접근성도 좋고, 편하게 사용할 수 있지만 다른 여러가지 상황에 대처하는데에는 가 더 유연하다고 하여 …","fields":{"slug":"/Study/Think/Redux-Saga/"},"frontmatter":{"date":"February 09, 2021","title":"Redux-Saga","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Gatsby && Graphql 이전 jekyll로 블로그를 운영해왔는데, 아무래도 나 이런것들이 생소하고 선호하지 않는 형식이였어서 커스터마이징이 좀 어려웠다. 그러던 중, 를 발견했고 너무 매력적인 요소가 많았다. React.js 기반 일단 여기서 극호감 Next.js와 유사한 구조 일부분 이 진행된다.(뭐 사실상 md파일 형식이라 크게 어려움은 없지…","fields":{"slug":"/Diary/gatsby/"},"frontmatter":{"date":"February 05, 2021","title":"블로그 이사다!","category":"Diary","draft":false,"tag":null}}},{"node":{"excerpt":"완료하였다. 이전까지는, 를 애용했지만 는 이 더 적합하다고 하여, 처음 사용해보았는데 에 전용 명령어를 입력한다면, 해당 깃 리포지토리에 추가될때마다 자동으로 빌드되는것이 참 편한것 같다. 당연히 이전에도 발생했던 문제인 새로고침시 는 이전에 해결했던 방법을 토대로 에 맞게 살 짝 수정하여 해결하였다. 애초에, 는 클라이언트사이드 라우팅을 사용하려했기때…","fields":{"slug":"/Study/Framework/next.js loa-hands/"},"frontmatter":{"date":"February 03, 2021","title":"Next.js Loa-Hands","category":"Study","draft":false,"tag":"Framework"}}},{"node":{"excerpt":"대부분의 프레임워크들은 편리한 배포를 위해, 파일을 알아서 만들어준다. 따라서, 간단한 커맨드를 통해 빌드파일을 만들 수 있는데 이전에 , ,로 서버, 부터,  빌드환경까지 만들었던 생각을 해보면 참 편하긴 함.. 또한 그러한 기능을 제공한다. 문제발생 😡 앱을 로 개발해보는 과정에서, 는 모든 사용자에게 공통된 정보를 보여주기때문에, 메소드를 통해 정적…","fields":{"slug":"/Study/Framework/next.js webpack/"},"frontmatter":{"date":"February 01, 2021","title":"Next.js Webpack","category":"Study","draft":false,"tag":"Framework"}}},{"node":{"excerpt":"Next.js는 기존 React.js와 다르게, 라우팅이라는 것을 별도의 모듈을 설치할 필요없이 기본적으로 제공한다. 더욱, 폴더의 구성을 통해 페이지 라우팅을 관리하더라  ->  >  ->  위처럼 당연하게도 동적 라우팅을 제공하기도 한다. 예제를 보던 중 다소 헷갈렸던 부분이 있었기때문에, 내 입맛대로 다시 정리해보려 한다.  : 해당 동적라우팅이 생…","fields":{"slug":"/Study/Framework/next.js route/"},"frontmatter":{"date":"January 28, 2021","title":"Next.js Route","category":"Study","draft":false,"tag":"Framework"}}},{"node":{"excerpt":"소수찾기 Lv2 한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.\n\n각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요. 해결과정 처음에는 주어진 숫자에서 가장 작…","fields":{"slug":"/Study/DataStructure/programmers_07_full exploration/"},"frontmatter":{"date":"January 27, 2021","title":"소수찾기-Exploration","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"모의고사 Lv1 수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.\n\n1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, …\n\n2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, …","fields":{"slug":"/Study/DataStructure/programmers_06_full exploration/"},"frontmatter":{"date":"January 27, 2021","title":"모의고사-Exploration","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"예전에 CSR과 SSR을 비교해보면서 React도 SSR이 가능하도록 할 수 있는지 알아보는 과정에 hydrate메소드를 발견했었다. 그리고, Next.js를 학습하던 도중, 해당 용어를 다시 만나게 되었다. Before we talk about data fetching, let’s talk about one of the most important con…","fields":{"slug":"/Study/Framework/next.js hydrate/"},"frontmatter":{"date":"January 26, 2021","title":"Next.js Pre-rendering","category":"Study","draft":false,"tag":"Framework"}}},{"node":{"excerpt":"H-Index Lv2 H-Index는 과학자의 생산성과 영향력을 나타내는 지표입니다. 어느 과학자의 H-Index를 나타내는 값인 h를 구하려고 합니다. 위키백과1에 따르면, H-Index는 다음과 같이 구합니다.\n\n어떤 과학자가 발표한 논문 n편 중, h번 이상 인용된 논문이 h편 이상이고 나머지 논문이 h번 이하 인용되었다면 h의 최댓값이 이 과학자의…","fields":{"slug":"/Study/DataStructure/programmers_05_sort/"},"frontmatter":{"date":"January 25, 2021","title":"H-Index-Sort","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"이전에도 공부해보고싶었지만, 우선순위에서 밀려있어서 손대보지 못하고있었던 Next.js이다 Next.js의 특징 몇몇가지가 참 매력적이였는데, 검색엔진이 최적화 React.js 기반 React, Vue, Angular 모두 클라이언트와 상호작용을 할 수 있다는 SPA라는점에서 큰 이점이 있지만, 아무래도 외부에 노출이되는것이 가장중요한 현 시점에 검색엔진…","fields":{"slug":"/Study/Framework/next.js/"},"frontmatter":{"date":"January 25, 2021","title":"Next.js","category":"Study","draft":false,"tag":"Framework"}}},{"node":{"excerpt":"가장 큰 수 Lv2 0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.\n\n예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 이중 가장 큰 수는 6210입니다.\n\n0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질…","fields":{"slug":"/Study/DataStructure/programmers_04_sort/"},"frontmatter":{"date":"January 22, 2021","title":"가장 큰 수-Sort","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"K번째수 Lv1 배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.\n 예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면 array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니…","fields":{"slug":"/Study/DataStructure/programmers_03_sort/"},"frontmatter":{"date":"January 22, 2021","title":"K번째수-Sort","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"기능개발 Lv2 프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.\n\n또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.\n\n먼저 배포되어야 하는 순서대로 작업의 진도…","fields":{"slug":"/Study/DataStructure/programmers_02_stack&que/"},"frontmatter":{"date":"January 18, 2021","title":"기능개발-Stack&Que","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"완주하지 못한 선수 Lv1 수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.\n\n마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해…","fields":{"slug":"/Study/DataStructure/programmers_01_hash/"},"frontmatter":{"date":"January 18, 2021","title":"완주하지 못한 선수-Hash","category":"Study","draft":false,"tag":"Programmers Coding Test"}}},{"node":{"excerpt":"원래는 깃헙 데스크를 사용했었지만, 얼마전 ssd를 교체하면서 아예 포맷되어 소스트리로 넘어가게 되었다. 과정 협업간 브랜치를 나누어 진행 작업이 되면 해당 origin으로 푸시를 함 test브랜치에서 각각의 개발자들의 커밋내용을 체리픽하여 테스트함 master브랜치가 테스트를 통과한 커밋들만 체리픽하여 origin/master로푸시를 진행 이후 완료가 …","fields":{"slug":"/Study/Think/sourcetree/"},"frontmatter":{"date":"January 15, 2021","title":"소스트리와 깃","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"최근 갖고있던 프로젝트를 타입스크립트화 하면서, 그리고 지금까지 모든 프로젝트를 하며 RESTful API를 통해 서버에서 받아오는 데이터에대해 고민을 하게되었었다. 데이터에서 필요하지 않는 부분도 모두 받아오기때문에 데이터가 한눈에 들어오지 않더라. 최근 프로젝트에서 타입스크립트화 하면서, 어떠한 구조의 데이터가 넘어올 지 예상할 수 없고, 인터페이스를…","fields":{"slug":"/Study/Think/graphql/"},"frontmatter":{"date":"January 08, 2021","title":"Graph ql","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"🙂 발단 최근 기존 프로젝트를 타입스크립트로 변환하면서, 컴파일이 잘 되는지 확인하고자 index.html파일을 로컬에서 실행해보았다. 😡 문제 잘 될꺼라 생각했지만, 각종 파일을 불러오는 주소가 잘못되어있었고, 혹시나 하는 경로를 재설정해보았지만 여전히 에러가 발생했다. 불편한 해결 불편한 해결 위의 참고한 글을 따라서 에 속성을 주면 http통신이 필…","fields":{"slug":"/Study/Think/cra-build/"},"frontmatter":{"date":"January 05, 2021","title":"React Build index.html파일의 의문","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Loa-Hands 컴포넌트부터, 까지 모두 변경해보았다. 지금까지 올린 포스트와 비슷한 구성으로 만들어져서, 별다른 사진을 찍진 않았다. 디스트럭쳐링과정에서 불편함을 느꼈었지만, 해당 컴포넌트가 사용한는 의 내부 속성까지 모두 인터페이스에 포함시키면 원활히 작동되었다. 마찬가지로, 외부에서 가져오기 때문에, 정확한 구조를 알 수 없는 데이터이지만 필수적으…","fields":{"slug":"/Study/TypeScript/TypeScript_practice04/"},"frontmatter":{"date":"January 01, 2021","title":"TypeScript로 바꿔보자5","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"Loa-Hands 이전에 만들었던 앱을 타입스크립트로 바꿔보려한다. 의 일부분을 변경하였다. UserInfoContainer 의 비즈니스로직을 관리하는 컨테이너이다. 각종 액션을 호출하는 디스패쳐들이 생성되는 곳인데, 변수의 타입을 지정해주기가 애매했다. 따라서, 유틸리티를 사용하여, 액션에서 받는 변수의 타입을 가져와서 사용하였다. 의 속성을 사용하기때…","fields":{"slug":"/Study/TypeScript/TypeScript_practice03/"},"frontmatter":{"date":"December 30, 2020","title":"TypeScript로 바꿔보자4","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"Loa-Hands 이전에 만들었던 앱을 타입스크립트로 바꿔보려한다. 부분의 수정과, 부분을 손봐보았다. Reducer 에는 와 가 해당 class를 타입으로 갖고있는데, 이전에 지정해주었던 은 의 타입만을 허용하고 있었다. 따라서, 로 해당 를 확인했을 때, 와 의 유니온타입들중 유일하게 겹쳐서 유효한 속성은 뿐이라, homeData의 값을 설정할 수 없…","fields":{"slug":"/Study/TypeScript/TypeScript_practice02/"},"frontmatter":{"date":"December 29, 2020","title":"TypeScript로 바꿔보자3","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"Loa-Hands 이전에 만들었던 앱을 타입스크립트로 바꿔보려한다. 중앙 상태를 관리하는  파트를 손보기로 했다. Actions 각각의 액션을 구성하는 부분이다. 유틸리티의 편리함을 크게 느꼈다. 액션의 결과값들을 본래는 하나하나 인터페이스를 구성해야하지만, 해당 유틸리티를 사용하여 결과값 구조를 자동으로 만들어지게 했다. 에 대해 좀더 잘 알게되었다 이…","fields":{"slug":"/Study/TypeScript/TypeScript_practice01/"},"frontmatter":{"date":"December 25, 2020","title":"TypeScript로 바꿔보자2","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"Loa-Hands 이전에 만들었던 앱을 타입스크립트로 바꿔보려한다. 유저 정보 및, 홈 정보를 받아와서 클래스로 데이터를 관리하는  디렉토리를 먼저 손보기로 했다. userInfo 수집품, 원정대정보, 유저정보를 관리하는 큰 클래스이다. 세부 클래스들은 내가 구성한거라, 인터페이스를 만들고 타입을 정의하는데 큰 어려움은 없었다. 내부에서 갖고있는 단일 속…","fields":{"slug":"/Study/TypeScript/TypeScript_practice00/"},"frontmatter":{"date":"December 24, 2020","title":"TypeScript로 바꿔보자","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"TS 유틸리티 타입 타입스크립트에서 제공하는 여러 전역 유틸리티 타입이 있다. 대체로 타입변수는 , 또 다른 타입변수는 , 속성은 로 한다. 좀더 직관적으로 하기 위해 또 다른 타입변수는 로 카운팅하겠음 Partial TYPE의 모든 속성을 모두 선택적 타입()로 반환 대표타입 : 인터페이스 타입변수 :  Required TYPE의 모든 속성을 필수로 변…","fields":{"slug":"/Study/TypeScript/TypeScript_09_utility/"},"frontmatter":{"date":"December 23, 2020","title":"TypeScript Utility","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"모듈 기본적인 자바스크립트 모듈이 아닌, 타입스크립트만 가지고 있는 모듈개념을 추가적으로 알아보자. import & export 컴파일 옵션에서 를 통해, ES6모듈의 기본 import 방식도 사용할 수 있다. 모듈의 타입 선언(Ambient module declaration) 타입스크립트의 외부 자바스크립트 모듈 사용 모듈을 받고 import 할 때, …","fields":{"slug":"/Study/TypeScript/TypeScript_08_module/"},"frontmatter":{"date":"December 23, 2020","title":"TypeScript Module","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"선택적 옵션(Optional) 키워드를 사용하는 여러 선택적 개념에 대해 알아보자 에서는 키워드를 통해, 필수 속성이 아닌 선택적 속성임을 명시해줬다. 매개변수(Parameters) 타입을 선언할 때 선택적 매개변수를 지정할 수 있다. 속성과 메소드(Properties and Methods)  키워드를 속성과 메소드 타입에도 선언할 수 있다. , , 에서…","fields":{"slug":"/Study/TypeScript/TypeScript_07_optional/"},"frontmatter":{"date":"December 22, 2020","title":"TypeScript Optional","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"클래스(Class) 클래스의 생성자 와 일반 메소드와는 다르게 속성은 과 같이 클래스 바디에 별도로 타입을 선언한다. 클래스 수식어(Modifiers) 클래스의 속성이나 메소드에서 사용할 수 있는 접근 제어자(Access Modifiers)들이 있다  : 어디서나 자유롭게 접근가능(기본) - 속성, 메소드  : 나와 상속된 클래스 내에서 접근 가능 - 속…","fields":{"slug":"/Study/TypeScript/TypeScript_06_class/"},"frontmatter":{"date":"December 22, 2020","title":"TypeScript Class","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"함수 오버로드(Overloads) 오버로드는 이름은 같지만 매개변수 타입과 반환 타입이 다른 여러 함수를 가질 수 있는것. 내가 선언한 함수들이 중첩되는느낌? 원하는 만큼의 함수 선언 및 필수적으로 하나의 함수 구현을 가지고 있어야 하며, 함수 구현에서의 타입은 대게 가 사용된다. 인터페이스나 타입별칭에서도 사용할 수 있다. 참조 HEROPY Teck 한…","fields":{"slug":"/Study/TypeScript/TypeScript_05_function/"},"frontmatter":{"date":"December 21, 2020","title":"TypeScript Function","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"제네릭(Generic) 재사용을 목적으로 함수나 클래스의 선언 시점이 아닌, 사용 시점에 타입을 선언할 수 있다. 타입을 변수로 받아서 사용한다고 이해하기\n등의 경우, T라는 타입은 사용할수 없는 연산이므로 에러가 생김, 극히 일부의 타입만 사용할 수 있는 연산같은 경우는 피하는것이 좋은듯 하다..\n여러 예제를 검색해본 결과 동일한 타입의 값들이 채워지는…","fields":{"slug":"/Study/TypeScript/TypeScript_04_generic/"},"frontmatter":{"date":"December 21, 2020","title":"TypeScript Generic","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"타입 별칭(Type Aliases) 키워드를 사용해 새로운 타입 조합을 만들 수 있다. 하나 이상의 타입을 조합해 별칭을 부여하며, 정확히는 조합한 각 타입들을 참조하는 별칭을 만드는 것이다. 일반적으로 둘 이상의 조합을 구성하기 위해 을 많이 사용한다. 인 타입들이 여러번 사용될 때, 특정한 변수에 담아서 사용하는 느낌? , 과 비슷한 듯 하다. 참조 …","fields":{"slug":"/Study/TypeScript/TypeScript_03_type aliases/"},"frontmatter":{"date":"December 21, 2020","title":"TypeScript Type Aliases","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"인터페이스(interface) 는 타입스크립트의 객체를 정의하는 일종의 규칙 및 구조이다. 는 클래스에서 구현부가 빠졌다고 이해하면 편하다. 즉, 어떠한 객체가 이러이러한 프로퍼티 혹은 메소드를 가진다고 선언하는 것이다. 실질적인 구현은 이를 구현한다고 선언하는 클래스에 맡긴다. 선택적 속성(Optional properties) 속성뒤에 를 사용하면 선택…","fields":{"slug":"/Study/TypeScript/TypeScript_02_interface/"},"frontmatter":{"date":"December 18, 2020","title":"TypeScript interface","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"타입 기본(Types) 타입 지정 타입스크립트는 변수, 매개변수, 속성등에 와 같은 형태로 타입을 지정해줄 수 있다. 자바스크립트로 컴파일할 경우, 타입들이 모두 사라진다. 타입 에러 만약, 지정해준 타입이 아닌 다른 타입의 값이 들어오게 된다면, 바로 에러가 발생한다. 타입선언 불리언 : Boolean true, false로 값을 나타낸다. 숫자 : N…","fields":{"slug":"/Study/TypeScript/TypeScript_01_types/"},"frontmatter":{"date":"December 16, 2020","title":"TypeScript 타입 기본(Type)","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"TypeScript 프론트엔드 개발자들이 가장 선호하는 정적언어라고 한다. 실제로, 대부분 구인글의 우대사항에 TypeScript가 포함되어있는것을 확인해볼 수 있다. TypeScript가 생소한언어인것은 전혀 아니다. 이전에 Angular를 사용하면서 접해보았었고, Kotlin에서도 비슷하게 타입을 지정해주는 문법을 사용했었기때문.. 그때의 TypeSc…","fields":{"slug":"/Study/TypeScript/TypeScript_00_start/"},"frontmatter":{"date":"December 15, 2020","title":"TypeScript 시작","category":"Study","draft":false,"tag":"TypeScript"}}},{"node":{"excerpt":"Hash Table 해시 테이블 특정 값을 받으면, 그 값을 해시함수에 통과시켜 나온 Index에 저장하는 자료구조 배열과 비슷한데, Index를 사용자지정함수를 통해 정하는것 같다. 직접주소테이블 의 초기는 이라는 자료구조에서 출발한다. 입력받은 value가 곧 key가된다. Index를 통해 관리하기 때문에, 값을 찾는데 O(1)의 시간복잡도를 가지고…","fields":{"slug":"/Study/DataStructure/dataStructures_07/"},"frontmatter":{"date":"December 07, 2020","title":"자료구조 Data Structures Hash Table","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"Tree 트리 단순히 나무를 뒤집어놓은것처럼 생겨서 트리이다. DOM에서 태그를 조회하였을 때, 자식노드들이 쭈르륵 있는것을 생각하면 편할듯 용어 Root : 첫 시작이 되는 노드 Leaf : 마지막노드 Branch || Edge : 노드와 노드를 이어주는 것 그래프도 Edge로 이어져있었다. Height : 시작이 되는 노드에서 끝이되는 노드 사이의 E…","fields":{"slug":"/Study/DataStructure/dataStructures_06/"},"frontmatter":{"date":"December 04, 2020","title":"자료구조 Data Structures Tree","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"Graphs 그래프 각 노드들이 서로 연결되어있는 자료 구조형으로, 아주 커다란 자료 구조형의 범위 중 하나라고 한다. 실제로, 자료구조가 포함되어있고, 그 안에는 가 포함되어있다고 함.. 상하위 개념이 없이 노드들간의 간선을 하나로 모아놓은 자료구조라고 한다. 구현방식 인접리스트 : 노드를 키로 사용하여 해당 노드의 이웃들을 리스트에 저장한다. 인접행렬…","fields":{"slug":"/Study/DataStructure/dataStructures_05/"},"frontmatter":{"date":"December 02, 2020","title":"자료구조 Data Structures Graphs","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"Refactoring Class101 과제 피드백 이후, 제출했던 과제를 피드백에 따라 하나하나 수정해보았다. 코드의 가독성 문제 조건문 내부에 조건문이 더 있는것은, 매우 가독성이 떨어지는 프로그래밍이라고 한다. 들여쓰기가 많을수록 지저분한 코드라고 함.. 따라서, 조기에 을 시켜서 조건문을 탈출하는것이 좋다고 한다. 조기에 을 시키기 때문에, 조건문의…","fields":{"slug":"/Study/Think/refactoring/"},"frontmatter":{"date":"November 30, 2020","title":"Refactoring과 CleanCode","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"깃 버전관리시스템 깃을 꾸준히 사용해오고있지만, 처음부터 GUI인 깃허브데스크탑을 사용하여 터미널을 활용하는 오리지널은 잘 모른다.. 또한, 터미널을 사용하지 않고 GUI를 사용할 경우, 편리하지만 실제로 어떻게 작동하는지를 잘 모르며 기능사용에 있어 한정적이기 떄문에 터미널을 사용하는 오리지널 버전을 공부해보기로했다. 시작하기 pc에 기본적으로 내장되어…","fields":{"slug":"/Study/Think/git/"},"frontmatter":{"date":"November 30, 2020","title":"오리지널 깃","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Stack 스택 이전에 봤던 와 유사하게 선형자료구조라고 한다. 다만, 둘의 차이로는 데이터 출력의 방식이다. 가 라면, 은 으로 나중에 입력된 데이터가 먼저 출력된다. 실행컨텍스트에서의 스택 컨텍스트를 공부하면서, 함수들이 실행 될 때,(선언말고) 이 쌓이게 되고, 내부함수가 실행되면 내부함수가 먼저 종료된다고 나와있었다. 배열의 Pop과 Push 자바…","fields":{"slug":"/Study/DataStructure/dataStructures_04/"},"frontmatter":{"date":"November 12, 2020","title":"자료구조 Data Structures Stack","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"Queue 큐 먼저 입력된 데이터가 먼저 출력되는 구조로 저장되는 형식이다. 데이터 입력(Enqueue), 데이터 출력(Dequeue) 두가지 작업이 있다. 이벤트루프의 Queue 이전에 이벤트루프를 공부하면서, 과 를 봤었는데, 비동기함수의 작업들이 끝나고 에 입력되면서, 메인의 이 비었을 때 순서대로(먼저 입력된게 먼저 출력되는) 넘겨진다고 했었다. …","fields":{"slug":"/Study/DataStructure/dataStructures_03/"},"frontmatter":{"date":"November 12, 2020","title":"자료구조 Data Structures Queue","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"List 리스트 처음 끝 중간에 엘리먼트를 추가/삭제할 수 있으며, 배열과 다르게 삭제된 값의 빈 공간을 남기지 않고 없앤다. List또한 index를 가지고 있긴 하지만, 현재 데이터의 다음에 위치하고있는 데이터 혹은 이전에 위치하고있는 데이터처럼 데이터의 순서가 더 중요하다. Array.splice로 가능한거 아니야? 잘 생각해보면, splice와 같…","fields":{"slug":"/Study/DataStructure/dataStructures_02/"},"frontmatter":{"date":"November 12, 2020","title":"자료구조 Data Structures List","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"Array 배열 데이터를 나열하여 각 데이터를 인덱스에 대응해주고, 인덱스로 데이터를 조회할 수 있다. 장점 같은 종류의 데이터를 효율적으로 관리 데이터를 순차적으로 저장 배열 생성 시, 크기를 정해주기 때문에 공간적인 활용이 좋다고 함 자바나 다른 언어에서는 그렇다는데.. 자바스크립트에서는 크기를 변경할 수 있다. 내가 알고있는것과 조금.. 다른건가..…","fields":{"slug":"/Study/DataStructure/dataStructures_01/"},"frontmatter":{"date":"November 12, 2020","title":"자료구조 Data Structures Array","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"자료구조를 왜 봤냐면.. 개발자 커뮤니티나 여러 블로그들을 둘러보다보면 빈번히 나오는 이야기들이 있다.  와 . 그런거 몰라도 실무에서는 크게 문제없다는 사람들도 있고, 개발자라면 기본적으로 알아야한다는 사람들도 있는 것 같다. 하지만 분위기가 공통적으로 더 효율적이고 좋은 프로그래밍을 위해서는 필요한 학문이라는것 같다. 개발을 전공으로 학교를 다니는 친…","fields":{"slug":"/Study/DataStructure/dataStructures_00/"},"frontmatter":{"date":"November 12, 2020","title":"자료구조 Data Structures","category":"Study","draft":false,"tag":"Data Structures"}}},{"node":{"excerpt":"EC2+NGINX+RDS EC2로 가상의 컴퓨터를 만들어서, 서버를 구동시키고 AWS의 RDS로 Mysql 데이터베이스를 만든 뒤, EC2 인스턴스와 연결 그리고 NGINX를 프록시서버로 활용하여 80포트로 요청이 들어왔을 때, 숨겨져있는 서버에서 값을 보내주도록 설정해보려고 한다. AWS에 로그인 후, EC2 서비스를 검색한다 가상의 컴퓨터를 인스턴스라…","fields":{"slug":"/Study/Aws/EC2&NGINX&RDS/"},"frontmatter":{"date":"November 11, 2020","title":"EC2+NGINX+RDS","category":"Study","draft":false,"tag":"AWS"}}},{"node":{"excerpt":"EC2, RDS EC2는 AWS의 가상의 PC를 만들어 내가 만든 서버 및 웹사이트를 배포하는 역할을 하는것 같다. RDS는 AWS에 데이터베이스를 올리는듯한 느낌? 결과 후기 EC2 인스턴스를 생성하면 접근할수 있는 key가되는 pem파일을 하나 준다. 해당 파일을 통해 생성된 EC2 인스턴스에 접속할 수 있게 되더라. 여기서 Ubuntu라는것을 처음 …","fields":{"slug":"/Study/Aws/ec2/"},"frontmatter":{"date":"November 07, 2020","title":"Node.js, Mysql, EC2, RDS","category":"Study","draft":false,"tag":"AWS"}}},{"node":{"excerpt":"React-Router의 문제 최근 React-Router를 활용하여 깃허브페이지나 AWS로 배포를 할 때 겪었던 문제에 대해 호기심이 생겨 알아보았고, 이유를 알게되었다. 😡 문제발생 localhost에서 React-Router를 활용하여 특정 뷰에 Path를 적용시켜주었을 때에는 새로고침을 해도 뷰가 잘 구성이 된다. 깃허브페이지나 AWS를 통한 배포…","fields":{"slug":"/Study/Think/react-router-problem/"},"frontmatter":{"date":"November 06, 2020","title":"React-Router refresh Error","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"S3, CloudFront 만들었던 React App을 S3와 CloudFront를 활용하여 배포하려고 한다. S3 AWS회원가입은 별거 없으니 생략! 첫 회원가입이라면 1년동안 몇몇 기능들을 무료로 사용할 수 있다!(S3, EC2, RDS …) 로그인을 하면, 해당 뷰를 볼 수 있는데, S3를 검색하고 들어가자 S3 검색 후, 우측 상단의 버킷 만들기를…","fields":{"slug":"/Study/Aws/s3&cloudfront/"},"frontmatter":{"date":"November 05, 2020","title":"React Loa-Hands S3+CloudFront 배포하기","category":"Study","draft":false,"tag":"AWS"}}},{"node":{"excerpt":"AWS 배포 최근 만들어왔던 웹 앱을 AWS를 통해 한번 배포해보자는 생각을 갖게되었다.\n물론, 서버비때문에 정상적으로 열렸다면 테스트해보고 바로 닫을꺼지만 ㅎㅎ;\n웹앱을 배포할 때에 가장 대표적인게 EC2와 S3인것 같아 간단하게 알아보았다.\n두가지 모두 AWS에서 일정 금액을 받고, 웹앱을 배포해줄 중앙 컴퓨터를 하나를 대여하는거라 생각하면 된다는데.…","fields":{"slug":"/Study/Aws/ec2&s3/"},"frontmatter":{"date":"November 04, 2020","title":"EC2&S3","category":"Study","draft":false,"tag":"AWS"}}},{"node":{"excerpt":"Loa-Hands React-Hook, redux-hook등 기존과 다른 방법으로 웹앱을 만드는 과정에서 여러가지 시행착오를 가졌었고, 그것들을 기록해보려 한다. Loa-Hands 이동 redux-hook / shallwoEqual 기존 Redux를 사용할 때에는, 해당 컴포넌트에 connect 메소드를 활용하여 연결을 하였었다. 한때는 이것이 직관적이고…","fields":{"slug":"/Study/Think/loa-hands/"},"frontmatter":{"date":"November 02, 2020","title":"React Loa-Hands","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"🤔 의문 이전 으로 간단한 로스트아크 유저검색 앱을 만든 뒤, 취미? 개념으로 를 써서 조금 더 규모있게 웹 앱을 만들고 있다. 물론.. 공식적으로 제공되는 API가 아니라 완성된 DOM을 하나하나 뜯어서 정보를 추출하고 있기때문에 시간은 좀 걸리더라 ㅎㅎ; 그래도 재미는 있으니 다행 구글링 중 와 관련이 깊다는 이라는 용어를 보았는데, 를 사용하는데도 …","fields":{"slug":"/Study/Think/Dom&VirtualDom/"},"frontmatter":{"date":"October 21, 2020","title":"DOM 과 Virtual Dom","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"배웠으면 써먹어봐야지 - LostArk Hands LostArk Hands 내가 좋아하는 게임인 로스트아크 유저검색앱을 만들어보고싶었는데 해당 게임사에서 API를 공개하지 않더라..\n\n그런데, 전투정보실 네트워크에서 요청하는 주소를 그대로 사용해보니, 완성된 View파일을 가져오는데 잘만 조리하면.. 필요한 데이터를 뽑을수 있을것 같아, JS로 먼저 실험…","fields":{"slug":"/Study/Android/lostarkHands/"},"frontmatter":{"date":"October 08, 2020","title":"Kotlin LostArk Hands","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Coroutine Suspending 예제 예제1 서로 의존성있는 메소드일 때 코루틴 내부에서 중단메소드를 활용하면 꿈의 코드처럼 순차적으로 작동된다. 예제2 예제 1과 동일하게 스레드 내부에서 중단함수가 있기 때문에 메인스레드를 읽는것은 중단하긴 하지만, 서로 연관되어있지 않기 때문에 각기 동시에 실행시키고 결과값만 기다림 launch 빌더는 job 클…","fields":{"slug":"/Study/Android/kotlinCoroutine_04_suspending/"},"frontmatter":{"date":"September 29, 2020","title":"Kotlin Coroutine Suspending","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Coroutine Cancellation & Timeouts 예제 코루틴을 활용하여 비동기 처리를 할 때, 불필요하게 메모리가 소모되는 것을 막기 위해 진행 취소 또한 매우 중요하다. 예제1 생성되는 코루틴을 변수에 담고, cancel메소드를 통해 해당 코루틴을 중단시킬 수 있다. 예제2 위의 예제1과 비슷하게 코루틴을 작동을 중단시켰지만, 1.3초 이후…","fields":{"slug":"/Study/Android/kotlinCoroutine_03_cancellation&timeouts/"},"frontmatter":{"date":"September 29, 2020","title":"Kotlin Coroutine Cancellation & Timeouts","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Coroutine 예제 예제1 와 같은 속성들을 코루틴 빌더라고 하며, 해당 코루틴 빌더 이후 중괄호 내부에서 코루틴이 실행된다. 이러한 빌더들은 내부적으로 코루틴을 만들어서 반환하며, 앞에 스코프영역이 필요하다. GlobalScope : 수명주기가 프로그램 전체(프론트단에서 GO)로, 해당 앱이 종료될때까지 작동된다. 코루틴은 가벼운  (별도의 프로그램…","fields":{"slug":"/Study/Android/kotlinCoroutine_02_basic/"},"frontmatter":{"date":"September 28, 2020","title":"Kotlin Coroutine Basic","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Coroutine 🧐왜? 얼마전  앱을 하나 만들어보는 과정에 통신을 하게되었는데, 알수없는 에러가 계속 뜨더라.. 😬이런이유가.. 앱에서 통신을 할 때에, 에서 진행을 할 수 없기때문에 콜백등을 활용하여 다른 별도의 에서 작업을 해야한다더라.. 근데 프론트에서 많이 겪어보았듯이.. 콜백지옥.. 그러던중 처럼 동기, 비동기작업을 도와주는것이 있지않을까 알…","fields":{"slug":"/Study/Android/kotlinCoroutine_01_start/"},"frontmatter":{"date":"September 28, 2020","title":"Kotlin Coroutine","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Fragment Activity간 화면 전환이 아닌, 부품만 교체하여 화면을 구성할 수 있다. 프론트엔드 프레임워크에서 컴포넌트와 비슷한 기능 같다. 결과물 참조 홍스로이드 Kotlin Fragment","fields":{"slug":"/Study/Android/kotlin_11_fragment/"},"frontmatter":{"date":"September 25, 2020","title":"Kotlin Fragment","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Recycler View 기존 List View보다 좀 더 개선된 기능이다. 결과물 참조 홍스로이드 Kotlin Recycler View","fields":{"slug":"/Study/Android/kotlin_10_recyclerview/"},"frontmatter":{"date":"September 23, 2020","title":"Kotlin Recycler View","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Camera 안드로이드 기본 카메라 기능을 앱에서 사용할 수 있다. 개인적으로.. 자바 기본문법을 모르다보니 너무 어려웠다..특히 중간중간에 같은 구문이 있던데.. 잠깐 알아보니 의 속성들을 조금 더 쉽게 변경할 수 있는 문법인것같다!.. 공부해야할듯 결과물 참조 홍스로이드 Kotlin Camera","fields":{"slug":"/Study/Android/kotlin_09_camera/"},"frontmatter":{"date":"September 22, 2020","title":"Kotlin Camera","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"WebView 반응형 환경이 구현된 웹 어플리케이션이라면 해당 기능을 통해 간단하게 안드로이드 앱으로 만들 수 있다. 결과물 참조 홍스로이드 Kotlin WebView","fields":{"slug":"/Study/Android/kotlin_08_webview/"},"frontmatter":{"date":"September 22, 2020","title":"Kotlin WebView","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Shared Preferences 안드로이드는 서버 DB가 아닌 개인적으로 가지고 있는 간이 데이터베이스가 있다. 결과물 참조 홍스로이드 Kotlin Shared Preferences","fields":{"slug":"/Study/Android/kotlin_07_sharedpreference/"},"frontmatter":{"date":"September 21, 2020","title":"Kotlin Shared Preferences","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Navigation View 햄버거나 사이드에서 나오는 슬라이드 네비게이션을 만들 수 있다. 순서 에 추가  res 폴더에 네비게이션 메뉴를 다룰 menu resources directory 를 만들어준다. type을 menu로 해줘야 한다.\nTip! drawble의 new에서 —asset을 통해, 안드로이드에서 제공하는 기본 이미지들을 사용할 수 있다.…","fields":{"slug":"/Study/Android/kotlin_06_navigationview/"},"frontmatter":{"date":"September 21, 2020","title":"Kotlin Navigation View","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"ListView ListView기능을 통해, 배열에 담긴 정보를 반복순회하여 화면을 구성할 수 있다. 프론트단에서 과 비슷한 기능 같다. ListView는 adapter로 연결이 되어있어야 값을 넣어줄 수 있다. 결과물 위처럼 기본적으로 제겅되는 adapter의 경우 실무에서 사용하기에는 부족함이 있기때문에, 대부분 커스텀 adapter를 따로 만들어서 …","fields":{"slug":"/Study/Android/kotlin_05_listview/"},"frontmatter":{"date":"September 15, 2020","title":"Kotlin ListView & Adapter","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"ImageView & Toast ImageView를 통해, 자신이 갖고있는 이미지를 보여주거나, 외부 라이브러리를 통해 해당 url의 이미지를 보여줄 수 있다. Toast를 통해 하단에서 올라오는 알림글을 설정할 수 있다. alert과 비슷한기능? 단 하단에서 올라오고 시간 조절도 가능 URL을 통한 이미지 의 에 아래 두개의 링크를 적는다   파일에 추…","fields":{"slug":"/Study/Android/kotlin_04_imageview/"},"frontmatter":{"date":"September 14, 2020","title":"Kotlin ImageView & Toast","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Intent activity와 activiy간 화면이동 및 정보전달은 intent객체를 사용하면 된다. MainActivity 결과물 SubActivity 결과물 참조 홍스로이드 Kotlin intent","fields":{"slug":"/Study/Android/kotlin_03_intent/"},"frontmatter":{"date":"September 14, 2020","title":"Kotlin intent","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Edit Text & Button Edit Text 디자인탭에서는 Plain Text라고 나와있다. 프론트단에서 input태그와 같은역할인듯하다. 결과물 참조 홍스로이드 Kotlin EditText, Button","fields":{"slug":"/Study/Android/kotlin_02_editText/"},"frontmatter":{"date":"September 11, 2020","title":"Kotlin EditText & Button","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Kotlin 기본구성 기본적으로 xml파일 하나, kt파일 하나가 하나의 화면을 구성한다. xml은 정적인 파일이다. 프론트단에서 HTML, CSS와 같은 기능 인 듯 하다. kt파일은 동적인 파일이다. 프론트단에서 JavaScript의 영역 인 듯 하다. xml파일의 우측 상단을 보면 위와같은 탭들을 볼 수 있는데, 해당 탭을 통해 현재 보여지는화면, …","fields":{"slug":"/Study/Android/kotlin_01_textview/"},"frontmatter":{"date":"September 11, 2020","title":"Kotlin TextView","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"Kotlin? 늘 반응형 웹으로만 모바일 환경을 구현하였었는데, 이전에 React를 배우고 React가 익숙하면 React Native또한 쉽게 할 수 있다고하여 공부했던 기억이 있다. 그리고 최근, Vue.js로 친구와 웹 어플을 만들면서 앱 어플도 만들어보기로 했었는데, 그때 처음 언급된 것이 . 물론.. 친구와 하던 어플은 웹앱까지는 완성이지만.. …","fields":{"slug":"/Study/Android/kotlin_00/"},"frontmatter":{"date":"September 10, 2020","title":"안드로이드나 한번 공부해볼까..?","category":"Study","draft":false,"tag":"Android"}}},{"node":{"excerpt":"반복되는 단어 한방에 수정 Mac  Window  클릭하는 곳마다 커서 생성 Mac  Window  코드 위/아래로 움직이기 Mac  Window  코드 복사해서 위/아래로 움직이기 Mac  Window  코드 블록 한방에 코멘트 처리하기 Mac  Window  선택된 영역에 커서 만들기 Mac  Window  마우스가 가는 곳 마다 커서 만들기 Mac …","fields":{"slug":"/Study/Think/vscode/"},"frontmatter":{"date":"August 24, 2020","title":"Visual Studio 자주사용하는 단축키","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Library jQuery처럼 개발자가 필요로 할 때, 가져다 쓸 수 있는것들 중간에 추가되거나 삭제되어도 진행되는데에 아무런 문제가 없다. Framework 정해져있는 규칙에 따라 개발자가 작성해야 하는 것들 특정 규칙을 따르지 않으면, 정상적으로 진행되지 않는다. Tip 근데 React처럼 애매한 것들도 있으니 구분을 하는것이 프론트엔드단에서 중요한 …","fields":{"slug":"/Study/Think/library, framework/"},"frontmatter":{"date":"August 24, 2020","title":"Library? Framework?","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"깨끗한 코드의 필요성 협업을 할 때에, 추가적인 설명이 없어도 다른사람이 한번에 용도를 이해할 수 있도록 개인 프로젝트더라도 오랜 시간 이후, 내가 나의 코딩 의도를 쉽게 알 수 있도록 검색이 가능한 이름을 사용하기 해당 값의 용도를 예상하여 검색할 수 있도록 한다. 😡 BAD! 😁 GOOD! 함수명은 동사로 사용하기 + 하나의 함수는 하나의 주요한 기능…","fields":{"slug":"/Study/Think/clean code/"},"frontmatter":{"date":"August 24, 2020","title":"깨끗한 코드를 위한 5가지 팁!","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Symbol[iterator]+generator 두가지 기능을 활용하여 객체를 반환하는 함수를 만들어보자 현재 는 반복순회할 수 없기 때문에 위의 에러가 발생한다. 해결하기 위해, 반복할 수 있는 의 형식으로 바꾸기위해  혹은 로 변환해줘야 한다. 위처럼 를 활용하여 새롭게 배열을 만드는것이 아닌, 로 할 수 있다.","fields":{"slug":"/Study/ES6/ES6_23_Symbol.iterator+generator/"},"frontmatter":{"date":"August 17, 2020","title":"ES6_Symbol.iterator+generator","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Symbol 7번째 원시 데이터 타입으로 이 추가되었다. 객체 고유 속성(, )를 만들 수 있는 원시데이터 형식이다.. 객체에서 로 생성된 속성은, 나 과 같은 순회 메소드에서 노출되지 않는다. 은 , 등의 메소드를 사용할 수 있다. Symbol(‘원하는 key’) Symbol.for 는 다른곳에서도 접근 가능한 Symbol을 생성하는것이다. 의 중요 특…","fields":{"slug":"/Study/ES6/ES6_22_Symbol/"},"frontmatter":{"date":"August 17, 2020","title":"ES6_Symbol","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"iterable객체 반복가능한 객체로, 배열을 일반화 한 객체이다. 어떤 객체에서도, 등의 반복문을 적용할 수 있다. iterable한 객체 만들기 현재, 라는 객체는 하지 않은 객체이다. 이 객체를, 를 통해 반복순회 가능한  객체로 만들어보자. 한 객체가 되기 위해선,  메소드를 추가해야한다.  호출 시, 를 가장 먼저 실행. 는 (메소드를 가지고있음…","fields":{"slug":"/Study/ES6/ES6_21_iterable/"},"frontmatter":{"date":"August 17, 2020","title":"ES6_iterable","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"generator함수 의 구조를 가지고 있다. 함수 호출 시, 코드가 실행되는것이 아닌 실행을 처리하는 특별객체 를 반환하다. 으로 단 하나의 값을 반환하는것이 아닌, 로 여러개의 결과값을 원하는 시기에 반환시킬 수 있다. 는의 주요 메소드로, 호출시, 가장 가까운 yield문을 만날때까지 실행되고, 해당 값을 반환한다. 의 반환값은 의 형태이고, 는 반…","fields":{"slug":"/Study/ES6/ES6_20_generator/"},"frontmatter":{"date":"August 17, 2020","title":"ES6_generator","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Proxy 특정 Object를 갖고와서 다른 용도로 사용할 수 있게 하는것 첫번째 인자로 대상이 될 객체를 넣고, 두번째 인자로 중간단계의 메소드를 갖고있는 객체를 지정한다. 대표 메소드는 ,  이다","fields":{"slug":"/Study/ES6/ES6_19_proxy/"},"frontmatter":{"date":"July 31, 2020","title":"ES6_Proxy","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Object.setPrototypeOf 첫번째 인자의 객체가 두번째 인자의 객체에게 상속받도록 한다. Object.assign(Object.create{객체}, {~~})랑 동일함","fields":{"slug":"/Study/ES6/ES6_18_object_setprototypeof/"},"frontmatter":{"date":"July 31, 2020","title":"ES6_Object.setPrototypeOf","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Object.assign 새로운 다른 객체를 복사하는것같지만, 실은 복제를 하는것. 같은 객체를 바라보고있음. 불변성에 적합하지않음 Object.create 인자로 들어오는 객체에게 상속받는 새로운 객체 생성 당연히 상속받는 객체의 값들도 사용할 수 있음. Object.assign + Object.create 의 하나하나 지정해줘야한다는 불편함을 개선하여…","fields":{"slug":"/Study/ES6/ES6_17_object_assign/"},"frontmatter":{"date":"July 30, 2020","title":"ES6_Object.assign","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Class 기존  를 통한 객체생성이 아닌,  를 통한 객체생성이 가능하게 되었다. 실제로 React, Vue를 사용하다보면 Class기반 컴포넌트들을 쉽게 볼 수 있다.","fields":{"slug":"/Study/ES6/ES6_16_class/"},"frontmatter":{"date":"July 30, 2020","title":"ES6_Class객체 생성","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Rest Parameters(가변인자) 가변인자 arguments는 유사배열이므로, Array 메소드를 사용할 수 없다. 기존 Array.from도 가능하지만, 변수로 받을 때 spread operator로 더 편하게 받을 수 있다.","fields":{"slug":"/Study/ES6/ES6_15_rest parameters/"},"frontmatter":{"date":"July 28, 2020","title":"ES6_Rest Parameters","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Default Parameters(기본 변수 설정) 함수의 변수 설정에서, 기본값을 지정해줄 수 있다.","fields":{"slug":"/Study/ES6/ES6_14_default params/"},"frontmatter":{"date":"July 28, 2020","title":"ES6_Default Parameters","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Template Template Literals “ 로 문자열을 감싸고, 를 통해 값을 바로 가져올 수 있다. 이전에는 나 로 문자열을 감싸고, 스크립트의 값을 로 해줬어야 했는데, 개선되었다. Tagged Template Literals 태그가 포함된 템플릿 리터럴을 함수로 분석할 수 있게되었다. func; 해당 함수에 템플릿 리터럴을 보내면, 첫번째 …","fields":{"slug":"/Study/ES6/ES6_12_template/"},"frontmatter":{"date":"July 27, 2020","title":"ES6_template처리","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Arroy function(화살표함수) 콜백함수나, 몇몇의 함수를 입력할 때 function을 다시쓰는것은 너무나도 귀찮다. 따라서, 이런 경우 로 축약할수 있게 되었다. 화살표함수의 this 기본적으로 객체 내에서는 메소드를 정의하게될 경우, 해당 메소드의 는 객체를 지칭한다. 하지만 메소드를 화살표함수로 정의한다면, 는 객체가 아닌 를 지칭하게된다.\n…","fields":{"slug":"/Study/ES6/ES6_13_arroyfunction/"},"frontmatter":{"date":"July 27, 2020","title":"ES6_Arrow function(화살표함수)","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Map, WeakMap 배열 -> Set, WeakSet (좀 더 세련된 배열?) 객체 -> Map, WeakMap (좀 더 세련된 객체?) 특징 Set, Map : 배열이나 객체에서 기본타입을 저장할 때 사용한다. WeakSet, WeakMap : 기본타입을 제외한 모든 경우를 저장할 수 있다. set, get, has, delete, claer 메소드…","fields":{"slug":"/Study/ES6/ES6_11_map&weakmap/"},"frontmatter":{"date":"July 24, 2020","title":"ES6_Map&WeakMap 추가정보를 담은 객체저장","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"WeakSet : 기본타입이 아닌것들만 저장가능하다. 문자열, 숫자열, null, undefined, boolean을 제외한 모든것 객체타입을 중복없이 저장하고자 할 때 유용하다. WeakSet은 처음 넣을 때, 참조타입이였는데 기본타입이 되었다면 그 값을 없애버린다. console에는 있는것처럼 보이지만, 갖고있는지 has 여부를 물어보면 false가 …","fields":{"slug":"/Study/ES6/ES6_10_weakSet/"},"frontmatter":{"date":"July 24, 2020","title":"ES6_WeakSet을통한 효과적으로 객체타입저장","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Set 중복없이 유일한 값을 저장하고자 할 때, 이미 존재하는지 체크할 때 유용하다.  메소드로 해당 값을 가지고있는지 확인할 수 있다.  메소드로 해당 값을 지울 수 있다.","fields":{"slug":"/Study/ES6/ES6_09_set/"},"frontmatter":{"date":"July 24, 2020","title":"ES6_Set으로 유니크한 배열 만들기","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"Destructuring Destructuring Array 배열에 변수를 할당할 때에, 좀 더 편하게 할 수 있다. Destructuring Object 객체에서 특정 값만 출력하고자 할 때(많이 사용했었음) 활용","fields":{"slug":"/Study/ES6/ES6_08_destructuring/"},"frontmatter":{"date":"July 23, 2020","title":"ES6_Destructuring","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"객체 내에서 메소드를 정의할 때에는 arrow function을 사용하면 안된다. 위의 방법을 사용하면, this가 객체가 아닌 window를 지칭하게 된다.","fields":{"slug":"/Study/ES6/ES6_07_create Object/"},"frontmatter":{"date":"July 23, 2020","title":"ES6_객체만들기","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"arguments 인자의 갯수가 수시로 바뀌는 함수의 경우, 모든 변수를 지정해주는것이 불가능하기 때문에 aurguments를 통해 별도의 변수 필요 없이 배열화 할 수 있다. 이전 실행컨텍스트 에서 arguments라는 값이 생성되는것을 생각해보면 된다.","fields":{"slug":"/Study/ES6/ES6_06_from&arguments/"},"frontmatter":{"date":"July 23, 2020","title":"ES6_from과 arguments","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"spread operator : 펼침연산자. 해당 기능을 사용하여, 참조가 아닌 복사된 객체와 배열을 만들수 있다.","fields":{"slug":"/Study/ES6/ES6_05_spread operator/"},"frontmatter":{"date":"July 23, 2020","title":"ES6_spread operator","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"data 순회하기 예제를 위한 임의의 상위 메소드 생성 forEach 등등.. map도 가능 for in 매우비추천 for in의 경우, 개발자가 임의로 Array.prototype을 통해 공용 메소드를 만들었다면, 그 메소드또한 console로 찍혀나온다. 즉, 상위에서 생성된 값 또한 순회됨. for of for in의 대체제로, 자신이 갖고있는 값들…","fields":{"slug":"/Study/ES6/ES6_04_for of/"},"frontmatter":{"date":"July 23, 2020","title":"ES6_for of","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"String.methods ES6에서 String 객체의 새로운 메소드가 추가되었다.","fields":{"slug":"/Study/ES6/ES6_03_new_String_methods/"},"frontmatter":{"date":"July 17, 2020","title":"ES6_String.new-Methods","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"const 재선언은 불가능하지만, 배열이나 객체로 선언(참조의 값)된 값을 변경하는것은 가능하다. 불변성 객체나, 배열은 참조를 하기 때문에, 값 변경시 모든 값들이 변경되서 새로운 객체나 배열을 만드는것이 좋다.","fields":{"slug":"/Study/ES6/ES6_02_const/"},"frontmatter":{"date":"July 17, 2020","title":"ES6_const","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"let 기존 우리가 알던  변수선언과 다르게, 두번 선언될 수 없다. 은 스코프단위로 서로 다른 변수이지만, 는 함수단위이다.  &  &  클릭해보세요. scope\n어떤 변수들에 접근할 수 있는지 정의하는 것 전역스코프 : 전역변수 지역스코프 : 함수스코프와 블록스코프가 있다. var는 함수스코프. let은 {}인 블록스코프","fields":{"slug":"/Study/ES6/ES6_01_let/"},"frontmatter":{"date":"July 16, 2020","title":"ES6_let","category":"Study","draft":false,"tag":"ECMA Script"}}},{"node":{"excerpt":"😂 해당 스코프(영역)에서, 자신이 참조할 수 있는 변수를 클로저라하는것 같더라. Closure(클로저) 는 함수가 호출될 때가 아니라, 선언했을 때 정해진다고 했었음. 렉시컬 스코핑 스코프는 함수를 호출할 때가 아니라, 함수를 어디에 선언했는지에 따라 결정된다. 클로저의 장점 상태유지 : 현재 상태를 기억하고, 변경된 최신 상태를 유지할 수 있다. 전역…","fields":{"slug":"/Study/Think/Closure/"},"frontmatter":{"date":"July 14, 2020","title":"Closure, 클로저","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"Hoisting, 호이스팅 처음 코딩을 배울 때, 들었던 말이 있는데 변수나 함수는 항상 맨 위에 쓰세요. 처음에는 그 이유를 몰랐었고, 함수의 경우는 길어지게되면 너무 스크롤을 많이 내려야해서 아래에 몰아쓰기도 했다 사실 이때는, 리팩토링이라는 개념도 없던시절이라 구현만 되면 장땡이라고 생각했던.. 그러다보면 종종 마주치는 상황이 있다. 함수는 잘 출력…","fields":{"slug":"/Study/Think/hoisting/"},"frontmatter":{"date":"July 13, 2020","title":"Hoisting, 호이스팅","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"😂 이전 실행컨텍스트를 공부하면서, 라는 용어를 접하게 되었다. 그렇게 어려운 용어는 아니였지만, 지금생각해보니를 먼저 알고 실행컨텍스트를 공부했다면 더 수월했을 듯 하다. Scope(영역) 는 함수가 호출될 때가 아니라, 선언했을 때 정해진다고 했었음. 1번 1번에서 인 함수선언식은,  함수 안에있기 때문에, 의 내부까지가 영역임. 따라서,  라는 변수…","fields":{"slug":"/Study/Think/scope/"},"frontmatter":{"date":"July 13, 2020","title":"Scope, 영역","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"참조 : https://poiemaweb.com/js-execution-context 정의 Execution Context : 실행컨텍스트 실행 가능한 코드가 실행되기 위해 필요한 과정 scope, hoisting, this, function, closure등의 동작원리를 담고있는 자바스크립트의 핵심원리이다. 자바스크립트 엔진은 코드를 실행하기 위해 필요…","fields":{"slug":"/Study/Think/Executed Context_v1_1/"},"frontmatter":{"date":"July 10, 2020","title":"실행컨텍스트1(Executed Context)","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"참조 : https://www.zerocho.com/category/Javascript/post/5740531574288ebc5f2ba97e 😖 실행 컨텍스트를 이전에 공부했지만.. 아직 확신이 가지 않는 부분이 많아서 더 구글링 해 보았고, 조금 더 쉽게 설명된 글이 있었다! 실행컨텍스트 : 문맥이라 생각하자. 코드의 실행환경. 설명을 위한 코드 시작!…","fields":{"slug":"/Study/Think/Executed Context_v2/"},"frontmatter":{"date":"July 08, 2020","title":"실행컨텍스트(Executed Context) 더 쉽게!","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"참조 : https://poiemaweb.com/js-execution-context 실행 컨텍스트의 생성과정 설명을 위한 코드 전역객체 생성 시작 전 전역객체가 생성되며, 이 객체에는 어떠한 곳에서도 접근할 수 있다.(Global객체인듯 함) 이 초기의 전역객체에는 Math, String, Array등의 windows의 기본객체와 BOM, DOM등이 설…","fields":{"slug":"/Study/Think/Executed Context_v1_2/"},"frontmatter":{"date":"July 08, 2020","title":"실행컨텍스트2(Executed Context)","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"🙄 경험 Vue공부중, Component부분에서 부모와 자식Component간의 소통을 보고있었다. React를 이미 알고 있었기 때문에 속성을 전달하고, 속성으로 전달된 부모의 이벤트를 호출하는 구조랑 비슷한것 같아 문제는 없었다. 그런데.. dispatchEvent라는 메소드를 처음보게되었다. 🤔 의문 Redux상태관리를 할 때, 제공되는 dispat…","fields":{"slug":"/Study/Think/CustomEvent/"},"frontmatter":{"date":"July 08, 2020","title":"CustomEvent","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"HTTP(Hypertext Transfer Protocol) 브라우저(클라이언트)와 서버간 데이터를 주고받기위한 방식(나는 이렇게 줄 테니, 넌 이렇게 받아) HTTP로 데이터를 주고받기 위해서는 Request, Response가 있어야한다. URL을통해 데이터를 요청하는데, 요청하는 데이터에 특정 동작을 수행할 수 있다. GET : 존재하는 자원에 대한…","fields":{"slug":"/Study/Think/Http(s)&REST/"},"frontmatter":{"date":"July 07, 2020","title":"Http(s)? REST?","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"21-11-29 업데이트 모듈화에대한 욕구 개발되는 앱에서 사용되는 스크립트의 양이 많아지고, 규모가 커지면서 사람들은 비슷한 역할을 코드들을 묶어서 관리하고, 재사용가능한 코드들을 필요한 상황에 가져와서() 혹은 내보내는등()을 통해 관리를 하고싶어하게 되었다. 즉, 규모있는 코드를 작은단위로 잘라내고 필요에 따라 가져와서 사용하고자하는 욕구가 생겼다.…","fields":{"slug":"/Study/Think/module, bundler/"},"frontmatter":{"date":"July 06, 2020","title":"모듈과 번들러","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"SSR(서버 사이드 렌더링) 대표예시 MPA(멀티 페이지 어플리케이션) 장점 SEO(검색엔진환경)에 적합하다. 초기화면 로딩이 빠르다. 단점 요청값이 있으면, 웹서버에서 해당 View를 새로 만들어서 보여주기때문에, 로딩(하얀)화면이있다. CSR보다 비교적 개발이 복잡해진다. 클라이언트와 서버가 상호작용하는 기능은 사라짐.(해당 내용은 개선되었음) 와 가…","fields":{"slug":"/Study/Think/SSR&CSR/"},"frontmatter":{"date":"July 06, 2020","title":"SSR? CSR?","category":"Study","draft":false,"tag":"Think"}}},{"node":{"excerpt":"동기함수 동기함수는 처음 실행된 함수가 종료될때까지, 이후의 함수는 실행되지 않는다. 따라서 비동기함수를 활용하는 경우가 많다. 🙄 경험 Node.js 할 때, readFile에 경로랑, 탐색 후 실행 콜백함수를 적고, 해당 콜백 함수 안에서 writeFile 기억남?\n그때는 두번만 하면 됬던거라 짧았는데, 더 길어지면 위와같은 애로사항이 발생함 🤔 의문…","fields":{"slug":"/Study/Think/Promise/"},"frontmatter":{"date":"July 06, 2020","title":"Promise","category":"Study","draft":false,"tag":"Think"}}}]}}}